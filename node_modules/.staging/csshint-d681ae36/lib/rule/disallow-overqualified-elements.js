'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'disallow-overqualified-elements';

/**
 * css 组合的正则匹配
 *
 * @const
 * @type {RegExp}
 */
/**
 * @file disallow-overqualified-elements 的检测逻辑
 *       013: [强制] 如无必要，不得为 `id`、`class` 选择器添加类型选择器进行限定。
 * @author ielgnaw(wuji0223@gmail.com)
 */

var PATTERN_COMBINATORS = /[\s>+~,[]+/;

/**
 * css selector 开始字符的正则匹配
 *
 * @const
 * @type {RegExp}
 */
var PATTERN_STARTCHARS = /[\.#\[]+/;

var PATTERN_PERCENT = /^((-|\+)?\d{1,2}(\.\d+)?|100)%$/;

/**
 * 错误信息
 *
 * @const
 * @type {string}
 */
var MSG = 'Not allowed to add a type selector is limited to ID, class selector';

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        if (opts.ruleVal) {

            css.walkRules(function (rule) {

                if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                    return;
                }

                if (!isNaN(rule.selector) || PATTERN_PERCENT.test(rule.selector)) {
                    return;
                }

                var source = rule.source;
                var line = source.start.line;

                var lineContent = (0, _util.getLineContent)(line, source.input.css) || '';

                var segments = rule.selector.split(PATTERN_COMBINATORS);
                for (var i = 0, len = segments.length; i < len; i++) {
                    var items = segments[i].split(PATTERN_STARTCHARS);
                    if (items[0] !== '' && items.length > 1) {
                        result.warn(RULENAME, {
                            node: rule,
                            ruleName: RULENAME,
                            line: line,
                            message: MSG,
                            colorMessage: '`' + lineContent.replace(segments[i], segments[i].replace(items[0], _chalk2.default.magenta(items[0]))) + '` ' + _chalk2.default.grey(MSG)
                        });
                        global.CSSHINT_INVALID_ALL_COUNT++;
                    }
                }
            });
        }
    };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL2Rpc2FsbG93LW92ZXJxdWFsaWZpZWQtZWxlbWVudHMuanMiXSwibmFtZXMiOlsiUlVMRU5BTUUiLCJQQVRURVJOX0NPTUJJTkFUT1JTIiwiUEFUVEVSTl9TVEFSVENIQVJTIiwiUEFUVEVSTl9QRVJDRU5UIiwiTVNHIiwiY2hlY2siLCJwb3N0Y3NzIiwicGx1Z2luIiwiY3NzIiwicmVzdWx0Iiwib3B0cyIsInJ1bGVWYWwiLCJ3YWxrUnVsZXMiLCJnbG9iYWwiLCJDU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UIiwibWF4RXJyb3IiLCJpc05hTiIsInJ1bGUiLCJzZWxlY3RvciIsInRlc3QiLCJzb3VyY2UiLCJsaW5lIiwic3RhcnQiLCJsaW5lQ29udGVudCIsImlucHV0Iiwic2VnbWVudHMiLCJzcGxpdCIsImkiLCJsZW4iLCJsZW5ndGgiLCJpdGVtcyIsIndhcm4iLCJub2RlIiwicnVsZU5hbWUiLCJtZXNzYWdlIiwiY29sb3JNZXNzYWdlIiwicmVwbGFjZSIsImNoYWxrIiwibWFnZW50YSIsImdyZXkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFNQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFFQTs7Ozs7O0FBTUEsSUFBTUEsV0FBVyxpQ0FBakI7O0FBRUE7Ozs7OztBQW5CQTs7Ozs7O0FBeUJBLElBQU1DLHNCQUFzQixZQUE1Qjs7QUFFQTs7Ozs7O0FBTUEsSUFBTUMscUJBQXFCLFVBQTNCOztBQUVBLElBQU1DLGtCQUFrQixpQ0FBeEI7O0FBRUE7Ozs7OztBQU1BLElBQU1DLE1BQU0scUVBQVo7O0FBRUE7Ozs7Ozs7O0FBUU8sSUFBTUMsd0JBQVFDLGtCQUFRQyxNQUFSLENBQWVQLFFBQWYsRUFBeUI7QUFBQSxXQUMxQyxVQUFDUSxHQUFELEVBQU1DLE1BQU4sRUFBaUI7QUFDYixZQUFJQyxLQUFLQyxPQUFULEVBQWtCOztBQUVkSCxnQkFBSUksU0FBSixDQUFjLGdCQUFROztBQUVsQixvQkFBSUMsT0FBT0MseUJBQVAsSUFBb0NKLEtBQUtLLFFBQTdDLEVBQXVEO0FBQ25EO0FBQ0g7O0FBRUQsb0JBQUksQ0FBQ0MsTUFBTUMsS0FBS0MsUUFBWCxDQUFELElBQXlCZixnQkFBZ0JnQixJQUFoQixDQUFxQkYsS0FBS0MsUUFBMUIsQ0FBN0IsRUFBa0U7QUFDOUQ7QUFDSDs7QUFFRCxvQkFBTUUsU0FBU0gsS0FBS0csTUFBcEI7QUFDQSxvQkFBTUMsT0FBT0QsT0FBT0UsS0FBUCxDQUFhRCxJQUExQjs7QUFFQSxvQkFBTUUsY0FBYywwQkFBZUYsSUFBZixFQUFxQkQsT0FBT0ksS0FBUCxDQUFhaEIsR0FBbEMsS0FBMEMsRUFBOUQ7O0FBRUEsb0JBQU1pQixXQUFXUixLQUFLQyxRQUFMLENBQWNRLEtBQWQsQ0FBb0J6QixtQkFBcEIsQ0FBakI7QUFDQSxxQkFBSyxJQUFJMEIsSUFBSSxDQUFSLEVBQVdDLE1BQU1ILFNBQVNJLE1BQS9CLEVBQXVDRixJQUFJQyxHQUEzQyxFQUFnREQsR0FBaEQsRUFBcUQ7QUFDakQsd0JBQU1HLFFBQVFMLFNBQVNFLENBQVQsRUFBWUQsS0FBWixDQUFrQnhCLGtCQUFsQixDQUFkO0FBQ0Esd0JBQUk0QixNQUFNLENBQU4sTUFBYSxFQUFiLElBQW1CQSxNQUFNRCxNQUFOLEdBQWUsQ0FBdEMsRUFBeUM7QUFDckNwQiwrQkFBT3NCLElBQVAsQ0FBWS9CLFFBQVosRUFBc0I7QUFDbEJnQyxrQ0FBTWYsSUFEWTtBQUVsQmdCLHNDQUFVakMsUUFGUTtBQUdsQnFCLGtDQUFNQSxJQUhZO0FBSWxCYSxxQ0FBUzlCLEdBSlM7QUFLbEIrQiwwQ0FBYyxNQUNSWixZQUFZYSxPQUFaLENBQ0VYLFNBQVNFLENBQVQsQ0FERixFQUVFRixTQUFTRSxDQUFULEVBQVlTLE9BQVosQ0FBb0JOLE1BQU0sQ0FBTixDQUFwQixFQUE4Qk8sZ0JBQU1DLE9BQU4sQ0FBY1IsTUFBTSxDQUFOLENBQWQsQ0FBOUIsQ0FGRixDQURRLEdBS1IsSUFMUSxHQU1STyxnQkFBTUUsSUFBTixDQUFXbkMsR0FBWDtBQVhZLHlCQUF0QjtBQWFBUywrQkFBT0MseUJBQVA7QUFDSDtBQUNKO0FBQ0osYUFuQ0Q7QUFvQ0g7QUFDSixLQXpDeUM7QUFBQSxDQUF6QixDQUFkIiwiZmlsZSI6ImRpc2FsbG93LW92ZXJxdWFsaWZpZWQtZWxlbWVudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIGRpc2FsbG93LW92ZXJxdWFsaWZpZWQtZWxlbWVudHMg55qE5qOA5rWL6YC76L6RXG4gKiAgICAgICAwMTM6IFvlvLrliLZdIOWmguaXoOW/heimge+8jOS4jeW+l+S4uiBgaWRg44CBYGNsYXNzYCDpgInmi6nlmajmt7vliqDnsbvlnovpgInmi6nlmajov5vooYzpmZDlrprjgIJcbiAqIEBhdXRob3IgaWVsZ25hdyh3dWppMDIyM0BnbWFpbC5jb20pXG4gKi9cblxuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCBwb3N0Y3NzIGZyb20gJ3Bvc3Rjc3MnO1xuXG5pbXBvcnQge2dldExpbmVDb250ZW50fSBmcm9tICcuLi91dGlsJztcblxuLyoqXG4gKiDlvZPliY3mlofku7bmiYDku6PooajnmoTop4TliJnlkI3np7BcbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmNvbnN0IFJVTEVOQU1FID0gJ2Rpc2FsbG93LW92ZXJxdWFsaWZpZWQtZWxlbWVudHMnO1xuXG4vKipcbiAqIGNzcyDnu4TlkIjnmoTmraPliJnljLnphY1cbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbmNvbnN0IFBBVFRFUk5fQ09NQklOQVRPUlMgPSAvW1xccz4rfixbXSsvO1xuXG4vKipcbiAqIGNzcyBzZWxlY3RvciDlvIDlp4vlrZfnrKbnmoTmraPliJnljLnphY1cbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbmNvbnN0IFBBVFRFUk5fU1RBUlRDSEFSUyA9IC9bXFwuI1xcW10rLztcblxuY29uc3QgUEFUVEVSTl9QRVJDRU5UID0gL14oKC18XFwrKT9cXGR7MSwyfShcXC5cXGQrKT98MTAwKSUkLztcblxuLyoqXG4gKiDplJnor6/kv6Hmga9cbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmNvbnN0IE1TRyA9ICdOb3QgYWxsb3dlZCB0byBhZGQgYSB0eXBlIHNlbGVjdG9yIGlzIGxpbWl0ZWQgdG8gSUQsIGNsYXNzIHNlbGVjdG9yJztcblxuLyoqXG4gKiDlhbfkvZPnmoTmo4DmtYvpgLvovpFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyDlj4LmlbBcbiAqIEBwYXJhbSB7Kn0gb3B0cy5ydWxlVmFsIOW9k+WJjeinhOWImeWFt+S9k+mFjee9rueahOWAvFxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZUNvbnRlbnQg5paH5Lu25YaF5a65XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlUGF0aCDmlofku7bot6/lvoRcbiAqL1xuZXhwb3J0IGNvbnN0IGNoZWNrID0gcG9zdGNzcy5wbHVnaW4oUlVMRU5BTUUsIG9wdHMgPT5cbiAgICAoY3NzLCByZXN1bHQpID0+IHtcbiAgICAgICAgaWYgKG9wdHMucnVsZVZhbCkge1xuXG4gICAgICAgICAgICBjc3Mud2Fsa1J1bGVzKHJ1bGUgPT4ge1xuXG4gICAgICAgICAgICAgICAgaWYgKGdsb2JhbC5DU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UID49IG9wdHMubWF4RXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghaXNOYU4ocnVsZS5zZWxlY3RvcikgfHwgUEFUVEVSTl9QRVJDRU5ULnRlc3QocnVsZS5zZWxlY3RvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IHJ1bGUuc291cmNlO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBzb3VyY2Uuc3RhcnQubGluZTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVDb250ZW50ID0gZ2V0TGluZUNvbnRlbnQobGluZSwgc291cmNlLmlucHV0LmNzcykgfHwgJyc7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBzZWdtZW50cyA9IHJ1bGUuc2VsZWN0b3Iuc3BsaXQoUEFUVEVSTl9DT01CSU5BVE9SUyk7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNlZ21lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gc2VnbWVudHNbaV0uc3BsaXQoUEFUVEVSTl9TVEFSVENIQVJTKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1zWzBdICE9PSAnJyAmJiBpdGVtcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQud2FybihSVUxFTkFNRSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU6IHJ1bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZU5hbWU6IFJVTEVOQU1FLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6IGxpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogTVNHLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yTWVzc2FnZTogJ2AnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgbGluZUNvbnRlbnQucmVwbGFjZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlZ21lbnRzW2ldLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VnbWVudHNbaV0ucmVwbGFjZShpdGVtc1swXSwgY2hhbGsubWFnZW50YShpdGVtc1swXSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnYCAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgY2hhbGsuZ3JleShNU0cpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbC5DU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbik7XG4iXX0=