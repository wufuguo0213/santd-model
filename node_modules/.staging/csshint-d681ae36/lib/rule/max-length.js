'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
/**
 * @file max-length 的检测逻辑
 *       006: [强制] 每行不得超过 `120` 个字符，除非单行不可分割。
 * @author ielgnaw(wuji0223@gmail.com)
 */

var RULENAME = 'max-length';

/**
 * 匹配 css 属性值的 url(...);
 *
 * @const
 * @type {RegExp}
 */
var PATTERN_URI = /url\(["']?([^\)"']+)["']?\)/i;

var excludeLines = [];

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        if (opts.ruleVal) {

            excludeLines = [];

            var MSG = 'Each line must not be greater than ' + opts.ruleVal + ' characters';

            if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                return;
            }

            // 排除掉 background-image: 2px 2px url(data:image/gif;base64,.....); 的情况
            css.walkDecls(function (decl) {
                var value = decl.value;
                if (PATTERN_URI.test(value)) {
                    excludeLines.push(decl.source.start.line);
                }
            });

            var lines = css.source.input.css.split(/\n/);

            for (var i = 0, len = lines.length; i < len; i++) {
                if (lines[i].length > opts.ruleVal && excludeLines.indexOf(i + 1) === -1) {
                    result.warn(RULENAME, {
                        node: css,
                        ruleName: RULENAME,
                        line: i + 1,
                        message: MSG,
                        colorMessage: _chalk2.default.grey(MSG)
                    });
                    global.CSSHINT_INVALID_ALL_COUNT++;
                }
            }
        }
    };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL21heC1sZW5ndGguanMiXSwibmFtZXMiOlsiUlVMRU5BTUUiLCJQQVRURVJOX1VSSSIsImV4Y2x1ZGVMaW5lcyIsImNoZWNrIiwicG9zdGNzcyIsInBsdWdpbiIsImNzcyIsInJlc3VsdCIsIm9wdHMiLCJydWxlVmFsIiwiTVNHIiwiZ2xvYmFsIiwiQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCIsIm1heEVycm9yIiwid2Fsa0RlY2xzIiwidmFsdWUiLCJkZWNsIiwidGVzdCIsInB1c2giLCJzb3VyY2UiLCJzdGFydCIsImxpbmUiLCJsaW5lcyIsImlucHV0Iiwic3BsaXQiLCJpIiwibGVuIiwibGVuZ3RoIiwiaW5kZXhPZiIsIndhcm4iLCJub2RlIiwicnVsZU5hbWUiLCJtZXNzYWdlIiwiY29sb3JNZXNzYWdlIiwiY2hhbGsiLCJncmV5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBTUE7Ozs7QUFDQTs7Ozs7O0FBRUE7Ozs7OztBQVRBOzs7Ozs7QUFlQSxJQUFNQSxXQUFXLFlBQWpCOztBQUVBOzs7Ozs7QUFNQSxJQUFNQyxjQUFjLDhCQUFwQjs7QUFFQSxJQUFJQyxlQUFlLEVBQW5COztBQUVBOzs7Ozs7OztBQVFPLElBQU1DLHdCQUFRQyxrQkFBUUMsTUFBUixDQUFlTCxRQUFmLEVBQXlCO0FBQUEsV0FDMUMsVUFBQ00sR0FBRCxFQUFNQyxNQUFOLEVBQWlCO0FBQ2IsWUFBSUMsS0FBS0MsT0FBVCxFQUFrQjs7QUFFZFAsMkJBQWUsRUFBZjs7QUFFQSxnQkFBTVEsTUFBTSx3Q0FBd0NGLEtBQUtDLE9BQTdDLEdBQXVELGFBQW5FOztBQUVBLGdCQUFJRSxPQUFPQyx5QkFBUCxJQUFvQ0osS0FBS0ssUUFBN0MsRUFBdUQ7QUFDbkQ7QUFDSDs7QUFFRDtBQUNBUCxnQkFBSVEsU0FBSixDQUFjLGdCQUFRO0FBQ2xCLG9CQUFNQyxRQUFRQyxLQUFLRCxLQUFuQjtBQUNBLG9CQUFJZCxZQUFZZ0IsSUFBWixDQUFpQkYsS0FBakIsQ0FBSixFQUE2QjtBQUN6QmIsaUNBQWFnQixJQUFiLENBQWtCRixLQUFLRyxNQUFMLENBQVlDLEtBQVosQ0FBa0JDLElBQXBDO0FBQ0g7QUFDSixhQUxEOztBQU9BLGdCQUFNQyxRQUFRaEIsSUFBSWEsTUFBSixDQUFXSSxLQUFYLENBQWlCakIsR0FBakIsQ0FBcUJrQixLQUFyQixDQUEyQixJQUEzQixDQUFkOztBQUVBLGlCQUFLLElBQUlDLElBQUksQ0FBUixFQUFXQyxNQUFNSixNQUFNSyxNQUE1QixFQUFvQ0YsSUFBSUMsR0FBeEMsRUFBNkNELEdBQTdDLEVBQWtEO0FBQzlDLG9CQUFJSCxNQUFNRyxDQUFOLEVBQVNFLE1BQVQsR0FBa0JuQixLQUFLQyxPQUF2QixJQUNHUCxhQUFhMEIsT0FBYixDQUFxQkgsSUFBSSxDQUF6QixNQUFnQyxDQUFDLENBRHhDLEVBRUU7QUFDRWxCLDJCQUFPc0IsSUFBUCxDQUFZN0IsUUFBWixFQUFzQjtBQUNsQjhCLDhCQUFNeEIsR0FEWTtBQUVsQnlCLGtDQUFVL0IsUUFGUTtBQUdsQnFCLDhCQUFNSSxJQUFJLENBSFE7QUFJbEJPLGlDQUFTdEIsR0FKUztBQUtsQnVCLHNDQUFjQyxnQkFBTUMsSUFBTixDQUFXekIsR0FBWDtBQUxJLHFCQUF0QjtBQU9BQywyQkFBT0MseUJBQVA7QUFDSDtBQUNKO0FBQ0o7QUFDSixLQXJDeUM7QUFBQSxDQUF6QixDQUFkIiwiZmlsZSI6Im1heC1sZW5ndGguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIG1heC1sZW5ndGgg55qE5qOA5rWL6YC76L6RXG4gKiAgICAgICAwMDY6IFvlvLrliLZdIOavj+ihjOS4jeW+l+i2hei/hyBgMTIwYCDkuKrlrZfnrKbvvIzpmaTpnZ7ljZXooYzkuI3lj6/liIblibLjgIJcbiAqIEBhdXRob3IgaWVsZ25hdyh3dWppMDIyM0BnbWFpbC5jb20pXG4gKi9cblxuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCBwb3N0Y3NzIGZyb20gJ3Bvc3Rjc3MnO1xuXG4vKipcbiAqIOW9k+WJjeaWh+S7tuaJgOS7o+ihqOeahOinhOWImeWQjeensFxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgUlVMRU5BTUUgPSAnbWF4LWxlbmd0aCc7XG5cbi8qKlxuICog5Yy56YWNIGNzcyDlsZ7mgKflgLznmoQgdXJsKC4uLik7XG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG5jb25zdCBQQVRURVJOX1VSSSA9IC91cmxcXChbXCInXT8oW15cXClcIiddKylbXCInXT9cXCkvaTtcblxubGV0IGV4Y2x1ZGVMaW5lcyA9IFtdO1xuXG4vKipcbiAqIOWFt+S9k+eahOajgOa1i+mAu+i+kVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIOWPguaVsFxuICogQHBhcmFtIHsqfSBvcHRzLnJ1bGVWYWwg5b2T5YmN6KeE5YiZ5YW35L2T6YWN572u55qE5YC8XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlQ29udGVudCDmlofku7blhoXlrrlcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVQYXRoIOaWh+S7tui3r+W+hFxuICovXG5leHBvcnQgY29uc3QgY2hlY2sgPSBwb3N0Y3NzLnBsdWdpbihSVUxFTkFNRSwgb3B0cyA9PlxuICAgIChjc3MsIHJlc3VsdCkgPT4ge1xuICAgICAgICBpZiAob3B0cy5ydWxlVmFsKSB7XG5cbiAgICAgICAgICAgIGV4Y2x1ZGVMaW5lcyA9IFtdO1xuXG4gICAgICAgICAgICBjb25zdCBNU0cgPSAnRWFjaCBsaW5lIG11c3Qgbm90IGJlIGdyZWF0ZXIgdGhhbiAnICsgb3B0cy5ydWxlVmFsICsgJyBjaGFyYWN0ZXJzJztcblxuICAgICAgICAgICAgaWYgKGdsb2JhbC5DU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UID49IG9wdHMubWF4RXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIOaOkumZpOaOiSBiYWNrZ3JvdW5kLWltYWdlOiAycHggMnB4IHVybChkYXRhOmltYWdlL2dpZjtiYXNlNjQsLi4uLi4pOyDnmoTmg4XlhrVcbiAgICAgICAgICAgIGNzcy53YWxrRGVjbHMoZGVjbCA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBkZWNsLnZhbHVlO1xuICAgICAgICAgICAgICAgIGlmIChQQVRURVJOX1VSSS50ZXN0KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBleGNsdWRlTGluZXMucHVzaChkZWNsLnNvdXJjZS5zdGFydC5saW5lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29uc3QgbGluZXMgPSBjc3Muc291cmNlLmlucHV0LmNzcy5zcGxpdCgvXFxuLyk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBsaW5lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChsaW5lc1tpXS5sZW5ndGggPiBvcHRzLnJ1bGVWYWxcbiAgICAgICAgICAgICAgICAgICAgJiYgZXhjbHVkZUxpbmVzLmluZGV4T2YoaSArIDEpID09PSAtMVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQud2FybihSVUxFTkFNRSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZTogY3NzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcnVsZU5hbWU6IFJVTEVOQU1FLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogaSArIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBNU0csXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvck1lc3NhZ2U6IGNoYWxrLmdyZXkoTVNHKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4pO1xuIl19