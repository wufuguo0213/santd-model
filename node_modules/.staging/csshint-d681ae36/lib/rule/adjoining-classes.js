'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

'use strict';

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
/**
 * @file adjoining-classes 的检测逻辑
 *       Don't use adjoining classes 例如 .foo.bar
 *       https://github.com/CSSLint/csslint/wiki/Disallow-adjoining-classes
 * @author ielgnaw(wuji0223@gmail.com)
 */

var RULENAME = 'adjoining-classes';

/**
 * css 组合的正则匹配
 *
 * @const
 * @type {RegExp}
 */
var PATTERN_COMBINATORS = /[\s>+~,[]+/;

/**
 * 错误信息
 *
 * @const
 * @type {string}
 */
var MSG = 'Don\'t use adjoining classes';

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        if (!opts.ruleVal) {
            return;
        }

        css.walkRules(function (rule) {
            if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                return;
            }

            var segments = rule.selector.split(PATTERN_COMBINATORS);

            for (var i = 0, len = segments.length; i < len; i++) {
                var segment = segments[i];
                if (segment.split('.').length > 2) {
                    var source = rule.source;
                    var line = source.start.line;
                    var lineContent = (0, _util.getLineContent)(line, source.input.css) || '';
                    var colorStr = segment;
                    result.warn(RULENAME, {
                        node: rule,
                        ruleName: RULENAME,
                        line: line,
                        message: MSG,
                        colorMessage: '`' + lineContent.replace(colorStr, _chalk2.default.magenta(colorStr)) + '` ' + _chalk2.default.grey(MSG)
                    });
                    global.CSSHINT_INVALID_ALL_COUNT++;
                }
            }
        });
    };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL2Fkam9pbmluZy1jbGFzc2VzLmpzIl0sIm5hbWVzIjpbIlJVTEVOQU1FIiwiUEFUVEVSTl9DT01CSU5BVE9SUyIsIk1TRyIsImNoZWNrIiwicG9zdGNzcyIsInBsdWdpbiIsImNzcyIsInJlc3VsdCIsIm9wdHMiLCJydWxlVmFsIiwid2Fsa1J1bGVzIiwiZ2xvYmFsIiwiQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCIsIm1heEVycm9yIiwic2VnbWVudHMiLCJydWxlIiwic2VsZWN0b3IiLCJzcGxpdCIsImkiLCJsZW4iLCJsZW5ndGgiLCJzZWdtZW50Iiwic291cmNlIiwibGluZSIsInN0YXJ0IiwibGluZUNvbnRlbnQiLCJpbnB1dCIsImNvbG9yU3RyIiwid2FybiIsIm5vZGUiLCJydWxlTmFtZSIsIm1lc3NhZ2UiLCJjb2xvck1lc3NhZ2UiLCJyZXBsYWNlIiwiY2hhbGsiLCJtYWdlbnRhIiwiZ3JleSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQU9BOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUVBOztBQUVBOzs7Ozs7QUFkQTs7Ozs7OztBQW9CQSxJQUFNQSxXQUFXLG1CQUFqQjs7QUFFQTs7Ozs7O0FBTUEsSUFBTUMsc0JBQXNCLFlBQTVCOztBQUVBOzs7Ozs7QUFNQSxJQUFNQyxNQUFNLDhCQUFaOztBQUVBOzs7Ozs7OztBQVFPLElBQU1DLHdCQUFRQyxrQkFBUUMsTUFBUixDQUFlTCxRQUFmLEVBQXlCO0FBQUEsV0FDMUMsVUFBQ00sR0FBRCxFQUFNQyxNQUFOLEVBQWlCO0FBQ2IsWUFBSSxDQUFDQyxLQUFLQyxPQUFWLEVBQW1CO0FBQ2Y7QUFDSDs7QUFFREgsWUFBSUksU0FBSixDQUFjLGdCQUFRO0FBQ2xCLGdCQUFJQyxPQUFPQyx5QkFBUCxJQUFvQ0osS0FBS0ssUUFBN0MsRUFBdUQ7QUFDbkQ7QUFDSDs7QUFFRCxnQkFBTUMsV0FBV0MsS0FBS0MsUUFBTCxDQUFjQyxLQUFkLENBQW9CaEIsbUJBQXBCLENBQWpCOztBQUVBLGlCQUFLLElBQUlpQixJQUFJLENBQVIsRUFBV0MsTUFBTUwsU0FBU00sTUFBL0IsRUFBdUNGLElBQUlDLEdBQTNDLEVBQWdERCxHQUFoRCxFQUFxRDtBQUNqRCxvQkFBTUcsVUFBVVAsU0FBU0ksQ0FBVCxDQUFoQjtBQUNBLG9CQUFJRyxRQUFRSixLQUFSLENBQWMsR0FBZCxFQUFtQkcsTUFBbkIsR0FBNEIsQ0FBaEMsRUFBbUM7QUFDL0Isd0JBQU1FLFNBQVNQLEtBQUtPLE1BQXBCO0FBQ0Esd0JBQU1DLE9BQU9ELE9BQU9FLEtBQVAsQ0FBYUQsSUFBMUI7QUFDQSx3QkFBTUUsY0FBYywwQkFBZUYsSUFBZixFQUFxQkQsT0FBT0ksS0FBUCxDQUFhcEIsR0FBbEMsS0FBMEMsRUFBOUQ7QUFDQSx3QkFBTXFCLFdBQVdOLE9BQWpCO0FBQ0FkLDJCQUFPcUIsSUFBUCxDQUFZNUIsUUFBWixFQUFzQjtBQUNsQjZCLDhCQUFNZCxJQURZO0FBRWxCZSxrQ0FBVTlCLFFBRlE7QUFHbEJ1Qiw4QkFBTUEsSUFIWTtBQUlsQlEsaUNBQVM3QixHQUpTO0FBS2xCOEIsc0NBQWMsTUFDUlAsWUFBWVEsT0FBWixDQUNFTixRQURGLEVBRUVPLGdCQUFNQyxPQUFOLENBQWNSLFFBQWQsQ0FGRixDQURRLEdBS1IsSUFMUSxHQU1STyxnQkFBTUUsSUFBTixDQUFXbEMsR0FBWDtBQVhZLHFCQUF0QjtBQWFBUywyQkFBT0MseUJBQVA7QUFDSDtBQUNKO0FBQ0osU0E5QkQ7QUErQkgsS0FyQ3lDO0FBQUEsQ0FBekIsQ0FBZCIsImZpbGUiOiJhZGpvaW5pbmctY2xhc3Nlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgYWRqb2luaW5nLWNsYXNzZXMg55qE5qOA5rWL6YC76L6RXG4gKiAgICAgICBEb24ndCB1c2UgYWRqb2luaW5nIGNsYXNzZXMg5L6L5aaCIC5mb28uYmFyXG4gKiAgICAgICBodHRwczovL2dpdGh1Yi5jb20vQ1NTTGludC9jc3NsaW50L3dpa2kvRGlzYWxsb3ctYWRqb2luaW5nLWNsYXNzZXNcbiAqIEBhdXRob3IgaWVsZ25hdyh3dWppMDIyM0BnbWFpbC5jb20pXG4gKi9cblxuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCBwb3N0Y3NzIGZyb20gJ3Bvc3Rjc3MnO1xuXG5pbXBvcnQge2dldExpbmVDb250ZW50fSBmcm9tICcuLi91dGlsJztcblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIOW9k+WJjeaWh+S7tuaJgOS7o+ihqOeahOinhOWImeWQjeensFxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgUlVMRU5BTUUgPSAnYWRqb2luaW5nLWNsYXNzZXMnO1xuXG4vKipcbiAqIGNzcyDnu4TlkIjnmoTmraPliJnljLnphY1cbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbmNvbnN0IFBBVFRFUk5fQ09NQklOQVRPUlMgPSAvW1xccz4rfixbXSsvO1xuXG4vKipcbiAqIOmUmeivr+S/oeaBr1xuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgTVNHID0gJ0RvblxcJ3QgdXNlIGFkam9pbmluZyBjbGFzc2VzJztcblxuLyoqXG4gKiDlhbfkvZPnmoTmo4DmtYvpgLvovpFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyDlj4LmlbBcbiAqIEBwYXJhbSB7Kn0gb3B0cy5ydWxlVmFsIOW9k+WJjeinhOWImeWFt+S9k+mFjee9rueahOWAvFxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZUNvbnRlbnQg5paH5Lu25YaF5a65XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlUGF0aCDmlofku7bot6/lvoRcbiAqL1xuZXhwb3J0IGNvbnN0IGNoZWNrID0gcG9zdGNzcy5wbHVnaW4oUlVMRU5BTUUsIG9wdHMgPT5cbiAgICAoY3NzLCByZXN1bHQpID0+IHtcbiAgICAgICAgaWYgKCFvcHRzLnJ1bGVWYWwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNzcy53YWxrUnVsZXMocnVsZSA9PiB7XG4gICAgICAgICAgICBpZiAoZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQgPj0gb3B0cy5tYXhFcnJvcikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3Qgc2VnbWVudHMgPSBydWxlLnNlbGVjdG9yLnNwbGl0KFBBVFRFUk5fQ09NQklOQVRPUlMpO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc2VnbWVudHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWdtZW50ID0gc2VnbWVudHNbaV07XG4gICAgICAgICAgICAgICAgaWYgKHNlZ21lbnQuc3BsaXQoJy4nKS5sZW5ndGggPiAyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IHJ1bGUuc291cmNlO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gc291cmNlLnN0YXJ0LmxpbmU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVDb250ZW50ID0gZ2V0TGluZUNvbnRlbnQobGluZSwgc291cmNlLmlucHV0LmNzcykgfHwgJyc7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbG9yU3RyID0gc2VnbWVudDtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lndhcm4oUlVMRU5BTUUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU6IHJ1bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBydWxlTmFtZTogUlVMRU5BTUUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lOiBsaW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogTVNHLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JNZXNzYWdlOiAnYCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGxpbmVDb250ZW50LnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yU3RyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFsay5tYWdlbnRhKGNvbG9yU3RyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICdgICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGNoYWxrLmdyZXkoTVNHKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbik7XG4iXX0=