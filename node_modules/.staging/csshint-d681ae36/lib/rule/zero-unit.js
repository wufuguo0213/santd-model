'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

'use strict';

/**
 * 规则名称
 *
 * @const
 * @type {string}
 */
/**
 * @file zero-unit 的检测逻辑
 *       028: [强制] 长度为 `0` 时须省略单位。 (也只有长度单位可省)
 * @author ielgnaw(wuji0223@gmail.com)
 */

var RULENAME = 'zero-unit';

/**
 * css 长度单位集合
 * https://developer.mozilla.org/en-US/docs/Web/CSS/length
 *
 * @const
 * @type {Array}
 */
var LENGTH_UNITS = [
// Relative length units
'em', 'ex', 'ch', 'rem', // Font-relative lengths
'vh', 'vw', 'vmin', 'vmax', // Viewport-percentage lengths
// Absolute length units
'px', 'mm', 'cm', 'in', 'pt', 'pc'];

/**
 * 数字正则
 *
 * @const
 * @type {RegExp}
 */
var PATTERN_NUMERIC = /\d+[\.\d]*/;

/**
 * 错误信息
 *
 * @const
 * @type {string}
 */
var MSG = 'Values of 0 shouldn\'t have units specified';

/**
 * 行号的缓存，防止同一行多次报错
 *
 * @type {number}
 */
var lineCache = 0;

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        if (!opts.ruleVal) {
            return;
        }

        if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
            return;
        }

        lineCache = 0;

        css.walkDecls(function (decl) {
            var parts = _postcss2.default.list.space(decl.value);
            for (var i = 0, len = parts.length; i < len; i++) {
                var part = parts[i];
                var numericVal = parseFloat(part);

                if (numericVal === 0) {
                    var unit = part.replace(PATTERN_NUMERIC, '');
                    var source = decl.source;
                    var line = source.start.line;

                    if (LENGTH_UNITS.indexOf(unit) > -1 && lineCache !== line) {
                        lineCache = line;
                        var lineContent = (0, _util.getLineContent)(line, source.input.css);
                        result.warn(RULENAME, {
                            node: decl,
                            ruleName: RULENAME,
                            line: line,
                            col: source.start.column + decl.prop.length + decl.raws.between.length,
                            message: MSG,
                            colorMessage: '`' + lineContent.replace(decl.value, _chalk2.default.magenta(decl.value)) + '` ' + _chalk2.default.grey(MSG)
                        });
                        global.CSSHINT_INVALID_ALL_COUNT++;
                    }
                }
            }
        });
    };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL3plcm8tdW5pdC5qcyJdLCJuYW1lcyI6WyJSVUxFTkFNRSIsIkxFTkdUSF9VTklUUyIsIlBBVFRFUk5fTlVNRVJJQyIsIk1TRyIsImxpbmVDYWNoZSIsImNoZWNrIiwicG9zdGNzcyIsInBsdWdpbiIsImNzcyIsInJlc3VsdCIsIm9wdHMiLCJydWxlVmFsIiwiZ2xvYmFsIiwiQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCIsIm1heEVycm9yIiwid2Fsa0RlY2xzIiwicGFydHMiLCJsaXN0Iiwic3BhY2UiLCJkZWNsIiwidmFsdWUiLCJpIiwibGVuIiwibGVuZ3RoIiwicGFydCIsIm51bWVyaWNWYWwiLCJwYXJzZUZsb2F0IiwidW5pdCIsInJlcGxhY2UiLCJzb3VyY2UiLCJsaW5lIiwic3RhcnQiLCJpbmRleE9mIiwibGluZUNvbnRlbnQiLCJpbnB1dCIsIndhcm4iLCJub2RlIiwicnVsZU5hbWUiLCJjb2wiLCJjb2x1bW4iLCJwcm9wIiwicmF3cyIsImJldHdlZW4iLCJtZXNzYWdlIiwiY29sb3JNZXNzYWdlIiwiY2hhbGsiLCJtYWdlbnRhIiwiZ3JleSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQU1BOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUVBOztBQUVBOzs7Ozs7QUFiQTs7Ozs7O0FBbUJBLElBQU1BLFdBQVcsV0FBakI7O0FBRUE7Ozs7Ozs7QUFPQSxJQUFNQyxlQUFlO0FBQ2pCO0FBQ0EsSUFGaUIsRUFFWCxJQUZXLEVBRUwsSUFGSyxFQUVDLEtBRkQsRUFFUTtBQUN6QixJQUhpQixFQUdYLElBSFcsRUFHTCxNQUhLLEVBR0csTUFISCxFQUdXO0FBQzVCO0FBQ0EsSUFMaUIsRUFLWCxJQUxXLEVBS0wsSUFMSyxFQUtDLElBTEQsRUFLTyxJQUxQLEVBS2EsSUFMYixDQUFyQjs7QUFRQTs7Ozs7O0FBTUEsSUFBTUMsa0JBQWtCLFlBQXhCOztBQUVBOzs7Ozs7QUFNQSxJQUFNQyxNQUFNLDZDQUFaOztBQUVBOzs7OztBQUtBLElBQUlDLFlBQVksQ0FBaEI7O0FBRUE7Ozs7Ozs7O0FBUU8sSUFBTUMsd0JBQVFDLGtCQUFRQyxNQUFSLENBQWVQLFFBQWYsRUFBeUI7QUFBQSxXQUMxQyxVQUFDUSxHQUFELEVBQU1DLE1BQU4sRUFBaUI7QUFDYixZQUFJLENBQUNDLEtBQUtDLE9BQVYsRUFBbUI7QUFDZjtBQUNIOztBQUVELFlBQUlDLE9BQU9DLHlCQUFQLElBQW9DSCxLQUFLSSxRQUE3QyxFQUF1RDtBQUNuRDtBQUNIOztBQUVEVixvQkFBWSxDQUFaOztBQUVBSSxZQUFJTyxTQUFKLENBQWMsZ0JBQVE7QUFDbEIsZ0JBQU1DLFFBQVFWLGtCQUFRVyxJQUFSLENBQWFDLEtBQWIsQ0FBbUJDLEtBQUtDLEtBQXhCLENBQWQ7QUFDQSxpQkFBSyxJQUFJQyxJQUFJLENBQVIsRUFBV0MsTUFBTU4sTUFBTU8sTUFBNUIsRUFBb0NGLElBQUlDLEdBQXhDLEVBQTZDRCxHQUE3QyxFQUFrRDtBQUM5QyxvQkFBTUcsT0FBT1IsTUFBTUssQ0FBTixDQUFiO0FBQ0Esb0JBQU1JLGFBQWFDLFdBQVdGLElBQVgsQ0FBbkI7O0FBRUEsb0JBQUlDLGVBQWUsQ0FBbkIsRUFBc0I7QUFDbEIsd0JBQU1FLE9BQU9ILEtBQUtJLE9BQUwsQ0FBYTFCLGVBQWIsRUFBOEIsRUFBOUIsQ0FBYjtBQUNBLHdCQUFNMkIsU0FBU1YsS0FBS1UsTUFBcEI7QUFDQSx3QkFBTUMsT0FBT0QsT0FBT0UsS0FBUCxDQUFhRCxJQUExQjs7QUFFQSx3QkFBSTdCLGFBQWErQixPQUFiLENBQXFCTCxJQUFyQixJQUE2QixDQUFDLENBQTlCLElBQW1DdkIsY0FBYzBCLElBQXJELEVBQTJEO0FBQ3ZEMUIsb0NBQVkwQixJQUFaO0FBQ0EsNEJBQU1HLGNBQWMsMEJBQWVILElBQWYsRUFBcUJELE9BQU9LLEtBQVAsQ0FBYTFCLEdBQWxDLENBQXBCO0FBQ0FDLCtCQUFPMEIsSUFBUCxDQUFZbkMsUUFBWixFQUFzQjtBQUNsQm9DLGtDQUFNakIsSUFEWTtBQUVsQmtCLHNDQUFVckMsUUFGUTtBQUdsQjhCLGtDQUFNQSxJQUhZO0FBSWxCUSxpQ0FBS1QsT0FBT0UsS0FBUCxDQUFhUSxNQUFiLEdBQXNCcEIsS0FBS3FCLElBQUwsQ0FBVWpCLE1BQWhDLEdBQXlDSixLQUFLc0IsSUFBTCxDQUFVQyxPQUFWLENBQWtCbkIsTUFKOUM7QUFLbEJvQixxQ0FBU3hDLEdBTFM7QUFNbEJ5QywwQ0FBYyxNQUNSWCxZQUFZTCxPQUFaLENBQ0VULEtBQUtDLEtBRFAsRUFFRXlCLGdCQUFNQyxPQUFOLENBQWMzQixLQUFLQyxLQUFuQixDQUZGLENBRFEsR0FLUixJQUxRLEdBTVJ5QixnQkFBTUUsSUFBTixDQUFXNUMsR0FBWDtBQVpZLHlCQUF0QjtBQWNBUywrQkFBT0MseUJBQVA7QUFDSDtBQUNKO0FBQ0o7QUFDSixTQWhDRDtBQWlDSCxLQTdDeUM7QUFBQSxDQUF6QixDQUFkIiwiZmlsZSI6Inplcm8tdW5pdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgemVyby11bml0IOeahOajgOa1i+mAu+i+kVxuICogICAgICAgMDI4OiBb5by65Yi2XSDplb/luqbkuLogYDBgIOaXtumhu+ecgeeVpeWNleS9jeOAgiAo5Lmf5Y+q5pyJ6ZW/5bqm5Y2V5L2N5Y+v55yBKVxuICogQGF1dGhvciBpZWxnbmF3KHd1amkwMjIzQGdtYWlsLmNvbSlcbiAqL1xuXG5pbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IHBvc3Rjc3MgZnJvbSAncG9zdGNzcyc7XG5cbmltcG9ydCB7Z2V0TGluZUNvbnRlbnR9IGZyb20gJy4uL3V0aWwnO1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICog6KeE5YiZ5ZCN56ewXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBSVUxFTkFNRSA9ICd6ZXJvLXVuaXQnO1xuXG4vKipcbiAqIGNzcyDplb/luqbljZXkvY3pm4blkIhcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9sZW5ndGhcbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtBcnJheX1cbiAqL1xuY29uc3QgTEVOR1RIX1VOSVRTID0gW1xuICAgIC8vIFJlbGF0aXZlIGxlbmd0aCB1bml0c1xuICAgICdlbScsICdleCcsICdjaCcsICdyZW0nLCAvLyBGb250LXJlbGF0aXZlIGxlbmd0aHNcbiAgICAndmgnLCAndncnLCAndm1pbicsICd2bWF4JywgLy8gVmlld3BvcnQtcGVyY2VudGFnZSBsZW5ndGhzXG4gICAgLy8gQWJzb2x1dGUgbGVuZ3RoIHVuaXRzXG4gICAgJ3B4JywgJ21tJywgJ2NtJywgJ2luJywgJ3B0JywgJ3BjJ1xuXTtcblxuLyoqXG4gKiDmlbDlrZfmraPliJlcbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbmNvbnN0IFBBVFRFUk5fTlVNRVJJQyA9IC9cXGQrW1xcLlxcZF0qLztcblxuLyoqXG4gKiDplJnor6/kv6Hmga9cbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmNvbnN0IE1TRyA9ICdWYWx1ZXMgb2YgMCBzaG91bGRuXFwndCBoYXZlIHVuaXRzIHNwZWNpZmllZCc7XG5cbi8qKlxuICog6KGM5Y+355qE57yT5a2Y77yM6Ziy5q2i5ZCM5LiA6KGM5aSa5qyh5oql6ZSZXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqL1xubGV0IGxpbmVDYWNoZSA9IDA7XG5cbi8qKlxuICog5YW35L2T55qE5qOA5rWL6YC76L6RXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMg5Y+C5pWwXG4gKiBAcGFyYW0geyp9IG9wdHMucnVsZVZhbCDlvZPliY3op4TliJnlhbfkvZPphY3nva7nmoTlgLxcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVDb250ZW50IOaWh+S7tuWGheWuuVxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZVBhdGgg5paH5Lu26Lev5b6EXG4gKi9cbmV4cG9ydCBjb25zdCBjaGVjayA9IHBvc3Rjc3MucGx1Z2luKFJVTEVOQU1FLCBvcHRzID0+XG4gICAgKGNzcywgcmVzdWx0KSA9PiB7XG4gICAgICAgIGlmICghb3B0cy5ydWxlVmFsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQgPj0gb3B0cy5tYXhFcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGluZUNhY2hlID0gMDtcblxuICAgICAgICBjc3Mud2Fsa0RlY2xzKGRlY2wgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGFydHMgPSBwb3N0Y3NzLmxpc3Quc3BhY2UoZGVjbC52YWx1ZSk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcGFydHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJ0ID0gcGFydHNbaV07XG4gICAgICAgICAgICAgICAgY29uc3QgbnVtZXJpY1ZhbCA9IHBhcnNlRmxvYXQocGFydCk7XG5cbiAgICAgICAgICAgICAgICBpZiAobnVtZXJpY1ZhbCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB1bml0ID0gcGFydC5yZXBsYWNlKFBBVFRFUk5fTlVNRVJJQywgJycpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2UgPSBkZWNsLnNvdXJjZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZSA9IHNvdXJjZS5zdGFydC5saW5lO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChMRU5HVEhfVU5JVFMuaW5kZXhPZih1bml0KSA+IC0xICYmIGxpbmVDYWNoZSAhPT0gbGluZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZUNhY2hlID0gbGluZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVDb250ZW50ID0gZ2V0TGluZUNvbnRlbnQobGluZSwgc291cmNlLmlucHV0LmNzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQud2FybihSVUxFTkFNRSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU6IGRlY2wsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZU5hbWU6IFJVTEVOQU1FLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6IGxpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sOiBzb3VyY2Uuc3RhcnQuY29sdW1uICsgZGVjbC5wcm9wLmxlbmd0aCArIGRlY2wucmF3cy5iZXR3ZWVuLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBNU0csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JNZXNzYWdlOiAnYCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBsaW5lQ29udGVudC5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjbC52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYWxrLm1hZ2VudGEoZGVjbC52YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICdgICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBjaGFsay5ncmV5KE1TRylcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuKTtcbiJdfQ==