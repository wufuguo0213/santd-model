'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'import';

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
/**
 * @file import 的检测逻辑
 *       Don't use @import, use <link> instead
 *       https://github.com/CSSLint/csslint/wiki/Disallow-@import
 * @author ielgnaw(wuji0223@gmail.com)
 */

var MSG = 'Don\'t use @import, use <link> instead';

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {

        if (!opts.ruleVal) {
            return;
        }

        css.walkAtRules(function (atRule) {
            if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                return;
            }

            if (atRule.name === 'import') {
                var source = atRule.source;
                var line = source.start.line;
                var lineContent = (0, _util.getLineContent)(line, source.input.css);
                var col = source.start.column;
                result.warn(RULENAME, {
                    node: atRule,
                    ruleName: RULENAME,
                    line: line,
                    col: col,
                    message: MSG,
                    colorMessage: '`' + lineContent.replace(/@import/g, _chalk2.default.magenta('@import')) + '` ' + _chalk2.default.grey(MSG)
                });
                global.CSSHINT_INVALID_ALL_COUNT++;
            }
        });
    };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL2ltcG9ydC5qcyJdLCJuYW1lcyI6WyJSVUxFTkFNRSIsIk1TRyIsImNoZWNrIiwicG9zdGNzcyIsInBsdWdpbiIsImNzcyIsInJlc3VsdCIsIm9wdHMiLCJydWxlVmFsIiwid2Fsa0F0UnVsZXMiLCJnbG9iYWwiLCJDU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UIiwibWF4RXJyb3IiLCJhdFJ1bGUiLCJuYW1lIiwic291cmNlIiwibGluZSIsInN0YXJ0IiwibGluZUNvbnRlbnQiLCJpbnB1dCIsImNvbCIsImNvbHVtbiIsIndhcm4iLCJub2RlIiwicnVsZU5hbWUiLCJtZXNzYWdlIiwiY29sb3JNZXNzYWdlIiwicmVwbGFjZSIsImNoYWxrIiwibWFnZW50YSIsImdyZXkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFPQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFFQTs7Ozs7O0FBTUEsSUFBTUEsV0FBVyxRQUFqQjs7QUFFQTs7Ozs7O0FBcEJBOzs7Ozs7O0FBMEJBLElBQU1DLE1BQU0sd0NBQVo7O0FBRUE7Ozs7Ozs7O0FBUU8sSUFBTUMsd0JBQVFDLGtCQUFRQyxNQUFSLENBQWVKLFFBQWYsRUFBeUI7QUFBQSxXQUMxQyxVQUFDSyxHQUFELEVBQU1DLE1BQU4sRUFBaUI7O0FBRWIsWUFBSSxDQUFDQyxLQUFLQyxPQUFWLEVBQW1CO0FBQ2Y7QUFDSDs7QUFFREgsWUFBSUksV0FBSixDQUFnQixrQkFBVTtBQUN0QixnQkFBSUMsT0FBT0MseUJBQVAsSUFBb0NKLEtBQUtLLFFBQTdDLEVBQXVEO0FBQ25EO0FBQ0g7O0FBRUQsZ0JBQUlDLE9BQU9DLElBQVAsS0FBZ0IsUUFBcEIsRUFBOEI7QUFDMUIsb0JBQU1DLFNBQVNGLE9BQU9FLE1BQXRCO0FBQ0Esb0JBQU1DLE9BQU9ELE9BQU9FLEtBQVAsQ0FBYUQsSUFBMUI7QUFDQSxvQkFBTUUsY0FBYywwQkFBZUYsSUFBZixFQUFxQkQsT0FBT0ksS0FBUCxDQUFhZCxHQUFsQyxDQUFwQjtBQUNBLG9CQUFNZSxNQUFNTCxPQUFPRSxLQUFQLENBQWFJLE1BQXpCO0FBQ0FmLHVCQUFPZ0IsSUFBUCxDQUFZdEIsUUFBWixFQUFzQjtBQUNsQnVCLDBCQUFNVixNQURZO0FBRWxCVyw4QkFBVXhCLFFBRlE7QUFHbEJnQiwwQkFBTUEsSUFIWTtBQUlsQkkseUJBQUtBLEdBSmE7QUFLbEJLLDZCQUFTeEIsR0FMUztBQU1sQnlCLGtDQUFjLE1BQ1JSLFlBQVlTLE9BQVosQ0FBb0IsVUFBcEIsRUFBZ0NDLGdCQUFNQyxPQUFOLENBQWMsU0FBZCxDQUFoQyxDQURRLEdBRVIsSUFGUSxHQUdSRCxnQkFBTUUsSUFBTixDQUFXN0IsR0FBWDtBQVRZLGlCQUF0QjtBQVdBUyx1QkFBT0MseUJBQVA7QUFDSDtBQUNKLFNBdkJEO0FBd0JILEtBL0J5QztBQUFBLENBQXpCLENBQWQiLCJmaWxlIjoiaW1wb3J0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBpbXBvcnQg55qE5qOA5rWL6YC76L6RXG4gKiAgICAgICBEb24ndCB1c2UgQGltcG9ydCwgdXNlIDxsaW5rPiBpbnN0ZWFkXG4gKiAgICAgICBodHRwczovL2dpdGh1Yi5jb20vQ1NTTGludC9jc3NsaW50L3dpa2kvRGlzYWxsb3ctQGltcG9ydFxuICogQGF1dGhvciBpZWxnbmF3KHd1amkwMjIzQGdtYWlsLmNvbSlcbiAqL1xuXG5pbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IHBvc3Rjc3MgZnJvbSAncG9zdGNzcyc7XG5cbmltcG9ydCB7Z2V0TGluZUNvbnRlbnR9IGZyb20gJy4uL3V0aWwnO1xuXG4vKipcbiAqIOW9k+WJjeaWh+S7tuaJgOS7o+ihqOeahOinhOWImeWQjeensFxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgUlVMRU5BTUUgPSAnaW1wb3J0JztcblxuLyoqXG4gKiDplJnor6/nmoTkv6Hmga9cbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmNvbnN0IE1TRyA9ICdEb25cXCd0IHVzZSBAaW1wb3J0LCB1c2UgPGxpbms+IGluc3RlYWQnO1xuXG4vKipcbiAqIOWFt+S9k+eahOajgOa1i+mAu+i+kVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIOWPguaVsFxuICogQHBhcmFtIHsqfSBvcHRzLnJ1bGVWYWwg5b2T5YmN6KeE5YiZ5YW35L2T6YWN572u55qE5YC8XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlQ29udGVudCDmlofku7blhoXlrrlcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVQYXRoIOaWh+S7tui3r+W+hFxuICovXG5leHBvcnQgY29uc3QgY2hlY2sgPSBwb3N0Y3NzLnBsdWdpbihSVUxFTkFNRSwgb3B0cyA9PlxuICAgIChjc3MsIHJlc3VsdCkgPT4ge1xuXG4gICAgICAgIGlmICghb3B0cy5ydWxlVmFsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjc3Mud2Fsa0F0UnVsZXMoYXRSdWxlID0+IHtcbiAgICAgICAgICAgIGlmIChnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCA+PSBvcHRzLm1heEVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYXRSdWxlLm5hbWUgPT09ICdpbXBvcnQnKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc291cmNlID0gYXRSdWxlLnNvdXJjZTtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gc291cmNlLnN0YXJ0LmxpbmU7XG4gICAgICAgICAgICAgICAgY29uc3QgbGluZUNvbnRlbnQgPSBnZXRMaW5lQ29udGVudChsaW5lLCBzb3VyY2UuaW5wdXQuY3NzKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2wgPSBzb3VyY2Uuc3RhcnQuY29sdW1uO1xuICAgICAgICAgICAgICAgIHJlc3VsdC53YXJuKFJVTEVOQU1FLCB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGU6IGF0UnVsZSxcbiAgICAgICAgICAgICAgICAgICAgcnVsZU5hbWU6IFJVTEVOQU1FLFxuICAgICAgICAgICAgICAgICAgICBsaW5lOiBsaW5lLFxuICAgICAgICAgICAgICAgICAgICBjb2w6IGNvbCxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogTVNHLFxuICAgICAgICAgICAgICAgICAgICBjb2xvck1lc3NhZ2U6ICdgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKyBsaW5lQ29udGVudC5yZXBsYWNlKC9AaW1wb3J0L2csIGNoYWxrLm1hZ2VudGEoJ0BpbXBvcnQnKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICsgJ2AgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKyBjaGFsay5ncmV5KE1TRylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4pO1xuIl19