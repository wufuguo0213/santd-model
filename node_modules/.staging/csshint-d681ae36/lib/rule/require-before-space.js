'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'require-before-space';

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
/**
 * @file require-before-space 的检测逻辑
 *       `{` 对应 003: [强制] `选择器` 与 `{` 之间必须包含空格。
 * @author ielgnaw(wuji0223@gmail.com)
 */

var MSG = 'Must contain spaces before the `{`';

var arrayProto = Array.prototype;

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        var ruleVal = opts.ruleVal;
        var realRuleVal = [];
        arrayProto.push[Array.isArray(ruleVal) ? 'apply' : 'call'](realRuleVal, ruleVal);

        if (realRuleVal.length) {
            css.walkRules(function (rule) {
                if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                    return;
                }

                // 只有 { 时，才能用 between 处理，其他符号的 require-before-space 规则还未实现
                if (rule.raws.between === '' && realRuleVal.indexOf('{') !== -1) {
                    var source = rule.source;
                    var line = source.start.line;
                    var col = source.start.column + rule.selector.length;
                    var lineContent = (0, _util.getLineContent)(line, source.input.css) || '';
                    result.warn(RULENAME, {
                        node: rule,
                        ruleName: RULENAME,
                        errorChar: '{',
                        line: line,
                        col: col,
                        message: MSG,
                        colorMessage: '`' + lineContent.replace('{', _chalk2.default.magenta('{')) + '` ' + _chalk2.default.grey(MSG)
                    });
                    global.CSSHINT_INVALID_ALL_COUNT++;
                }
            });
        }
    };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL3JlcXVpcmUtYmVmb3JlLXNwYWNlLmpzIl0sIm5hbWVzIjpbIlJVTEVOQU1FIiwiTVNHIiwiYXJyYXlQcm90byIsIkFycmF5IiwicHJvdG90eXBlIiwiY2hlY2siLCJwb3N0Y3NzIiwicGx1Z2luIiwiY3NzIiwicmVzdWx0IiwicnVsZVZhbCIsIm9wdHMiLCJyZWFsUnVsZVZhbCIsInB1c2giLCJpc0FycmF5IiwibGVuZ3RoIiwid2Fsa1J1bGVzIiwiZ2xvYmFsIiwiQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCIsIm1heEVycm9yIiwicnVsZSIsInJhd3MiLCJiZXR3ZWVuIiwiaW5kZXhPZiIsInNvdXJjZSIsImxpbmUiLCJzdGFydCIsImNvbCIsImNvbHVtbiIsInNlbGVjdG9yIiwibGluZUNvbnRlbnQiLCJpbnB1dCIsIndhcm4iLCJub2RlIiwicnVsZU5hbWUiLCJlcnJvckNoYXIiLCJtZXNzYWdlIiwiY29sb3JNZXNzYWdlIiwicmVwbGFjZSIsImNoYWxrIiwibWFnZW50YSIsImdyZXkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFNQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFFQTs7Ozs7O0FBTUEsSUFBTUEsV0FBVyxzQkFBakI7O0FBRUE7Ozs7OztBQW5CQTs7Ozs7O0FBeUJBLElBQU1DLE1BQU0sb0NBQVo7O0FBRUEsSUFBTUMsYUFBYUMsTUFBTUMsU0FBekI7O0FBRUE7Ozs7Ozs7O0FBUU8sSUFBTUMsd0JBQVFDLGtCQUFRQyxNQUFSLENBQWVQLFFBQWYsRUFBeUI7QUFBQSxXQUMxQyxVQUFDUSxHQUFELEVBQU1DLE1BQU4sRUFBaUI7QUFDYixZQUFNQyxVQUFVQyxLQUFLRCxPQUFyQjtBQUNBLFlBQU1FLGNBQWMsRUFBcEI7QUFDQVYsbUJBQVdXLElBQVgsQ0FBZ0JWLE1BQU1XLE9BQU4sQ0FBY0osT0FBZCxJQUF5QixPQUF6QixHQUFtQyxNQUFuRCxFQUEyREUsV0FBM0QsRUFBd0VGLE9BQXhFOztBQUVBLFlBQUlFLFlBQVlHLE1BQWhCLEVBQXdCO0FBQ3BCUCxnQkFBSVEsU0FBSixDQUFjLGdCQUFRO0FBQ2xCLG9CQUFJQyxPQUFPQyx5QkFBUCxJQUFvQ1AsS0FBS1EsUUFBN0MsRUFBdUQ7QUFDbkQ7QUFDSDs7QUFFRDtBQUNBLG9CQUFJQyxLQUFLQyxJQUFMLENBQVVDLE9BQVYsS0FBc0IsRUFBdEIsSUFBNEJWLFlBQVlXLE9BQVosQ0FBb0IsR0FBcEIsTUFBNkIsQ0FBQyxDQUE5RCxFQUFpRTtBQUM3RCx3QkFBTUMsU0FBU0osS0FBS0ksTUFBcEI7QUFDQSx3QkFBTUMsT0FBT0QsT0FBT0UsS0FBUCxDQUFhRCxJQUExQjtBQUNBLHdCQUFNRSxNQUFNSCxPQUFPRSxLQUFQLENBQWFFLE1BQWIsR0FBc0JSLEtBQUtTLFFBQUwsQ0FBY2QsTUFBaEQ7QUFDQSx3QkFBTWUsY0FBYywwQkFBZUwsSUFBZixFQUFxQkQsT0FBT08sS0FBUCxDQUFhdkIsR0FBbEMsS0FBMEMsRUFBOUQ7QUFDQUMsMkJBQU91QixJQUFQLENBQVloQyxRQUFaLEVBQXNCO0FBQ2xCaUMsOEJBQU1iLElBRFk7QUFFbEJjLGtDQUFVbEMsUUFGUTtBQUdsQm1DLG1DQUFXLEdBSE87QUFJbEJWLDhCQUFNQSxJQUpZO0FBS2xCRSw2QkFBS0EsR0FMYTtBQU1sQlMsaUNBQVNuQyxHQU5TO0FBT2xCb0Msc0NBQWMsTUFDUlAsWUFBWVEsT0FBWixDQUNFLEdBREYsRUFFRUMsZ0JBQU1DLE9BQU4sQ0FBYyxHQUFkLENBRkYsQ0FEUSxHQUtSLElBTFEsR0FNUkQsZ0JBQU1FLElBQU4sQ0FBV3hDLEdBQVg7QUFiWSxxQkFBdEI7QUFlQWdCLDJCQUFPQyx5QkFBUDtBQUNIO0FBQ0osYUE1QkQ7QUE2Qkg7QUFDSixLQXJDeUM7QUFBQSxDQUF6QixDQUFkIiwiZmlsZSI6InJlcXVpcmUtYmVmb3JlLXNwYWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSByZXF1aXJlLWJlZm9yZS1zcGFjZSDnmoTmo4DmtYvpgLvovpFcbiAqICAgICAgIGB7YCDlr7nlupQgMDAzOiBb5by65Yi2XSBg6YCJ5oup5ZmoYCDkuI4gYHtgIOS5i+mXtOW/hemhu+WMheWQq+epuuagvOOAglxuICogQGF1dGhvciBpZWxnbmF3KHd1amkwMjIzQGdtYWlsLmNvbSlcbiAqL1xuXG5pbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IHBvc3Rjc3MgZnJvbSAncG9zdGNzcyc7XG5cbmltcG9ydCB7Z2V0TGluZUNvbnRlbnR9IGZyb20gJy4uL3V0aWwnO1xuXG4vKipcbiAqIOW9k+WJjeaWh+S7tuaJgOS7o+ihqOeahOinhOWImeWQjeensFxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgUlVMRU5BTUUgPSAncmVxdWlyZS1iZWZvcmUtc3BhY2UnO1xuXG4vKipcbiAqIOmUmeivr+eahOS/oeaBr1xuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgTVNHID0gJ011c3QgY29udGFpbiBzcGFjZXMgYmVmb3JlIHRoZSBge2AnO1xuXG5jb25zdCBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG4vKipcbiAqIOWFt+S9k+eahOajgOa1i+mAu+i+kVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIOWPguaVsFxuICogQHBhcmFtIHsqfSBvcHRzLnJ1bGVWYWwg5b2T5YmN6KeE5YiZ5YW35L2T6YWN572u55qE5YC8XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlQ29udGVudCDmlofku7blhoXlrrlcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVQYXRoIOaWh+S7tui3r+W+hFxuICovXG5leHBvcnQgY29uc3QgY2hlY2sgPSBwb3N0Y3NzLnBsdWdpbihSVUxFTkFNRSwgb3B0cyA9PlxuICAgIChjc3MsIHJlc3VsdCkgPT4ge1xuICAgICAgICBjb25zdCBydWxlVmFsID0gb3B0cy5ydWxlVmFsO1xuICAgICAgICBjb25zdCByZWFsUnVsZVZhbCA9IFtdO1xuICAgICAgICBhcnJheVByb3RvLnB1c2hbQXJyYXkuaXNBcnJheShydWxlVmFsKSA/ICdhcHBseScgOiAnY2FsbCddKHJlYWxSdWxlVmFsLCBydWxlVmFsKTtcblxuICAgICAgICBpZiAocmVhbFJ1bGVWYWwubGVuZ3RoKSB7XG4gICAgICAgICAgICBjc3Mud2Fsa1J1bGVzKHJ1bGUgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCA+PSBvcHRzLm1heEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyDlj6rmnIkgeyDml7bvvIzmiY3og73nlKggYmV0d2VlbiDlpITnkIbvvIzlhbbku5bnrKblj7fnmoQgcmVxdWlyZS1iZWZvcmUtc3BhY2Ug6KeE5YiZ6L+Y5pyq5a6e546wXG4gICAgICAgICAgICAgICAgaWYgKHJ1bGUucmF3cy5iZXR3ZWVuID09PSAnJyAmJiByZWFsUnVsZVZhbC5pbmRleE9mKCd7JykgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IHJ1bGUuc291cmNlO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gc291cmNlLnN0YXJ0LmxpbmU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbCA9IHNvdXJjZS5zdGFydC5jb2x1bW4gKyBydWxlLnNlbGVjdG9yLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZUNvbnRlbnQgPSBnZXRMaW5lQ29udGVudChsaW5lLCBzb3VyY2UuaW5wdXQuY3NzKSB8fCAnJztcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lndhcm4oUlVMRU5BTUUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU6IHJ1bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBydWxlTmFtZTogUlVMRU5BTUUsXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvckNoYXI6ICd7JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6IGxpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2w6IGNvbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IE1TRyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yTWVzc2FnZTogJ2AnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBsaW5lQ29udGVudC5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYWxrLm1hZ2VudGEoJ3snKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICdgICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGNoYWxrLmdyZXkoTVNHKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbik7XG4iXX0=