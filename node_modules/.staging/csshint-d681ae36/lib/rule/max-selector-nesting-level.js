'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'max-selector-nesting-level';

/**
 * css 组合的正则匹配
 *
 * @const
 * @type {RegExp}
 */
/**
 * @file max-selector-nesting-level 的检测逻辑
 *       014: [建议] 选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确。
 * @author ielgnaw(wuji0223@gmail.com)
 */

var PATTERN_COMBINATORS = /[\s>+~]+/g;

/**
 * 获取错误信息
 *
 * @param {number} level 层级数量
 *
 * @return {string} 错误信息
 */
var getMsg = function getMsg(level) {
    return '' + 'A nested hierarchy selector should be no more than ' + level + ' levels';
};

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {

        if (!opts.ruleVal || isNaN(opts.ruleVal)) {
            return;
        }

        var msg = getMsg(opts.ruleVal);

        css.walkRules(function (rule) {
            var selector = rule.selector;
            var selectorGroup = selector.split(',');

            for (var i = 0, len = selectorGroup.length; i < len; i++) {
                var selectorInGroup = selectorGroup[i] || '';

                // 去掉 attr 选择器
                selectorInGroup = selectorInGroup.replace(/\[.+?\](?::[^\s>+~\.#\[]+)?/g, '');

                // 先去掉 selectorInGroup 的前后空格，如果有空格，那么 segments 的第一个 item 是空，但是会增加 length
                var segments = selectorInGroup.replace(/^[\s\xa0\u3000]+|[\u3000\xa0\s]+$/g, '').split(PATTERN_COMBINATORS);

                if (segments.length > opts.ruleVal) {
                    var newLineMatch = selectorInGroup.match(/\n/g);
                    var extraLine = 0;
                    if (newLineMatch) {
                        extraLine += newLineMatch.length;
                    }

                    var source = rule.source;
                    var line = source.start.line + extraLine;
                    var lineContent = (0, _util.getLineContent)(line, source.input.css);

                    // 这里去掉 \n 是为了变色
                    selectorInGroup = selectorInGroup.replace(/\n/g, '');

                    result.warn(RULENAME, {
                        node: rule,
                        ruleName: RULENAME,
                        line: line,
                        message: msg,
                        colorMessage: '`' + lineContent.replace(selectorInGroup, _chalk2.default.magenta(selectorInGroup)) + '` ' + _chalk2.default.grey(msg)
                    });
                    global.CSSHINT_INVALID_ALL_COUNT++;
                }
            }
        });
    };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL21heC1zZWxlY3Rvci1uZXN0aW5nLWxldmVsLmpzIl0sIm5hbWVzIjpbIlJVTEVOQU1FIiwiUEFUVEVSTl9DT01CSU5BVE9SUyIsImdldE1zZyIsImxldmVsIiwiY2hlY2siLCJwb3N0Y3NzIiwicGx1Z2luIiwiY3NzIiwicmVzdWx0Iiwib3B0cyIsInJ1bGVWYWwiLCJpc05hTiIsIm1zZyIsIndhbGtSdWxlcyIsInNlbGVjdG9yIiwicnVsZSIsInNlbGVjdG9yR3JvdXAiLCJzcGxpdCIsImkiLCJsZW4iLCJsZW5ndGgiLCJzZWxlY3RvckluR3JvdXAiLCJyZXBsYWNlIiwic2VnbWVudHMiLCJuZXdMaW5lTWF0Y2giLCJtYXRjaCIsImV4dHJhTGluZSIsInNvdXJjZSIsImxpbmUiLCJzdGFydCIsImxpbmVDb250ZW50IiwiaW5wdXQiLCJ3YXJuIiwibm9kZSIsInJ1bGVOYW1lIiwibWVzc2FnZSIsImNvbG9yTWVzc2FnZSIsImNoYWxrIiwibWFnZW50YSIsImdyZXkiLCJnbG9iYWwiLCJDU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBTUE7Ozs7QUFDQTs7OztBQUVBOzs7O0FBRUE7Ozs7OztBQU1BLElBQU1BLFdBQVcsNEJBQWpCOztBQUVBOzs7Ozs7QUFuQkE7Ozs7OztBQXlCQSxJQUFNQyxzQkFBc0IsV0FBNUI7O0FBRUE7Ozs7Ozs7QUFPQSxJQUFNQyxTQUFTLFNBQVRBLE1BQVM7QUFBQSxXQUNYLEtBQ00scURBRE4sR0FFTUMsS0FGTixHQUdNLFNBSks7QUFBQSxDQUFmOztBQU1BOzs7Ozs7OztBQVFPLElBQU1DLHdCQUFRQyxrQkFBUUMsTUFBUixDQUFlTixRQUFmLEVBQXlCO0FBQUEsV0FDMUMsVUFBQ08sR0FBRCxFQUFNQyxNQUFOLEVBQWlCOztBQUViLFlBQUksQ0FBQ0MsS0FBS0MsT0FBTixJQUFpQkMsTUFBTUYsS0FBS0MsT0FBWCxDQUFyQixFQUEwQztBQUN0QztBQUNIOztBQUVELFlBQU1FLE1BQU1WLE9BQU9PLEtBQUtDLE9BQVosQ0FBWjs7QUFFQUgsWUFBSU0sU0FBSixDQUFjLGdCQUFRO0FBQ2xCLGdCQUFNQyxXQUFXQyxLQUFLRCxRQUF0QjtBQUNBLGdCQUFNRSxnQkFBZ0JGLFNBQVNHLEtBQVQsQ0FBZSxHQUFmLENBQXRCOztBQUVBLGlCQUFLLElBQUlDLElBQUksQ0FBUixFQUFXQyxNQUFNSCxjQUFjSSxNQUFwQyxFQUE0Q0YsSUFBSUMsR0FBaEQsRUFBcURELEdBQXJELEVBQTBEO0FBQ3RELG9CQUFJRyxrQkFBa0JMLGNBQWNFLENBQWQsS0FBb0IsRUFBMUM7O0FBRUE7QUFDQUcsa0NBQWtCQSxnQkFBZ0JDLE9BQWhCLENBQXdCLDhCQUF4QixFQUF3RCxFQUF4RCxDQUFsQjs7QUFFQTtBQUNBLG9CQUFNQyxXQUFXRixnQkFBZ0JDLE9BQWhCLENBQXdCLG9DQUF4QixFQUE4RCxFQUE5RCxFQUFrRUwsS0FBbEUsQ0FDYmhCLG1CQURhLENBQWpCOztBQUlBLG9CQUFJc0IsU0FBU0gsTUFBVCxHQUFrQlgsS0FBS0MsT0FBM0IsRUFBb0M7QUFDaEMsd0JBQU1jLGVBQWVILGdCQUFnQkksS0FBaEIsQ0FBc0IsS0FBdEIsQ0FBckI7QUFDQSx3QkFBSUMsWUFBWSxDQUFoQjtBQUNBLHdCQUFJRixZQUFKLEVBQWtCO0FBQ2RFLHFDQUFhRixhQUFhSixNQUExQjtBQUNIOztBQUVELHdCQUFNTyxTQUFTWixLQUFLWSxNQUFwQjtBQUNBLHdCQUFNQyxPQUFPRCxPQUFPRSxLQUFQLENBQWFELElBQWIsR0FBb0JGLFNBQWpDO0FBQ0Esd0JBQU1JLGNBQWMsMEJBQWVGLElBQWYsRUFBcUJELE9BQU9JLEtBQVAsQ0FBYXhCLEdBQWxDLENBQXBCOztBQUVBO0FBQ0FjLHNDQUFrQkEsZ0JBQWdCQyxPQUFoQixDQUF3QixLQUF4QixFQUErQixFQUEvQixDQUFsQjs7QUFFQWQsMkJBQU93QixJQUFQLENBQVloQyxRQUFaLEVBQXNCO0FBQ2xCaUMsOEJBQU1sQixJQURZO0FBRWxCbUIsa0NBQVVsQyxRQUZRO0FBR2xCNEIsOEJBQU1BLElBSFk7QUFJbEJPLGlDQUFTdkIsR0FKUztBQUtsQndCLHNDQUFjLE1BQ1JOLFlBQVlSLE9BQVosQ0FBb0JELGVBQXBCLEVBQXFDZ0IsZ0JBQU1DLE9BQU4sQ0FBY2pCLGVBQWQsQ0FBckMsQ0FEUSxHQUVSLElBRlEsR0FHUmdCLGdCQUFNRSxJQUFOLENBQVczQixHQUFYO0FBUlkscUJBQXRCO0FBVUE0QiwyQkFBT0MseUJBQVA7QUFDSDtBQUNKO0FBQ0osU0ExQ0Q7QUEyQ0gsS0FwRHlDO0FBQUEsQ0FBekIsQ0FBZCIsImZpbGUiOiJtYXgtc2VsZWN0b3ItbmVzdGluZy1sZXZlbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgbWF4LXNlbGVjdG9yLW5lc3RpbmctbGV2ZWwg55qE5qOA5rWL6YC76L6RXG4gKiAgICAgICAwMTQ6IFvlu7rorq5dIOmAieaLqeWZqOeahOW1jOWll+Wxgue6p+W6lOS4jeWkp+S6jiAzIOe6p++8jOS9jee9rumdoOWQjueahOmZkOWumuadoeS7tuW6lOWwveWPr+iDveeyvuehruOAglxuICogQGF1dGhvciBpZWxnbmF3KHd1amkwMjIzQGdtYWlsLmNvbSlcbiAqL1xuXG5pbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IHBvc3Rjc3MgZnJvbSAncG9zdGNzcyc7XG5cbmltcG9ydCB7Z2V0TGluZUNvbnRlbnR9IGZyb20gJy4uL3V0aWwnO1xuXG4vKipcbiAqIOW9k+WJjeaWh+S7tuaJgOS7o+ihqOeahOinhOWImeWQjeensFxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgUlVMRU5BTUUgPSAnbWF4LXNlbGVjdG9yLW5lc3RpbmctbGV2ZWwnO1xuXG4vKipcbiAqIGNzcyDnu4TlkIjnmoTmraPliJnljLnphY1cbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbmNvbnN0IFBBVFRFUk5fQ09NQklOQVRPUlMgPSAvW1xccz4rfl0rL2c7XG5cbi8qKlxuICog6I635Y+W6ZSZ6K+v5L+h5oGvXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGxldmVsIOWxgue6p+aVsOmHj1xuICpcbiAqIEByZXR1cm4ge3N0cmluZ30g6ZSZ6K+v5L+h5oGvXG4gKi9cbmNvbnN0IGdldE1zZyA9IGxldmVsID0+XG4gICAgJydcbiAgICAgICAgKyAnQSBuZXN0ZWQgaGllcmFyY2h5IHNlbGVjdG9yIHNob3VsZCBiZSBubyBtb3JlIHRoYW4gJ1xuICAgICAgICArIGxldmVsXG4gICAgICAgICsgJyBsZXZlbHMnO1xuXG4vKipcbiAqIOWFt+S9k+eahOajgOa1i+mAu+i+kVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIOWPguaVsFxuICogQHBhcmFtIHsqfSBvcHRzLnJ1bGVWYWwg5b2T5YmN6KeE5YiZ5YW35L2T6YWN572u55qE5YC8XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlQ29udGVudCDmlofku7blhoXlrrlcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVQYXRoIOaWh+S7tui3r+W+hFxuICovXG5leHBvcnQgY29uc3QgY2hlY2sgPSBwb3N0Y3NzLnBsdWdpbihSVUxFTkFNRSwgb3B0cyA9PlxuICAgIChjc3MsIHJlc3VsdCkgPT4ge1xuXG4gICAgICAgIGlmICghb3B0cy5ydWxlVmFsIHx8IGlzTmFOKG9wdHMucnVsZVZhbCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1zZyA9IGdldE1zZyhvcHRzLnJ1bGVWYWwpO1xuXG4gICAgICAgIGNzcy53YWxrUnVsZXMocnVsZSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RvciA9IHJ1bGUuc2VsZWN0b3I7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3Rvckdyb3VwID0gc2VsZWN0b3Iuc3BsaXQoJywnKTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNlbGVjdG9yR3JvdXAubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgc2VsZWN0b3JJbkdyb3VwID0gc2VsZWN0b3JHcm91cFtpXSB8fCAnJztcblxuICAgICAgICAgICAgICAgIC8vIOWOu+aOiSBhdHRyIOmAieaLqeWZqFxuICAgICAgICAgICAgICAgIHNlbGVjdG9ySW5Hcm91cCA9IHNlbGVjdG9ySW5Hcm91cC5yZXBsYWNlKC9cXFsuKz9cXF0oPzo6W15cXHM+K35cXC4jXFxbXSspPy9nLCAnJyk7XG5cbiAgICAgICAgICAgICAgICAvLyDlhYjljrvmjokgc2VsZWN0b3JJbkdyb3VwIOeahOWJjeWQjuepuuagvO+8jOWmguaenOacieepuuagvO+8jOmCo+S5iCBzZWdtZW50cyDnmoTnrKzkuIDkuKogaXRlbSDmmK/nqbrvvIzkvYbmmK/kvJrlop7liqAgbGVuZ3RoXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VnbWVudHMgPSBzZWxlY3RvckluR3JvdXAucmVwbGFjZSgvXltcXHNcXHhhMFxcdTMwMDBdK3xbXFx1MzAwMFxceGEwXFxzXSskL2csICcnKS5zcGxpdChcbiAgICAgICAgICAgICAgICAgICAgUEFUVEVSTl9DT01CSU5BVE9SU1xuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2VnbWVudHMubGVuZ3RoID4gb3B0cy5ydWxlVmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0xpbmVNYXRjaCA9IHNlbGVjdG9ySW5Hcm91cC5tYXRjaCgvXFxuL2cpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZXh0cmFMaW5lID0gMDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0xpbmVNYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFMaW5lICs9IG5ld0xpbmVNYXRjaC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2UgPSBydWxlLnNvdXJjZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZSA9IHNvdXJjZS5zdGFydC5saW5lICsgZXh0cmFMaW5lO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lQ29udGVudCA9IGdldExpbmVDb250ZW50KGxpbmUsIHNvdXJjZS5pbnB1dC5jc3MpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIOi/memHjOWOu+aOiSBcXG4g5piv5Li65LqG5Y+Y6ImyXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9ySW5Hcm91cCA9IHNlbGVjdG9ySW5Hcm91cC5yZXBsYWNlKC9cXG4vZywgJycpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC53YXJuKFJVTEVOQU1FLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlOiBydWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcnVsZU5hbWU6IFJVTEVOQU1FLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogbGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG1zZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yTWVzc2FnZTogJ2AnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBsaW5lQ29udGVudC5yZXBsYWNlKHNlbGVjdG9ySW5Hcm91cCwgY2hhbGsubWFnZW50YShzZWxlY3RvckluR3JvdXApKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJ2AgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgY2hhbGsuZ3JleShtc2cpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuKTtcbiJdfQ==