'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'leading-zero';

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
/**
 * @file leading-zero 的检测逻辑
 *       025: [强制] 当数值为 0 - 1 之间的小数时，省略整数部分的 `0`。
 * @author ielgnaw(wuji0223@gmail.com)
 */

var MSG = 'When value is between 0 - 1 decimal, omitting the integer part of the `0`';

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        if (opts.ruleVal) {

            if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                return;
            }

            css.walkDecls(function (decl) {
                var parts = _postcss2.default.list.space(decl.value);
                var source = decl.source;
                var lineNum = source.start.line;

                function check(part, startCol) {
                    var numericVal = parseFloat(part);
                    if (numericVal < 1 && numericVal > 0 || numericVal < 0 && numericVal > -1) {
                        if (part.slice(0, 2) === '0.' || part.slice(0, 3) === '-0.') {
                            var lineContent = (0, _util.getLineContent)(lineNum, source.input.css);
                            var col = lineContent.indexOf(part, startCol);
                            result.warn(RULENAME, {
                                node: decl,
                                ruleName: RULENAME,
                                line: lineNum,
                                col: lineContent.indexOf(part) + 1,
                                message: MSG,
                                colorMessage: '`' + (0, _util.changeColorByIndex)(lineContent, lineContent.indexOf(part), part) + '` ' + _chalk2.default.grey(MSG)
                            });
                        }
                    }
                }

                var pattern = /\(([^\)]+)\)/;
                for (var i = 0, len = parts.length; i < len; i++) {
                    var part = parts[i];
                    var match = part.match(pattern);
                    if (match) {
                        var start = match.index;
                        match[1].split(/,\s*/).forEach(function (property) {
                            start = part.indexOf(property, start);
                            check(property, start);
                        });
                    } else {
                        check(part, 0);
                    }
                }
            });
        }
    };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL2xlYWRpbmctemVyby5qcyJdLCJuYW1lcyI6WyJSVUxFTkFNRSIsIk1TRyIsImNoZWNrIiwicG9zdGNzcyIsInBsdWdpbiIsImNzcyIsInJlc3VsdCIsIm9wdHMiLCJydWxlVmFsIiwiZ2xvYmFsIiwiQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCIsIm1heEVycm9yIiwid2Fsa0RlY2xzIiwicGFydHMiLCJsaXN0Iiwic3BhY2UiLCJkZWNsIiwidmFsdWUiLCJzb3VyY2UiLCJsaW5lTnVtIiwic3RhcnQiLCJsaW5lIiwicGFydCIsInN0YXJ0Q29sIiwibnVtZXJpY1ZhbCIsInBhcnNlRmxvYXQiLCJzbGljZSIsImxpbmVDb250ZW50IiwiaW5wdXQiLCJjb2wiLCJpbmRleE9mIiwid2FybiIsIm5vZGUiLCJydWxlTmFtZSIsIm1lc3NhZ2UiLCJjb2xvck1lc3NhZ2UiLCJjaGFsayIsImdyZXkiLCJwYXR0ZXJuIiwiaSIsImxlbiIsImxlbmd0aCIsIm1hdGNoIiwiaW5kZXgiLCJzcGxpdCIsImZvckVhY2giLCJwcm9wZXJ0eSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQU1BOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUVBOzs7Ozs7QUFNQSxJQUFNQSxXQUFXLGNBQWpCOztBQUdBOzs7Ozs7QUFwQkE7Ozs7OztBQTBCQSxJQUFNQyxNQUFNLDJFQUFaOztBQUVBOzs7Ozs7OztBQVFPLElBQU1DLHdCQUFRQyxrQkFBUUMsTUFBUixDQUFlSixRQUFmLEVBQXlCO0FBQUEsV0FDMUMsVUFBQ0ssR0FBRCxFQUFNQyxNQUFOLEVBQWlCO0FBQ2IsWUFBSUMsS0FBS0MsT0FBVCxFQUFrQjs7QUFFZCxnQkFBSUMsT0FBT0MseUJBQVAsSUFBb0NILEtBQUtJLFFBQTdDLEVBQXVEO0FBQ25EO0FBQ0g7O0FBRUROLGdCQUFJTyxTQUFKLENBQWMsZ0JBQVE7QUFDbEIsb0JBQU1DLFFBQVFWLGtCQUFRVyxJQUFSLENBQWFDLEtBQWIsQ0FBbUJDLEtBQUtDLEtBQXhCLENBQWQ7QUFDQSxvQkFBTUMsU0FBU0YsS0FBS0UsTUFBcEI7QUFDQSxvQkFBTUMsVUFBVUQsT0FBT0UsS0FBUCxDQUFhQyxJQUE3Qjs7QUFFQSx5QkFBU25CLEtBQVQsQ0FBZW9CLElBQWYsRUFBcUJDLFFBQXJCLEVBQStCO0FBQzNCLHdCQUFNQyxhQUFhQyxXQUFXSCxJQUFYLENBQW5CO0FBQ0Esd0JBQUlFLGFBQWEsQ0FBYixJQUFrQkEsYUFBYSxDQUEvQixJQUFvQ0EsYUFBYSxDQUFiLElBQWtCQSxhQUFhLENBQUMsQ0FBeEUsRUFBMkU7QUFDdkUsNEJBQUlGLEtBQUtJLEtBQUwsQ0FBVyxDQUFYLEVBQWMsQ0FBZCxNQUFxQixJQUFyQixJQUE2QkosS0FBS0ksS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFkLE1BQXFCLEtBQXRELEVBQTZEO0FBQ3pELGdDQUFNQyxjQUFjLDBCQUFlUixPQUFmLEVBQXdCRCxPQUFPVSxLQUFQLENBQWF2QixHQUFyQyxDQUFwQjtBQUNBLGdDQUFNd0IsTUFBTUYsWUFBWUcsT0FBWixDQUFvQlIsSUFBcEIsRUFBMEJDLFFBQTFCLENBQVo7QUFDQWpCLG1DQUFPeUIsSUFBUCxDQUFZL0IsUUFBWixFQUFzQjtBQUNsQmdDLHNDQUFNaEIsSUFEWTtBQUVsQmlCLDBDQUFVakMsUUFGUTtBQUdsQnFCLHNDQUFNRixPQUhZO0FBSWxCVSxxQ0FBS0YsWUFBWUcsT0FBWixDQUFvQlIsSUFBcEIsSUFBNEIsQ0FKZjtBQUtsQlkseUNBQVNqQyxHQUxTO0FBTWxCa0MsOENBQWMsTUFDUiw4QkFBbUJSLFdBQW5CLEVBQWdDQSxZQUFZRyxPQUFaLENBQW9CUixJQUFwQixDQUFoQyxFQUEyREEsSUFBM0QsQ0FEUSxHQUVSLElBRlEsR0FHUmMsZ0JBQU1DLElBQU4sQ0FBV3BDLEdBQVg7QUFUWSw2QkFBdEI7QUFXSDtBQUNKO0FBQ0o7O0FBRUQsb0JBQU1xQyxVQUFVLGNBQWhCO0FBQ0EscUJBQUssSUFBSUMsSUFBSSxDQUFSLEVBQVdDLE1BQU0zQixNQUFNNEIsTUFBNUIsRUFBb0NGLElBQUlDLEdBQXhDLEVBQTZDRCxHQUE3QyxFQUFrRDtBQUM5Qyx3QkFBSWpCLE9BQU9ULE1BQU0wQixDQUFOLENBQVg7QUFDQSx3QkFBTUcsUUFBUXBCLEtBQUtvQixLQUFMLENBQVdKLE9BQVgsQ0FBZDtBQUNBLHdCQUFJSSxLQUFKLEVBQVc7QUFDUCw0QkFBSXRCLFFBQVFzQixNQUFNQyxLQUFsQjtBQUNBRCw4QkFBTSxDQUFOLEVBQVNFLEtBQVQsQ0FBZSxNQUFmLEVBQXVCQyxPQUF2QixDQUErQixVQUFVQyxRQUFWLEVBQW9CO0FBQy9DMUIsb0NBQVFFLEtBQUtRLE9BQUwsQ0FBYWdCLFFBQWIsRUFBdUIxQixLQUF2QixDQUFSO0FBQ0FsQixrQ0FBTTRDLFFBQU4sRUFBZ0IxQixLQUFoQjtBQUNILHlCQUhEO0FBSUgscUJBTkQsTUFPSztBQUNEbEIsOEJBQU1vQixJQUFOLEVBQVksQ0FBWjtBQUNIO0FBQ0o7QUFDSixhQXpDRDtBQTBDSDtBQUNKLEtBbkR5QztBQUFBLENBQXpCLENBQWQiLCJmaWxlIjoibGVhZGluZy16ZXJvLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBsZWFkaW5nLXplcm8g55qE5qOA5rWL6YC76L6RXG4gKiAgICAgICAwMjU6IFvlvLrliLZdIOW9k+aVsOWAvOS4uiAwIC0gMSDkuYvpl7TnmoTlsI/mlbDml7bvvIznnIHnlaXmlbTmlbDpg6jliIbnmoQgYDBg44CCXG4gKiBAYXV0aG9yIGllbGduYXcod3VqaTAyMjNAZ21haWwuY29tKVxuICovXG5cbmltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgcG9zdGNzcyBmcm9tICdwb3N0Y3NzJztcblxuaW1wb3J0IHtnZXRMaW5lQ29udGVudCwgY2hhbmdlQ29sb3JCeUluZGV4fSBmcm9tICcuLi91dGlsJztcblxuLyoqXG4gKiDlvZPliY3mlofku7bmiYDku6PooajnmoTop4TliJnlkI3np7BcbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmNvbnN0IFJVTEVOQU1FID0gJ2xlYWRpbmctemVybyc7XG5cblxuLyoqXG4gKiDplJnor6/nmoTkv6Hmga9cbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmNvbnN0IE1TRyA9ICdXaGVuIHZhbHVlIGlzIGJldHdlZW4gMCAtIDEgZGVjaW1hbCwgb21pdHRpbmcgdGhlIGludGVnZXIgcGFydCBvZiB0aGUgYDBgJztcblxuLyoqXG4gKiDlhbfkvZPnmoTmo4DmtYvpgLvovpFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyDlj4LmlbBcbiAqIEBwYXJhbSB7Kn0gb3B0cy5ydWxlVmFsIOW9k+WJjeinhOWImeWFt+S9k+mFjee9rueahOWAvFxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZUNvbnRlbnQg5paH5Lu25YaF5a65XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlUGF0aCDmlofku7bot6/lvoRcbiAqL1xuZXhwb3J0IGNvbnN0IGNoZWNrID0gcG9zdGNzcy5wbHVnaW4oUlVMRU5BTUUsIG9wdHMgPT5cbiAgICAoY3NzLCByZXN1bHQpID0+IHtcbiAgICAgICAgaWYgKG9wdHMucnVsZVZhbCkge1xuXG4gICAgICAgICAgICBpZiAoZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQgPj0gb3B0cy5tYXhFcnJvcikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY3NzLndhbGtEZWNscyhkZWNsID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJ0cyA9IHBvc3Rjc3MubGlzdC5zcGFjZShkZWNsLnZhbHVlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2UgPSBkZWNsLnNvdXJjZTtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lTnVtID0gc291cmNlLnN0YXJ0LmxpbmU7XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjaGVjayhwYXJ0LCBzdGFydENvbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBudW1lcmljVmFsID0gcGFyc2VGbG9hdChwYXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bWVyaWNWYWwgPCAxICYmIG51bWVyaWNWYWwgPiAwIHx8IG51bWVyaWNWYWwgPCAwICYmIG51bWVyaWNWYWwgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnQuc2xpY2UoMCwgMikgPT09ICcwLicgfHwgcGFydC5zbGljZSgwLCAzKSA9PT0gJy0wLicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lQ29udGVudCA9IGdldExpbmVDb250ZW50KGxpbmVOdW0sIHNvdXJjZS5pbnB1dC5jc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbCA9IGxpbmVDb250ZW50LmluZGV4T2YocGFydCwgc3RhcnRDb2wpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC53YXJuKFJVTEVOQU1FLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU6IGRlY2wsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGVOYW1lOiBSVUxFTkFNRSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogbGluZU51bSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sOiBsaW5lQ29udGVudC5pbmRleE9mKHBhcnQpICsgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogTVNHLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvck1lc3NhZ2U6ICdgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBjaGFuZ2VDb2xvckJ5SW5kZXgobGluZUNvbnRlbnQsIGxpbmVDb250ZW50LmluZGV4T2YocGFydCksIHBhcnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICdgICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgY2hhbGsuZ3JleShNU0cpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBwYXR0ZXJuID0gL1xcKChbXlxcKV0rKVxcKS87XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHBhcnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0ID0gcGFydHNbaV07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gcGFydC5tYXRjaChwYXR0ZXJuKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSBtYXRjaC5pbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoWzFdLnNwbGl0KC8sXFxzKi8pLmZvckVhY2goZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBwYXJ0LmluZGV4T2YocHJvcGVydHksIHN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVjayhwcm9wZXJ0eSwgc3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVjayhwYXJ0LCAwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuKTtcbiJdfQ==