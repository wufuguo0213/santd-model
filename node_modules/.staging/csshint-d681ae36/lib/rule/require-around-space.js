'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'require-around-space';

/**
 * css 组合的正则匹配
 *
 * @const
 * @type {RegExp}
 */
/**
 * @file require-around-space 的检测逻辑
 *       `>`, `+`, `~` 对应 009: [强制] `>`、`+`、`~` 选择器的两边各保留一个空格。
 * @author ielgnaw(wuji0223@gmail.com)
 */

var PATTERN_COMBINATORS = /[^\s>+~=]+/g; // 排除 ~=, +=, >=

/**
 * 获取错误信息
 *
 * @param {string} combinator 组合的字符
 *
 * @return {string} 错误信息
 */
var getMsg = function getMsg(combinator) {
    return '' + 'Around the `' + combinator + '` selector will keep a space';
};

var arrayProto = Array.prototype;

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {

        var ruleVal = opts.ruleVal;
        var realRuleVal = [];
        arrayProto.push[Array.isArray(ruleVal) ? 'apply' : 'call'](realRuleVal, ruleVal);

        if (realRuleVal.length) {

            var invalidList = [];
            css.walkRules(function (rule) {
                /* jshint maxcomplexity: 11 */
                var selector = rule.selector;

                // 排除掉 .aaa:nth-child(4n+1) 这样的选择器
                selector = selector.replace(/\([\s\S]*?\)/g, '');

                var segments = selector.split(PATTERN_COMBINATORS);
                var len = segments.length;

                for (var i = 0; i < len; i++) {
                    var segment = segments[i];

                    if (!segment) {
                        continue;
                    }

                    var lastChar = segment.slice(-1);
                    var firstChar = segment.slice(0, 1);
                    if (segment) {
                        segment = (0, _util.trim)(segment);
                        if (realRuleVal.indexOf(segment) <= -1) {
                            continue;
                        }

                        if (i === 0) {
                            if (lastChar !== ' ') {
                                invalidList.push({
                                    invalidChar: segment,
                                    rule: rule
                                });
                                continue;
                            }
                        } else if (i === len - 1) {
                            if (firstChar !== ' ') {
                                invalidList.push({
                                    invalidChar: segment,
                                    rule: rule
                                });
                                continue;
                            }
                        } else {
                            if (lastChar !== ' ' || firstChar !== ' ') {
                                invalidList.push({
                                    invalidChar: segment,
                                    rule: rule
                                });
                                continue;
                            }
                        }
                    }
                }
            });

            invalidList.forEach(function (invalidRule) {
                var invalidChar = invalidRule.invalidChar,
                    rule = invalidRule.rule;

                var msg = getMsg(invalidRule.invalidChar);
                var source = rule.source;
                var line = source.start.line;
                var lineContent = (0, _util.getLineContent)(line, source.input.css);
                var col = lineContent.indexOf(invalidChar);
                result.warn(RULENAME, {
                    node: rule,
                    ruleName: RULENAME,
                    errorChar: invalidChar,
                    line: line,
                    col: col + 1,
                    message: msg,
                    colorMessage: '`' + lineContent.replace(invalidChar, _chalk2.default.magenta(invalidChar)) + '` ' + _chalk2.default.grey(msg)
                });
                global.CSSHINT_INVALID_ALL_COUNT++;
            });
        }
    };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,