'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'min-font-size';

/**
 * 数字正则
 *
 * @const
 * @type {RegExp}
 */
/**
 * @file min-font-size 的检测逻辑
 *       037: [强制] 需要在 Windows 平台显示的中文内容，其字号应不小于 `12px`。
 * @author ielgnaw(wuji0223@gmail.com)
 */

var PATTERN_NUMERIC = /^\d+[\.\d]*$/;

/**
 * 错误信息
 *
 * @const
 * @type {string}
 */
var MSG = 'font-size should not be less than ';

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {

        if (!opts.ruleVal || isNaN(opts.ruleVal)) {
            return;
        }

        var msgWithVal = MSG + opts.ruleVal + 'px';

        css.walkDecls(function (decl) {

            if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                return;
            }

            if (decl.prop === 'font-size') {
                if (parseFloat(decl.value) < opts.ruleVal) {
                    var source = decl.source;
                    var line = source.start.line;
                    var lineContent = (0, _util.getLineContent)(line, source.input.css);
                    var val = _postcss2.default.list.split(decl.value, 'px')[0];
                    if (PATTERN_NUMERIC.test(val)) {
                        var col = source.start.column + decl.prop.length + decl.raws.between.length;
                        result.warn(RULENAME, {
                            node: decl,
                            ruleName: RULENAME,
                            line: line,
                            col: col,
                            message: msgWithVal,
                            colorMessage: '`' + (0, _util.changeColorByStartAndEndIndex)(lineContent, col, source.end.column) + '` ' + _chalk2.default.grey(msgWithVal)
                        });
                        global.CSSHINT_INVALID_ALL_COUNT++;
                    }
                }
            }
        });
    };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL21pbi1mb250LXNpemUuanMiXSwibmFtZXMiOlsiUlVMRU5BTUUiLCJQQVRURVJOX05VTUVSSUMiLCJNU0ciLCJjaGVjayIsInBvc3Rjc3MiLCJwbHVnaW4iLCJjc3MiLCJyZXN1bHQiLCJvcHRzIiwicnVsZVZhbCIsImlzTmFOIiwibXNnV2l0aFZhbCIsIndhbGtEZWNscyIsImdsb2JhbCIsIkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQiLCJtYXhFcnJvciIsImRlY2wiLCJwcm9wIiwicGFyc2VGbG9hdCIsInZhbHVlIiwic291cmNlIiwibGluZSIsInN0YXJ0IiwibGluZUNvbnRlbnQiLCJpbnB1dCIsInZhbCIsImxpc3QiLCJzcGxpdCIsInRlc3QiLCJjb2wiLCJjb2x1bW4iLCJsZW5ndGgiLCJyYXdzIiwiYmV0d2VlbiIsIndhcm4iLCJub2RlIiwicnVsZU5hbWUiLCJtZXNzYWdlIiwiY29sb3JNZXNzYWdlIiwiZW5kIiwiY2hhbGsiLCJncmV5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBTUE7Ozs7QUFDQTs7OztBQUVBOzs7O0FBRUE7Ozs7OztBQU1BLElBQU1BLFdBQVcsZUFBakI7O0FBRUE7Ozs7OztBQW5CQTs7Ozs7O0FBeUJBLElBQU1DLGtCQUFrQixjQUF4Qjs7QUFFQTs7Ozs7O0FBTUEsSUFBTUMsTUFBTSxvQ0FBWjs7QUFFQTs7Ozs7Ozs7QUFRTyxJQUFNQyx3QkFBUUMsa0JBQVFDLE1BQVIsQ0FBZUwsUUFBZixFQUF5QjtBQUFBLFdBQzFDLFVBQUNNLEdBQUQsRUFBTUMsTUFBTixFQUFpQjs7QUFFYixZQUFJLENBQUNDLEtBQUtDLE9BQU4sSUFBaUJDLE1BQU1GLEtBQUtDLE9BQVgsQ0FBckIsRUFBMEM7QUFDdEM7QUFDSDs7QUFFRCxZQUFNRSxhQUFhVCxNQUFNTSxLQUFLQyxPQUFYLEdBQXFCLElBQXhDOztBQUVBSCxZQUFJTSxTQUFKLENBQWMsZ0JBQVE7O0FBRWxCLGdCQUFJQyxPQUFPQyx5QkFBUCxJQUFvQ04sS0FBS08sUUFBN0MsRUFBdUQ7QUFDbkQ7QUFDSDs7QUFFRCxnQkFBSUMsS0FBS0MsSUFBTCxLQUFjLFdBQWxCLEVBQStCO0FBQzNCLG9CQUFJQyxXQUFXRixLQUFLRyxLQUFoQixJQUF5QlgsS0FBS0MsT0FBbEMsRUFBMkM7QUFDdkMsd0JBQU1XLFNBQVNKLEtBQUtJLE1BQXBCO0FBQ0Esd0JBQU1DLE9BQU9ELE9BQU9FLEtBQVAsQ0FBYUQsSUFBMUI7QUFDQSx3QkFBTUUsY0FBYywwQkFBZUYsSUFBZixFQUFxQkQsT0FBT0ksS0FBUCxDQUFhbEIsR0FBbEMsQ0FBcEI7QUFDQSx3QkFBTW1CLE1BQU1yQixrQkFBUXNCLElBQVIsQ0FBYUMsS0FBYixDQUFtQlgsS0FBS0csS0FBeEIsRUFBK0IsSUFBL0IsRUFBcUMsQ0FBckMsQ0FBWjtBQUNBLHdCQUFJbEIsZ0JBQWdCMkIsSUFBaEIsQ0FBcUJILEdBQXJCLENBQUosRUFBK0I7QUFDM0IsNEJBQU1JLE1BQU1ULE9BQU9FLEtBQVAsQ0FBYVEsTUFBYixHQUFzQmQsS0FBS0MsSUFBTCxDQUFVYyxNQUFoQyxHQUF5Q2YsS0FBS2dCLElBQUwsQ0FBVUMsT0FBVixDQUFrQkYsTUFBdkU7QUFDQXhCLCtCQUFPMkIsSUFBUCxDQUFZbEMsUUFBWixFQUFzQjtBQUNsQm1DLGtDQUFNbkIsSUFEWTtBQUVsQm9CLHNDQUFVcEMsUUFGUTtBQUdsQnFCLGtDQUFNQSxJQUhZO0FBSWxCUSxpQ0FBS0EsR0FKYTtBQUtsQlEscUNBQVMxQixVQUxTO0FBTWxCMkIsMENBQWMsTUFDUix5Q0FDRWYsV0FERixFQUNlTSxHQURmLEVBQ29CVCxPQUFPbUIsR0FBUCxDQUFXVCxNQUQvQixDQURRLEdBSVIsSUFKUSxHQUtSVSxnQkFBTUMsSUFBTixDQUFXOUIsVUFBWDtBQVhZLHlCQUF0QjtBQWFBRSwrQkFBT0MseUJBQVA7QUFDSDtBQUNKO0FBQ0o7QUFDSixTQS9CRDtBQWdDSCxLQXpDeUM7QUFBQSxDQUF6QixDQUFkIiwiZmlsZSI6Im1pbi1mb250LXNpemUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIG1pbi1mb250LXNpemUg55qE5qOA5rWL6YC76L6RXG4gKiAgICAgICAwMzc6IFvlvLrliLZdIOmcgOimgeWcqCBXaW5kb3dzIOW5s+WPsOaYvuekuueahOS4reaWh+WGheWuue+8jOWFtuWtl+WPt+W6lOS4jeWwj+S6jiBgMTJweGDjgIJcbiAqIEBhdXRob3IgaWVsZ25hdyh3dWppMDIyM0BnbWFpbC5jb20pXG4gKi9cblxuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCBwb3N0Y3NzIGZyb20gJ3Bvc3Rjc3MnO1xuXG5pbXBvcnQge2dldExpbmVDb250ZW50LCBjaGFuZ2VDb2xvckJ5U3RhcnRBbmRFbmRJbmRleH0gZnJvbSAnLi4vdXRpbCc7XG5cbi8qKlxuICog5b2T5YmN5paH5Lu25omA5Luj6KGo55qE6KeE5YiZ5ZCN56ewXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBSVUxFTkFNRSA9ICdtaW4tZm9udC1zaXplJztcblxuLyoqXG4gKiDmlbDlrZfmraPliJlcbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbmNvbnN0IFBBVFRFUk5fTlVNRVJJQyA9IC9eXFxkK1tcXC5cXGRdKiQvO1xuXG4vKipcbiAqIOmUmeivr+S/oeaBr1xuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgTVNHID0gJ2ZvbnQtc2l6ZSBzaG91bGQgbm90IGJlIGxlc3MgdGhhbiAnO1xuXG4vKipcbiAqIOWFt+S9k+eahOajgOa1i+mAu+i+kVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIOWPguaVsFxuICogQHBhcmFtIHsqfSBvcHRzLnJ1bGVWYWwg5b2T5YmN6KeE5YiZ5YW35L2T6YWN572u55qE5YC8XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlQ29udGVudCDmlofku7blhoXlrrlcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVQYXRoIOaWh+S7tui3r+W+hFxuICovXG5leHBvcnQgY29uc3QgY2hlY2sgPSBwb3N0Y3NzLnBsdWdpbihSVUxFTkFNRSwgb3B0cyA9PlxuICAgIChjc3MsIHJlc3VsdCkgPT4ge1xuXG4gICAgICAgIGlmICghb3B0cy5ydWxlVmFsIHx8IGlzTmFOKG9wdHMucnVsZVZhbCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1zZ1dpdGhWYWwgPSBNU0cgKyBvcHRzLnJ1bGVWYWwgKyAncHgnO1xuXG4gICAgICAgIGNzcy53YWxrRGVjbHMoZGVjbCA9PiB7XG5cbiAgICAgICAgICAgIGlmIChnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCA+PSBvcHRzLm1heEVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGVjbC5wcm9wID09PSAnZm9udC1zaXplJykge1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZUZsb2F0KGRlY2wudmFsdWUpIDwgb3B0cy5ydWxlVmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IGRlY2wuc291cmNlO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gc291cmNlLnN0YXJ0LmxpbmU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVDb250ZW50ID0gZ2V0TGluZUNvbnRlbnQobGluZSwgc291cmNlLmlucHV0LmNzcyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbCA9IHBvc3Rjc3MubGlzdC5zcGxpdChkZWNsLnZhbHVlLCAncHgnKVswXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFBBVFRFUk5fTlVNRVJJQy50ZXN0KHZhbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbCA9IHNvdXJjZS5zdGFydC5jb2x1bW4gKyBkZWNsLnByb3AubGVuZ3RoICsgZGVjbC5yYXdzLmJldHdlZW4ubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lndhcm4oUlVMRU5BTUUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlOiBkZWNsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGVOYW1lOiBSVUxFTkFNRSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lOiBsaW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbDogY29sLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG1zZ1dpdGhWYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JNZXNzYWdlOiAnYCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBjaGFuZ2VDb2xvckJ5U3RhcnRBbmRFbmRJbmRleChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVDb250ZW50LCBjb2wsIHNvdXJjZS5lbmQuY29sdW1uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnYCAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgY2hhbGsuZ3JleShtc2dXaXRoVmFsKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4pO1xuIl19