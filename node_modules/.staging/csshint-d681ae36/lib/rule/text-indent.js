'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'text-indent';

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
/**
 * @file text-indent 的检测逻辑
 *       Checks for text indent less than -99px
 *       https://github.com/CSSLint/csslint/wiki/Disallow-negative-text-indent
 * @author ielgnaw(wuji0223@gmail.com)
 */

var MSG = '' + 'Negative text-indent doesn\'t work well with RTL.' + 'If you use text-indent for image replacement explicitly set direction for that item to ltr';

var textIndentDecl = void 0;
var direction = void 0;

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        if (!opts.ruleVal) {
            return;
        }

        css.walkRules(function (rule) {

            textIndentDecl = false;
            direction = 'inherit';

            rule.walkDecls(function (decl) {
                if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                    return;
                }
                var prop = decl.prop;
                var value = (0, _util.getPropertyValue)(decl.value);

                if (prop === 'text-indent' && value[0].value < -99) {
                    textIndentDecl = decl;
                } else if (prop === 'direction' && value.value === 'ltr') {
                    direction = 'ltr';
                }
            });

            if (textIndentDecl && direction !== 'ltr') {
                var source = textIndentDecl.source;
                var line = source.start.line;
                var lineContent = (0, _util.getLineContent)(line, source.input.css);
                var col = source.start.column;
                result.warn(RULENAME, {
                    node: rule,
                    ruleName: RULENAME,
                    line: line,
                    col: col,
                    message: MSG,
                    colorMessage: '`' + lineContent.replace(textIndentDecl.prop, _chalk2.default.magenta(textIndentDecl.prop)) + '` ' + _chalk2.default.grey(MSG)
                });
                global.CSSHINT_INVALID_ALL_COUNT++;
            }
        });
    };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL3RleHQtaW5kZW50LmpzIl0sIm5hbWVzIjpbIlJVTEVOQU1FIiwiTVNHIiwidGV4dEluZGVudERlY2wiLCJkaXJlY3Rpb24iLCJjaGVjayIsInBvc3Rjc3MiLCJwbHVnaW4iLCJjc3MiLCJyZXN1bHQiLCJvcHRzIiwicnVsZVZhbCIsIndhbGtSdWxlcyIsInJ1bGUiLCJ3YWxrRGVjbHMiLCJnbG9iYWwiLCJDU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UIiwibWF4RXJyb3IiLCJwcm9wIiwiZGVjbCIsInZhbHVlIiwic291cmNlIiwibGluZSIsInN0YXJ0IiwibGluZUNvbnRlbnQiLCJpbnB1dCIsImNvbCIsImNvbHVtbiIsIndhcm4iLCJub2RlIiwicnVsZU5hbWUiLCJtZXNzYWdlIiwiY29sb3JNZXNzYWdlIiwicmVwbGFjZSIsImNoYWxrIiwibWFnZW50YSIsImdyZXkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFPQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFFQTs7Ozs7O0FBTUEsSUFBTUEsV0FBVyxhQUFqQjs7QUFFQTs7Ozs7O0FBcEJBOzs7Ozs7O0FBMEJBLElBQU1DLE1BQU0sS0FDTixtREFETSxHQUVOLDRGQUZOOztBQUlBLElBQUlDLHVCQUFKO0FBQ0EsSUFBSUMsa0JBQUo7O0FBRUE7Ozs7Ozs7O0FBUU8sSUFBTUMsd0JBQVFDLGtCQUFRQyxNQUFSLENBQWVOLFFBQWYsRUFBeUI7QUFBQSxXQUMxQyxVQUFDTyxHQUFELEVBQU1DLE1BQU4sRUFBaUI7QUFDYixZQUFJLENBQUNDLEtBQUtDLE9BQVYsRUFBbUI7QUFDZjtBQUNIOztBQUVESCxZQUFJSSxTQUFKLENBQWMsZ0JBQVE7O0FBRWxCVCw2QkFBaUIsS0FBakI7QUFDQUMsd0JBQVksU0FBWjs7QUFFQVMsaUJBQUtDLFNBQUwsQ0FBZSxnQkFBUTtBQUNuQixvQkFBSUMsT0FBT0MseUJBQVAsSUFBb0NOLEtBQUtPLFFBQTdDLEVBQXVEO0FBQ25EO0FBQ0g7QUFDRCxvQkFBTUMsT0FBT0MsS0FBS0QsSUFBbEI7QUFDQSxvQkFBTUUsUUFBUSw0QkFBaUJELEtBQUtDLEtBQXRCLENBQWQ7O0FBRUEsb0JBQUlGLFNBQVMsYUFBVCxJQUEwQkUsTUFBTSxDQUFOLEVBQVNBLEtBQVQsR0FBaUIsQ0FBQyxFQUFoRCxFQUFvRDtBQUNoRGpCLHFDQUFpQmdCLElBQWpCO0FBQ0gsaUJBRkQsTUFHSyxJQUFJRCxTQUFTLFdBQVQsSUFBd0JFLE1BQU1BLEtBQU4sS0FBZ0IsS0FBNUMsRUFBbUQ7QUFDcERoQixnQ0FBWSxLQUFaO0FBQ0g7QUFDSixhQWJEOztBQWVBLGdCQUFJRCxrQkFBa0JDLGNBQWMsS0FBcEMsRUFBMkM7QUFDdkMsb0JBQU1pQixTQUFTbEIsZUFBZWtCLE1BQTlCO0FBQ0Esb0JBQU1DLE9BQU9ELE9BQU9FLEtBQVAsQ0FBYUQsSUFBMUI7QUFDQSxvQkFBTUUsY0FBYywwQkFBZUYsSUFBZixFQUFxQkQsT0FBT0ksS0FBUCxDQUFhakIsR0FBbEMsQ0FBcEI7QUFDQSxvQkFBTWtCLE1BQU1MLE9BQU9FLEtBQVAsQ0FBYUksTUFBekI7QUFDQWxCLHVCQUFPbUIsSUFBUCxDQUFZM0IsUUFBWixFQUFzQjtBQUNsQjRCLDBCQUFNaEIsSUFEWTtBQUVsQmlCLDhCQUFVN0IsUUFGUTtBQUdsQnFCLDBCQUFNQSxJQUhZO0FBSWxCSSx5QkFBS0EsR0FKYTtBQUtsQkssNkJBQVM3QixHQUxTO0FBTWxCOEIsa0NBQWMsTUFDUlIsWUFBWVMsT0FBWixDQUNFOUIsZUFBZWUsSUFEakIsRUFFRWdCLGdCQUFNQyxPQUFOLENBQWNoQyxlQUFlZSxJQUE3QixDQUZGLENBRFEsR0FLUixJQUxRLEdBTVJnQixnQkFBTUUsSUFBTixDQUFXbEMsR0FBWDtBQVpZLGlCQUF0QjtBQWNBYSx1QkFBT0MseUJBQVA7QUFDSDtBQUNKLFNBekNEO0FBMENILEtBaER5QztBQUFBLENBQXpCLENBQWQiLCJmaWxlIjoidGV4dC1pbmRlbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIHRleHQtaW5kZW50IOeahOajgOa1i+mAu+i+kVxuICogICAgICAgQ2hlY2tzIGZvciB0ZXh0IGluZGVudCBsZXNzIHRoYW4gLTk5cHhcbiAqICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9DU1NMaW50L2Nzc2xpbnQvd2lraS9EaXNhbGxvdy1uZWdhdGl2ZS10ZXh0LWluZGVudFxuICogQGF1dGhvciBpZWxnbmF3KHd1amkwMjIzQGdtYWlsLmNvbSlcbiAqL1xuXG5pbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IHBvc3Rjc3MgZnJvbSAncG9zdGNzcyc7XG5cbmltcG9ydCB7Z2V0TGluZUNvbnRlbnQsIGdldFByb3BlcnR5VmFsdWV9IGZyb20gJy4uL3V0aWwnO1xuXG4vKipcbiAqIOW9k+WJjeaWh+S7tuaJgOS7o+ihqOeahOinhOWImeWQjeensFxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgUlVMRU5BTUUgPSAndGV4dC1pbmRlbnQnO1xuXG4vKipcbiAqIOmUmeivr+eahOS/oeaBr1xuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgTVNHID0gJydcbiAgICArICdOZWdhdGl2ZSB0ZXh0LWluZGVudCBkb2VzblxcJ3Qgd29yayB3ZWxsIHdpdGggUlRMLidcbiAgICArICdJZiB5b3UgdXNlIHRleHQtaW5kZW50IGZvciBpbWFnZSByZXBsYWNlbWVudCBleHBsaWNpdGx5IHNldCBkaXJlY3Rpb24gZm9yIHRoYXQgaXRlbSB0byBsdHInO1xuXG5sZXQgdGV4dEluZGVudERlY2w7XG5sZXQgZGlyZWN0aW9uO1xuXG4vKipcbiAqIOWFt+S9k+eahOajgOa1i+mAu+i+kVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIOWPguaVsFxuICogQHBhcmFtIHsqfSBvcHRzLnJ1bGVWYWwg5b2T5YmN6KeE5YiZ5YW35L2T6YWN572u55qE5YC8XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlQ29udGVudCDmlofku7blhoXlrrlcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVQYXRoIOaWh+S7tui3r+W+hFxuICovXG5leHBvcnQgY29uc3QgY2hlY2sgPSBwb3N0Y3NzLnBsdWdpbihSVUxFTkFNRSwgb3B0cyA9PlxuICAgIChjc3MsIHJlc3VsdCkgPT4ge1xuICAgICAgICBpZiAoIW9wdHMucnVsZVZhbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY3NzLndhbGtSdWxlcyhydWxlID0+IHtcblxuICAgICAgICAgICAgdGV4dEluZGVudERlY2wgPSBmYWxzZTtcbiAgICAgICAgICAgIGRpcmVjdGlvbiA9ICdpbmhlcml0JztcblxuICAgICAgICAgICAgcnVsZS53YWxrRGVjbHMoZGVjbCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGdsb2JhbC5DU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UID49IG9wdHMubWF4RXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBwcm9wID0gZGVjbC5wcm9wO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZ2V0UHJvcGVydHlWYWx1ZShkZWNsLnZhbHVlKTtcblxuICAgICAgICAgICAgICAgIGlmIChwcm9wID09PSAndGV4dC1pbmRlbnQnICYmIHZhbHVlWzBdLnZhbHVlIDwgLTk5KSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRJbmRlbnREZWNsID0gZGVjbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocHJvcCA9PT0gJ2RpcmVjdGlvbicgJiYgdmFsdWUudmFsdWUgPT09ICdsdHInKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9ICdsdHInO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAodGV4dEluZGVudERlY2wgJiYgZGlyZWN0aW9uICE9PSAnbHRyJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IHRleHRJbmRlbnREZWNsLnNvdXJjZTtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gc291cmNlLnN0YXJ0LmxpbmU7XG4gICAgICAgICAgICAgICAgY29uc3QgbGluZUNvbnRlbnQgPSBnZXRMaW5lQ29udGVudChsaW5lLCBzb3VyY2UuaW5wdXQuY3NzKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2wgPSBzb3VyY2Uuc3RhcnQuY29sdW1uO1xuICAgICAgICAgICAgICAgIHJlc3VsdC53YXJuKFJVTEVOQU1FLCB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGU6IHJ1bGUsXG4gICAgICAgICAgICAgICAgICAgIHJ1bGVOYW1lOiBSVUxFTkFNRSxcbiAgICAgICAgICAgICAgICAgICAgbGluZTogbGluZSxcbiAgICAgICAgICAgICAgICAgICAgY29sOiBjb2wsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IE1TRyxcbiAgICAgICAgICAgICAgICAgICAgY29sb3JNZXNzYWdlOiAnYCdcbiAgICAgICAgICAgICAgICAgICAgICAgICsgbGluZUNvbnRlbnQucmVwbGFjZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0SW5kZW50RGVjbC5wcm9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYWxrLm1hZ2VudGEodGV4dEluZGVudERlY2wucHJvcClcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICsgJ2AgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKyBjaGFsay5ncmV5KE1TRylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4pO1xuIl19