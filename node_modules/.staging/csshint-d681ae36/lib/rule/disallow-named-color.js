'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

var _colors = require('../colors');

var _colors2 = _interopRequireDefault(_colors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
/**
 * @file disallow-named-color 的检测逻辑
 *       031: [强制] 颜色值不允许使用命名色值。
 * @author ielgnaw(wuji0223@gmail.com)
 */

var RULENAME = 'disallow-named-color';

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
var MSG = 'Color values using named color value is not allowed';

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {

        if (opts.ruleVal) {

            css.walkDecls(function (decl) {
                if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                    return;
                }

                var parts = _postcss2.default.list.space(decl.value);
                for (var i = 0, len = parts.length; i < len; i++) {
                    var part = parts[i];
                    if (_colors2.default.hasOwnProperty(part)) {
                        var source = decl.source;
                        var line = source.start.line;
                        var lineContent = (0, _util.getLineContent)(line, source.input.css);
                        var extraLine = decl.value.indexOf(part) || 0;
                        var col = source.start.column + decl.prop.length + decl.raws.between.length + extraLine;
                        result.warn(RULENAME, {
                            node: decl,
                            ruleName: RULENAME,
                            line: line,
                            col: col,
                            message: MSG,
                            colorMessage: '`' + (0, _util.changeColorByStartAndEndIndex)(lineContent, col, source.end.column) + '` ' + _chalk2.default.grey(MSG)
                        });
                        global.CSSHINT_INVALID_ALL_COUNT++;
                    }
                }
            });
        }
    };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL2Rpc2FsbG93LW5hbWVkLWNvbG9yLmpzIl0sIm5hbWVzIjpbIlJVTEVOQU1FIiwiTVNHIiwiY2hlY2siLCJwb3N0Y3NzIiwicGx1Z2luIiwiY3NzIiwicmVzdWx0Iiwib3B0cyIsInJ1bGVWYWwiLCJ3YWxrRGVjbHMiLCJnbG9iYWwiLCJDU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UIiwibWF4RXJyb3IiLCJwYXJ0cyIsImxpc3QiLCJzcGFjZSIsImRlY2wiLCJ2YWx1ZSIsImkiLCJsZW4iLCJsZW5ndGgiLCJwYXJ0IiwiY29sb3JzIiwiaGFzT3duUHJvcGVydHkiLCJzb3VyY2UiLCJsaW5lIiwic3RhcnQiLCJsaW5lQ29udGVudCIsImlucHV0IiwiZXh0cmFMaW5lIiwiaW5kZXhPZiIsImNvbCIsImNvbHVtbiIsInByb3AiLCJyYXdzIiwiYmV0d2VlbiIsIndhcm4iLCJub2RlIiwicnVsZU5hbWUiLCJtZXNzYWdlIiwiY29sb3JNZXNzYWdlIiwiZW5kIiwiY2hhbGsiLCJncmV5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBTUE7Ozs7QUFDQTs7OztBQUVBOztBQUNBOzs7Ozs7QUFFQTs7Ozs7O0FBWkE7Ozs7OztBQWtCQSxJQUFNQSxXQUFXLHNCQUFqQjs7QUFFQTs7Ozs7O0FBTUEsSUFBTUMsTUFBTSxxREFBWjs7QUFFQTs7Ozs7Ozs7QUFRTyxJQUFNQyx3QkFBUUMsa0JBQVFDLE1BQVIsQ0FBZUosUUFBZixFQUF5QjtBQUFBLFdBQzFDLFVBQUNLLEdBQUQsRUFBTUMsTUFBTixFQUFpQjs7QUFFYixZQUFJQyxLQUFLQyxPQUFULEVBQWtCOztBQUVkSCxnQkFBSUksU0FBSixDQUFjLGdCQUFRO0FBQ2xCLG9CQUFJQyxPQUFPQyx5QkFBUCxJQUFvQ0osS0FBS0ssUUFBN0MsRUFBdUQ7QUFDbkQ7QUFDSDs7QUFFRCxvQkFBTUMsUUFBUVYsa0JBQVFXLElBQVIsQ0FBYUMsS0FBYixDQUFtQkMsS0FBS0MsS0FBeEIsQ0FBZDtBQUNBLHFCQUFLLElBQUlDLElBQUksQ0FBUixFQUFXQyxNQUFNTixNQUFNTyxNQUE1QixFQUFvQ0YsSUFBSUMsR0FBeEMsRUFBNkNELEdBQTdDLEVBQWtEO0FBQzlDLHdCQUFNRyxPQUFPUixNQUFNSyxDQUFOLENBQWI7QUFDQSx3QkFBSUksaUJBQU9DLGNBQVAsQ0FBc0JGLElBQXRCLENBQUosRUFBaUM7QUFDN0IsNEJBQU1HLFNBQVNSLEtBQUtRLE1BQXBCO0FBQ0EsNEJBQU1DLE9BQU9ELE9BQU9FLEtBQVAsQ0FBYUQsSUFBMUI7QUFDQSw0QkFBTUUsY0FBYywwQkFBZUYsSUFBZixFQUFxQkQsT0FBT0ksS0FBUCxDQUFhdkIsR0FBbEMsQ0FBcEI7QUFDQSw0QkFBTXdCLFlBQVliLEtBQUtDLEtBQUwsQ0FBV2EsT0FBWCxDQUFtQlQsSUFBbkIsS0FBNEIsQ0FBOUM7QUFDQSw0QkFBTVUsTUFBTVAsT0FBT0UsS0FBUCxDQUFhTSxNQUFiLEdBQXNCaEIsS0FBS2lCLElBQUwsQ0FBVWIsTUFBaEMsR0FBeUNKLEtBQUtrQixJQUFMLENBQVVDLE9BQVYsQ0FBa0JmLE1BQTNELEdBQW9FUyxTQUFoRjtBQUNBdkIsK0JBQU84QixJQUFQLENBQVlwQyxRQUFaLEVBQXNCO0FBQ2xCcUMsa0NBQU1yQixJQURZO0FBRWxCc0Isc0NBQVV0QyxRQUZRO0FBR2xCeUIsa0NBQU1BLElBSFk7QUFJbEJNLGlDQUFLQSxHQUphO0FBS2xCUSxxQ0FBU3RDLEdBTFM7QUFNbEJ1QywwQ0FBYyxNQUNSLHlDQUNFYixXQURGLEVBQ2VJLEdBRGYsRUFDb0JQLE9BQU9pQixHQUFQLENBQVdULE1BRC9CLENBRFEsR0FJUixJQUpRLEdBS1JVLGdCQUFNQyxJQUFOLENBQVcxQyxHQUFYO0FBWFkseUJBQXRCO0FBYUFTLCtCQUFPQyx5QkFBUDtBQUNIO0FBQ0o7QUFDSixhQTlCRDtBQStCSDtBQUNKLEtBckN5QztBQUFBLENBQXpCLENBQWQiLCJmaWxlIjoiZGlzYWxsb3ctbmFtZWQtY29sb3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIGRpc2FsbG93LW5hbWVkLWNvbG9yIOeahOajgOa1i+mAu+i+kVxuICogICAgICAgMDMxOiBb5by65Yi2XSDpopzoibLlgLzkuI3lhYHorrjkvb/nlKjlkb3lkI3oibLlgLzjgIJcbiAqIEBhdXRob3IgaWVsZ25hdyh3dWppMDIyM0BnbWFpbC5jb20pXG4gKi9cblxuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCBwb3N0Y3NzIGZyb20gJ3Bvc3Rjc3MnO1xuXG5pbXBvcnQge2dldExpbmVDb250ZW50LCBjaGFuZ2VDb2xvckJ5U3RhcnRBbmRFbmRJbmRleH0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQgY29sb3JzIGZyb20gJy4uL2NvbG9ycyc7XG5cbi8qKlxuICog5b2T5YmN5paH5Lu25omA5Luj6KGo55qE6KeE5YiZ5ZCN56ewXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBSVUxFTkFNRSA9ICdkaXNhbGxvdy1uYW1lZC1jb2xvcic7XG5cbi8qKlxuICog6ZSZ6K+v55qE5L+h5oGvXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBNU0cgPSAnQ29sb3IgdmFsdWVzIHVzaW5nIG5hbWVkIGNvbG9yIHZhbHVlIGlzIG5vdCBhbGxvd2VkJztcblxuLyoqXG4gKiDlhbfkvZPnmoTmo4DmtYvpgLvovpFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyDlj4LmlbBcbiAqIEBwYXJhbSB7Kn0gb3B0cy5ydWxlVmFsIOW9k+WJjeinhOWImeWFt+S9k+mFjee9rueahOWAvFxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZUNvbnRlbnQg5paH5Lu25YaF5a65XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlUGF0aCDmlofku7bot6/lvoRcbiAqL1xuZXhwb3J0IGNvbnN0IGNoZWNrID0gcG9zdGNzcy5wbHVnaW4oUlVMRU5BTUUsIG9wdHMgPT5cbiAgICAoY3NzLCByZXN1bHQpID0+IHtcblxuICAgICAgICBpZiAob3B0cy5ydWxlVmFsKSB7XG5cbiAgICAgICAgICAgIGNzcy53YWxrRGVjbHMoZGVjbCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGdsb2JhbC5DU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UID49IG9wdHMubWF4RXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnRzID0gcG9zdGNzcy5saXN0LnNwYWNlKGRlY2wudmFsdWUpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBwYXJ0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJ0ID0gcGFydHNbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2xvcnMuaGFzT3duUHJvcGVydHkocGFydCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IGRlY2wuc291cmNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZSA9IHNvdXJjZS5zdGFydC5saW5lO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZUNvbnRlbnQgPSBnZXRMaW5lQ29udGVudChsaW5lLCBzb3VyY2UuaW5wdXQuY3NzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4dHJhTGluZSA9IGRlY2wudmFsdWUuaW5kZXhPZihwYXJ0KSB8fCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sID0gc291cmNlLnN0YXJ0LmNvbHVtbiArIGRlY2wucHJvcC5sZW5ndGggKyBkZWNsLnJhd3MuYmV0d2Vlbi5sZW5ndGggKyBleHRyYUxpbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQud2FybihSVUxFTkFNRSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU6IGRlY2wsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZU5hbWU6IFJVTEVOQU1FLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6IGxpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sOiBjb2wsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogTVNHLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yTWVzc2FnZTogJ2AnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgY2hhbmdlQ29sb3JCeVN0YXJ0QW5kRW5kSW5kZXgoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lQ29udGVudCwgY29sLCBzb3VyY2UuZW5kLmNvbHVtblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJ2AgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGNoYWxrLmdyZXkoTVNHKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4pO1xuIl19