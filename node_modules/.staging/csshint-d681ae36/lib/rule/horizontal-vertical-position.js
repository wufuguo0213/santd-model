'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'horizontal-vertical-position';

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
/**
 * @file horizontal-vertical-position 的检测逻辑
 *       033: [强制] 必须同时给出水平和垂直方向的位置。
 * @author ielgnaw(wuji0223@gmail.com)
 */

var MSG = 'Must give the horizontal and vertical position';

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {

        if (opts.ruleVal) {

            css.walkDecls(function (decl) {
                if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                    return;
                }

                if (decl.prop === 'background-position') {
                    var parts = _postcss2.default.list.space(decl.value);
                    if (parts.length < 2) {
                        var source = decl.source;
                        var line = source.start.line;
                        var lineContent = (0, _util.getLineContent)(line, source.input.css);
                        var col = source.start.column + decl.prop.length + decl.raws.between.length;
                        result.warn(RULENAME, {
                            node: decl,
                            ruleName: RULENAME,
                            line: line,
                            col: col,
                            message: MSG,
                            colorMessage: '`' + (0, _util.changeColorByStartAndEndIndex)(lineContent, col, source.end.column) + '` ' + _chalk2.default.grey(MSG)
                        });
                        global.CSSHINT_INVALID_ALL_COUNT++;
                    }
                }
            });
        }
    };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL2hvcml6b250YWwtdmVydGljYWwtcG9zaXRpb24uanMiXSwibmFtZXMiOlsiUlVMRU5BTUUiLCJNU0ciLCJjaGVjayIsInBvc3Rjc3MiLCJwbHVnaW4iLCJjc3MiLCJyZXN1bHQiLCJvcHRzIiwicnVsZVZhbCIsIndhbGtEZWNscyIsImdsb2JhbCIsIkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQiLCJtYXhFcnJvciIsImRlY2wiLCJwcm9wIiwicGFydHMiLCJsaXN0Iiwic3BhY2UiLCJ2YWx1ZSIsImxlbmd0aCIsInNvdXJjZSIsImxpbmUiLCJzdGFydCIsImxpbmVDb250ZW50IiwiaW5wdXQiLCJjb2wiLCJjb2x1bW4iLCJyYXdzIiwiYmV0d2VlbiIsIndhcm4iLCJub2RlIiwicnVsZU5hbWUiLCJtZXNzYWdlIiwiY29sb3JNZXNzYWdlIiwiZW5kIiwiY2hhbGsiLCJncmV5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBTUE7Ozs7QUFDQTs7OztBQUVBOzs7O0FBRUE7Ozs7OztBQU1BLElBQU1BLFdBQVcsOEJBQWpCOztBQUVBOzs7Ozs7QUFuQkE7Ozs7OztBQXlCQSxJQUFNQyxNQUFNLGdEQUFaOztBQUVBOzs7Ozs7OztBQVFPLElBQU1DLHdCQUFRQyxrQkFBUUMsTUFBUixDQUFlSixRQUFmLEVBQXlCO0FBQUEsV0FDMUMsVUFBQ0ssR0FBRCxFQUFNQyxNQUFOLEVBQWlCOztBQUViLFlBQUlDLEtBQUtDLE9BQVQsRUFBa0I7O0FBRWRILGdCQUFJSSxTQUFKLENBQWMsZ0JBQVE7QUFDbEIsb0JBQUlDLE9BQU9DLHlCQUFQLElBQW9DSixLQUFLSyxRQUE3QyxFQUF1RDtBQUNuRDtBQUNIOztBQUVELG9CQUFJQyxLQUFLQyxJQUFMLEtBQWMscUJBQWxCLEVBQXlDO0FBQ3JDLHdCQUFNQyxRQUFRWixrQkFBUWEsSUFBUixDQUFhQyxLQUFiLENBQW1CSixLQUFLSyxLQUF4QixDQUFkO0FBQ0Esd0JBQUlILE1BQU1JLE1BQU4sR0FBZSxDQUFuQixFQUFzQjtBQUNsQiw0QkFBTUMsU0FBU1AsS0FBS08sTUFBcEI7QUFDQSw0QkFBTUMsT0FBT0QsT0FBT0UsS0FBUCxDQUFhRCxJQUExQjtBQUNBLDRCQUFNRSxjQUFjLDBCQUFlRixJQUFmLEVBQXFCRCxPQUFPSSxLQUFQLENBQWFuQixHQUFsQyxDQUFwQjtBQUNBLDRCQUFNb0IsTUFBTUwsT0FBT0UsS0FBUCxDQUFhSSxNQUFiLEdBQXNCYixLQUFLQyxJQUFMLENBQVVLLE1BQWhDLEdBQXlDTixLQUFLYyxJQUFMLENBQVVDLE9BQVYsQ0FBa0JULE1BQXZFO0FBQ0FiLCtCQUFPdUIsSUFBUCxDQUFZN0IsUUFBWixFQUFzQjtBQUNsQjhCLGtDQUFNakIsSUFEWTtBQUVsQmtCLHNDQUFVL0IsUUFGUTtBQUdsQnFCLGtDQUFNQSxJQUhZO0FBSWxCSSxpQ0FBS0EsR0FKYTtBQUtsQk8scUNBQVMvQixHQUxTO0FBTWxCZ0MsMENBQWMsTUFDUix5Q0FDRVYsV0FERixFQUNlRSxHQURmLEVBQ29CTCxPQUFPYyxHQUFQLENBQVdSLE1BRC9CLENBRFEsR0FJUixJQUpRLEdBS1JTLGdCQUFNQyxJQUFOLENBQVduQyxHQUFYO0FBWFkseUJBQXRCO0FBYUFTLCtCQUFPQyx5QkFBUDtBQUNIO0FBQ0o7QUFDSixhQTVCRDtBQTZCSDtBQUNKLEtBbkN5QztBQUFBLENBQXpCLENBQWQiLCJmaWxlIjoiaG9yaXpvbnRhbC12ZXJ0aWNhbC1wb3NpdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgaG9yaXpvbnRhbC12ZXJ0aWNhbC1wb3NpdGlvbiDnmoTmo4DmtYvpgLvovpFcbiAqICAgICAgIDAzMzogW+W8uuWItl0g5b+F6aG75ZCM5pe257uZ5Ye65rC05bmz5ZKM5Z6C55u05pa55ZCR55qE5L2N572u44CCXG4gKiBAYXV0aG9yIGllbGduYXcod3VqaTAyMjNAZ21haWwuY29tKVxuICovXG5cbmltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgcG9zdGNzcyBmcm9tICdwb3N0Y3NzJztcblxuaW1wb3J0IHtnZXRMaW5lQ29udGVudCwgY2hhbmdlQ29sb3JCeVN0YXJ0QW5kRW5kSW5kZXh9IGZyb20gJy4uL3V0aWwnO1xuXG4vKipcbiAqIOW9k+WJjeaWh+S7tuaJgOS7o+ihqOeahOinhOWImeWQjeensFxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgUlVMRU5BTUUgPSAnaG9yaXpvbnRhbC12ZXJ0aWNhbC1wb3NpdGlvbic7XG5cbi8qKlxuICog6ZSZ6K+v55qE5L+h5oGvXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBNU0cgPSAnTXVzdCBnaXZlIHRoZSBob3Jpem9udGFsIGFuZCB2ZXJ0aWNhbCBwb3NpdGlvbic7XG5cbi8qKlxuICog5YW35L2T55qE5qOA5rWL6YC76L6RXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMg5Y+C5pWwXG4gKiBAcGFyYW0geyp9IG9wdHMucnVsZVZhbCDlvZPliY3op4TliJnlhbfkvZPphY3nva7nmoTlgLxcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVDb250ZW50IOaWh+S7tuWGheWuuVxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZVBhdGgg5paH5Lu26Lev5b6EXG4gKi9cbmV4cG9ydCBjb25zdCBjaGVjayA9IHBvc3Rjc3MucGx1Z2luKFJVTEVOQU1FLCBvcHRzID0+XG4gICAgKGNzcywgcmVzdWx0KSA9PiB7XG5cbiAgICAgICAgaWYgKG9wdHMucnVsZVZhbCkge1xuXG4gICAgICAgICAgICBjc3Mud2Fsa0RlY2xzKGRlY2wgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCA+PSBvcHRzLm1heEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoZGVjbC5wcm9wID09PSAnYmFja2dyb3VuZC1wb3NpdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFydHMgPSBwb3N0Y3NzLmxpc3Quc3BhY2UoZGVjbC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2UgPSBkZWNsLnNvdXJjZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBzb3VyY2Uuc3RhcnQubGluZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVDb250ZW50ID0gZ2V0TGluZUNvbnRlbnQobGluZSwgc291cmNlLmlucHV0LmNzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2wgPSBzb3VyY2Uuc3RhcnQuY29sdW1uICsgZGVjbC5wcm9wLmxlbmd0aCArIGRlY2wucmF3cy5iZXR3ZWVuLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC53YXJuKFJVTEVOQU1FLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZTogZGVjbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlTmFtZTogUlVMRU5BTUUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogbGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2w6IGNvbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBNU0csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JNZXNzYWdlOiAnYCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBjaGFuZ2VDb2xvckJ5U3RhcnRBbmRFbmRJbmRleChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVDb250ZW50LCBjb2wsIHNvdXJjZS5lbmQuY29sdW1uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnYCAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgY2hhbGsuZ3JleShNU0cpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbC5DU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbik7XG4iXX0=