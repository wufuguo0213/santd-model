'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 匹配 css 表达式的正则
 *
 * @const
 * @type {RegExp}
 */
var PATTERN_EXP = /expression\(/i;

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
/**
 * @file disallow-expression 的检测逻辑
 *       050: [强制] 禁止使用 `Expression`。
 * @author ielgnaw(wuji0223@gmail.com)
 */

var RULENAME = 'disallow-expression';

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
var MSG = 'Disallow use `Expression`';

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        if (opts.ruleVal) {
            css.walkDecls(function (decl) {
                if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                    return;
                }

                var parts = _postcss2.default.list.space(decl.value);
                for (var i = 0, len = parts.length; i < len; i++) {
                    var part = parts[i];
                    if (PATTERN_EXP.test(part)) {
                        var source = decl.source;
                        var line = source.start.line;
                        var lineContent = (0, _util.getLineContent)(line, source.input.css);
                        var col = source.start.column + decl.prop.length + decl.raws.between.length;
                        result.warn(RULENAME, {
                            node: decl,
                            ruleName: RULENAME,
                            line: line,
                            col: col,
                            message: MSG,
                            colorMessage: '`' + lineContent.replace(/expression/g, _chalk2.default.magenta('expression')) + '` ' + _chalk2.default.grey(MSG)
                        });
                        global.CSSHINT_INVALID_ALL_COUNT++;
                        continue;
                    }
                }
            });
        }
    };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL2Rpc2FsbG93LWV4cHJlc3Npb24uanMiXSwibmFtZXMiOlsiUEFUVEVSTl9FWFAiLCJSVUxFTkFNRSIsIk1TRyIsImNoZWNrIiwicG9zdGNzcyIsInBsdWdpbiIsImNzcyIsInJlc3VsdCIsIm9wdHMiLCJydWxlVmFsIiwid2Fsa0RlY2xzIiwiZ2xvYmFsIiwiQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCIsIm1heEVycm9yIiwicGFydHMiLCJsaXN0Iiwic3BhY2UiLCJkZWNsIiwidmFsdWUiLCJpIiwibGVuIiwibGVuZ3RoIiwicGFydCIsInRlc3QiLCJzb3VyY2UiLCJsaW5lIiwic3RhcnQiLCJsaW5lQ29udGVudCIsImlucHV0IiwiY29sIiwiY29sdW1uIiwicHJvcCIsInJhd3MiLCJiZXR3ZWVuIiwid2FybiIsIm5vZGUiLCJydWxlTmFtZSIsIm1lc3NhZ2UiLCJjb2xvck1lc3NhZ2UiLCJyZXBsYWNlIiwiY2hhbGsiLCJtYWdlbnRhIiwiZ3JleSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQU1BOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUVBOzs7Ozs7QUFNQSxJQUFNQSxjQUFjLGVBQXBCOztBQUVBOzs7Ozs7QUFuQkE7Ozs7OztBQXlCQSxJQUFNQyxXQUFXLHFCQUFqQjs7QUFFQTs7Ozs7O0FBTUEsSUFBTUMsTUFBTSwyQkFBWjs7QUFFQTs7Ozs7Ozs7QUFRTyxJQUFNQyx3QkFBUUMsa0JBQVFDLE1BQVIsQ0FBZUosUUFBZixFQUF5QjtBQUFBLFdBQzFDLFVBQUNLLEdBQUQsRUFBTUMsTUFBTixFQUFpQjtBQUNiLFlBQUlDLEtBQUtDLE9BQVQsRUFBa0I7QUFDZEgsZ0JBQUlJLFNBQUosQ0FBYyxnQkFBUTtBQUNsQixvQkFBSUMsT0FBT0MseUJBQVAsSUFBb0NKLEtBQUtLLFFBQTdDLEVBQXVEO0FBQ25EO0FBQ0g7O0FBRUQsb0JBQU1DLFFBQVFWLGtCQUFRVyxJQUFSLENBQWFDLEtBQWIsQ0FBbUJDLEtBQUtDLEtBQXhCLENBQWQ7QUFDQSxxQkFBSyxJQUFJQyxJQUFJLENBQVIsRUFBV0MsTUFBTU4sTUFBTU8sTUFBNUIsRUFBb0NGLElBQUlDLEdBQXhDLEVBQTZDRCxHQUE3QyxFQUFrRDtBQUM5Qyx3QkFBTUcsT0FBT1IsTUFBTUssQ0FBTixDQUFiO0FBQ0Esd0JBQUluQixZQUFZdUIsSUFBWixDQUFpQkQsSUFBakIsQ0FBSixFQUE0QjtBQUN4Qiw0QkFBTUUsU0FBU1AsS0FBS08sTUFBcEI7QUFDQSw0QkFBTUMsT0FBT0QsT0FBT0UsS0FBUCxDQUFhRCxJQUExQjtBQUNBLDRCQUFNRSxjQUFjLDBCQUFlRixJQUFmLEVBQXFCRCxPQUFPSSxLQUFQLENBQWF0QixHQUFsQyxDQUFwQjtBQUNBLDRCQUFNdUIsTUFBTUwsT0FBT0UsS0FBUCxDQUFhSSxNQUFiLEdBQXNCYixLQUFLYyxJQUFMLENBQVVWLE1BQWhDLEdBQXlDSixLQUFLZSxJQUFMLENBQVVDLE9BQVYsQ0FBa0JaLE1BQXZFO0FBQ0FkLCtCQUFPMkIsSUFBUCxDQUFZakMsUUFBWixFQUFzQjtBQUNsQmtDLGtDQUFNbEIsSUFEWTtBQUVsQm1CLHNDQUFVbkMsUUFGUTtBQUdsQndCLGtDQUFNQSxJQUhZO0FBSWxCSSxpQ0FBS0EsR0FKYTtBQUtsQlEscUNBQVNuQyxHQUxTO0FBTWxCb0MsMENBQWMsTUFDUlgsWUFBWVksT0FBWixDQUFvQixhQUFwQixFQUFtQ0MsZ0JBQU1DLE9BQU4sQ0FBYyxZQUFkLENBQW5DLENBRFEsR0FFUixJQUZRLEdBR1JELGdCQUFNRSxJQUFOLENBQVd4QyxHQUFYO0FBVFkseUJBQXRCO0FBV0FTLCtCQUFPQyx5QkFBUDtBQUNBO0FBQ0g7QUFDSjtBQUVKLGFBN0JEO0FBOEJIO0FBQ0osS0FsQ3lDO0FBQUEsQ0FBekIsQ0FBZCIsImZpbGUiOiJkaXNhbGxvdy1leHByZXNzaW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBkaXNhbGxvdy1leHByZXNzaW9uIOeahOajgOa1i+mAu+i+kVxuICogICAgICAgMDUwOiBb5by65Yi2XSDnpoHmraLkvb/nlKggYEV4cHJlc3Npb25g44CCXG4gKiBAYXV0aG9yIGllbGduYXcod3VqaTAyMjNAZ21haWwuY29tKVxuICovXG5cbmltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgcG9zdGNzcyBmcm9tICdwb3N0Y3NzJztcblxuaW1wb3J0IHtnZXRMaW5lQ29udGVudH0gZnJvbSAnLi4vdXRpbCc7XG5cbi8qKlxuICog5Yy56YWNIGNzcyDooajovr7lvI/nmoTmraPliJlcbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbmNvbnN0IFBBVFRFUk5fRVhQID0gL2V4cHJlc3Npb25cXCgvaTtcblxuLyoqXG4gKiDlvZPliY3mlofku7bmiYDku6PooajnmoTop4TliJnlkI3np7BcbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmNvbnN0IFJVTEVOQU1FID0gJ2Rpc2FsbG93LWV4cHJlc3Npb24nO1xuXG4vKipcbiAqIOmUmeivr+eahOS/oeaBr1xuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgTVNHID0gJ0Rpc2FsbG93IHVzZSBgRXhwcmVzc2lvbmAnO1xuXG4vKipcbiAqIOWFt+S9k+eahOajgOa1i+mAu+i+kVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIOWPguaVsFxuICogQHBhcmFtIHsqfSBvcHRzLnJ1bGVWYWwg5b2T5YmN6KeE5YiZ5YW35L2T6YWN572u55qE5YC8XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlQ29udGVudCDmlofku7blhoXlrrlcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVQYXRoIOaWh+S7tui3r+W+hFxuICovXG5leHBvcnQgY29uc3QgY2hlY2sgPSBwb3N0Y3NzLnBsdWdpbihSVUxFTkFNRSwgb3B0cyA9PlxuICAgIChjc3MsIHJlc3VsdCkgPT4ge1xuICAgICAgICBpZiAob3B0cy5ydWxlVmFsKSB7XG4gICAgICAgICAgICBjc3Mud2Fsa0RlY2xzKGRlY2wgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCA+PSBvcHRzLm1heEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBwYXJ0cyA9IHBvc3Rjc3MubGlzdC5zcGFjZShkZWNsLnZhbHVlKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcGFydHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFydCA9IHBhcnRzW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoUEFUVEVSTl9FWFAudGVzdChwYXJ0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc291cmNlID0gZGVjbC5zb3VyY2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gc291cmNlLnN0YXJ0LmxpbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lQ29udGVudCA9IGdldExpbmVDb250ZW50KGxpbmUsIHNvdXJjZS5pbnB1dC5jc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sID0gc291cmNlLnN0YXJ0LmNvbHVtbiArIGRlY2wucHJvcC5sZW5ndGggKyBkZWNsLnJhd3MuYmV0d2Vlbi5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQud2FybihSVUxFTkFNRSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU6IGRlY2wsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZU5hbWU6IFJVTEVOQU1FLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6IGxpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sOiBjb2wsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogTVNHLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yTWVzc2FnZTogJ2AnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgbGluZUNvbnRlbnQucmVwbGFjZSgvZXhwcmVzc2lvbi9nLCBjaGFsay5tYWdlbnRhKCdleHByZXNzaW9uJykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJ2AgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGNoYWxrLmdyZXkoTVNHKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuKTtcbiJdfQ==