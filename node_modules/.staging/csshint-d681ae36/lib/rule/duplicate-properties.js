'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'duplicate-properties'; /**
                                        * @file duplicate-properties 的检测逻辑
                                        *       Duplicate properties must appear one after the other
                                        *       https://github.com/CSSLint/csslint/wiki/Disallow-duplicate-properties
                                        * @author ielgnaw(wuji0223@gmail.com)
                                        */

var MSG = 'Duplicate properties must appear one after the other';

var properties = {};
var lastProperty = '';

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        if (!opts.ruleVal) {
            return;
        }

        css.walkRules(function (rule) {
            properties = {};

            rule.walkDecls(function (decl) {
                if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                    return;
                }

                var prop = decl.prop,
                    value = decl.value;

                if (properties[prop] && (lastProperty !== prop || properties[prop] === value)) {
                    var source = decl.source;
                    var line = source.start.line;
                    var lineContent = (0, _util.getLineContent)(line, source.input.css);
                    var col = source.start.column;
                    result.warn(RULENAME, {
                        node: decl,
                        ruleName: RULENAME,
                        line: line,
                        col: col,
                        message: MSG,
                        colorMessage: '`' + _chalk2.default.magenta(lineContent) + '` ' + _chalk2.default.grey(MSG)
                    });
                    global.CSSHINT_INVALID_ALL_COUNT++;
                }

                properties[prop] = value;
                lastProperty = prop;
            });
        });
    };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL2R1cGxpY2F0ZS1wcm9wZXJ0aWVzLmpzIl0sIm5hbWVzIjpbIlJVTEVOQU1FIiwiTVNHIiwicHJvcGVydGllcyIsImxhc3RQcm9wZXJ0eSIsImNoZWNrIiwicG9zdGNzcyIsInBsdWdpbiIsImNzcyIsInJlc3VsdCIsIm9wdHMiLCJydWxlVmFsIiwid2Fsa1J1bGVzIiwicnVsZSIsIndhbGtEZWNscyIsImdsb2JhbCIsIkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQiLCJtYXhFcnJvciIsInByb3AiLCJkZWNsIiwidmFsdWUiLCJzb3VyY2UiLCJsaW5lIiwic3RhcnQiLCJsaW5lQ29udGVudCIsImlucHV0IiwiY29sIiwiY29sdW1uIiwid2FybiIsIm5vZGUiLCJydWxlTmFtZSIsIm1lc3NhZ2UiLCJjb2xvck1lc3NhZ2UiLCJjaGFsayIsIm1hZ2VudGEiLCJncmV5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBT0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBRUE7Ozs7OztBQU1BLElBQU1BLFdBQVcsc0JBQWpCLEMsQ0FsQkE7Ozs7Ozs7QUFvQkEsSUFBTUMsTUFBTSxzREFBWjs7QUFFQSxJQUFJQyxhQUFhLEVBQWpCO0FBQ0EsSUFBSUMsZUFBZSxFQUFuQjs7QUFFQTs7Ozs7Ozs7QUFRTyxJQUFNQyx3QkFBUUMsa0JBQVFDLE1BQVIsQ0FBZU4sUUFBZixFQUF5QjtBQUFBLFdBQzFDLFVBQUNPLEdBQUQsRUFBTUMsTUFBTixFQUFpQjtBQUNiLFlBQUksQ0FBQ0MsS0FBS0MsT0FBVixFQUFtQjtBQUNmO0FBQ0g7O0FBRURILFlBQUlJLFNBQUosQ0FBYyxnQkFBUTtBQUNsQlQseUJBQWEsRUFBYjs7QUFFQVUsaUJBQUtDLFNBQUwsQ0FBZSxnQkFBUTtBQUNuQixvQkFBSUMsT0FBT0MseUJBQVAsSUFBb0NOLEtBQUtPLFFBQTdDLEVBQXVEO0FBQ25EO0FBQ0g7O0FBSGtCLG9CQUtaQyxJQUxZLEdBS0dDLElBTEgsQ0FLWkQsSUFMWTtBQUFBLG9CQUtORSxLQUxNLEdBS0dELElBTEgsQ0FLTkMsS0FMTTs7QUFNbkIsb0JBQUlqQixXQUFXZSxJQUFYLE1BQXFCZCxpQkFBaUJjLElBQWpCLElBQXlCZixXQUFXZSxJQUFYLE1BQXFCRSxLQUFuRSxDQUFKLEVBQStFO0FBQzNFLHdCQUFNQyxTQUFTRixLQUFLRSxNQUFwQjtBQUNBLHdCQUFNQyxPQUFPRCxPQUFPRSxLQUFQLENBQWFELElBQTFCO0FBQ0Esd0JBQU1FLGNBQWMsMEJBQWVGLElBQWYsRUFBcUJELE9BQU9JLEtBQVAsQ0FBYWpCLEdBQWxDLENBQXBCO0FBQ0Esd0JBQU1rQixNQUFNTCxPQUFPRSxLQUFQLENBQWFJLE1BQXpCO0FBQ0FsQiwyQkFBT21CLElBQVAsQ0FBWTNCLFFBQVosRUFBc0I7QUFDbEI0Qiw4QkFBTVYsSUFEWTtBQUVsQlcsa0NBQVU3QixRQUZRO0FBR2xCcUIsOEJBQU1BLElBSFk7QUFJbEJJLDZCQUFLQSxHQUphO0FBS2xCSyxpQ0FBUzdCLEdBTFM7QUFNbEI4QixzQ0FBYyxNQUNSQyxnQkFBTUMsT0FBTixDQUFjVixXQUFkLENBRFEsR0FFUixJQUZRLEdBR1JTLGdCQUFNRSxJQUFOLENBQVdqQyxHQUFYO0FBVFkscUJBQXRCO0FBV0FhLDJCQUFPQyx5QkFBUDtBQUNIOztBQUVEYiwyQkFBV2UsSUFBWCxJQUFtQkUsS0FBbkI7QUFDQWhCLCtCQUFlYyxJQUFmO0FBQ0gsYUEzQkQ7QUE0QkgsU0EvQkQ7QUFnQ0gsS0F0Q3lDO0FBQUEsQ0FBekIsQ0FBZCIsImZpbGUiOiJkdXBsaWNhdGUtcHJvcGVydGllcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgZHVwbGljYXRlLXByb3BlcnRpZXMg55qE5qOA5rWL6YC76L6RXG4gKiAgICAgICBEdXBsaWNhdGUgcHJvcGVydGllcyBtdXN0IGFwcGVhciBvbmUgYWZ0ZXIgdGhlIG90aGVyXG4gKiAgICAgICBodHRwczovL2dpdGh1Yi5jb20vQ1NTTGludC9jc3NsaW50L3dpa2kvRGlzYWxsb3ctZHVwbGljYXRlLXByb3BlcnRpZXNcbiAqIEBhdXRob3IgaWVsZ25hdyh3dWppMDIyM0BnbWFpbC5jb20pXG4gKi9cblxuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCBwb3N0Y3NzIGZyb20gJ3Bvc3Rjc3MnO1xuXG5pbXBvcnQge2dldExpbmVDb250ZW50fSBmcm9tICcuLi91dGlsJztcblxuLyoqXG4gKiDlvZPliY3mlofku7bmiYDku6PooajnmoTop4TliJnlkI3np7BcbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmNvbnN0IFJVTEVOQU1FID0gJ2R1cGxpY2F0ZS1wcm9wZXJ0aWVzJztcblxuY29uc3QgTVNHID0gJ0R1cGxpY2F0ZSBwcm9wZXJ0aWVzIG11c3QgYXBwZWFyIG9uZSBhZnRlciB0aGUgb3RoZXInO1xuXG5sZXQgcHJvcGVydGllcyA9IHt9O1xubGV0IGxhc3RQcm9wZXJ0eSA9ICcnO1xuXG4vKipcbiAqIOWFt+S9k+eahOajgOa1i+mAu+i+kVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIOWPguaVsFxuICogQHBhcmFtIHsqfSBvcHRzLnJ1bGVWYWwg5b2T5YmN6KeE5YiZ5YW35L2T6YWN572u55qE5YC8XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlQ29udGVudCDmlofku7blhoXlrrlcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVQYXRoIOaWh+S7tui3r+W+hFxuICovXG5leHBvcnQgY29uc3QgY2hlY2sgPSBwb3N0Y3NzLnBsdWdpbihSVUxFTkFNRSwgb3B0cyA9PlxuICAgIChjc3MsIHJlc3VsdCkgPT4ge1xuICAgICAgICBpZiAoIW9wdHMucnVsZVZhbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY3NzLndhbGtSdWxlcyhydWxlID0+IHtcbiAgICAgICAgICAgIHByb3BlcnRpZXMgPSB7fTtcblxuICAgICAgICAgICAgcnVsZS53YWxrRGVjbHMoZGVjbCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGdsb2JhbC5DU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UID49IG9wdHMubWF4RXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IHtwcm9wLCB2YWx1ZX0gPSBkZWNsO1xuICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzW3Byb3BdICYmIChsYXN0UHJvcGVydHkgIT09IHByb3AgfHwgcHJvcGVydGllc1twcm9wXSA9PT0gdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IGRlY2wuc291cmNlO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gc291cmNlLnN0YXJ0LmxpbmU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVDb250ZW50ID0gZ2V0TGluZUNvbnRlbnQobGluZSwgc291cmNlLmlucHV0LmNzcyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbCA9IHNvdXJjZS5zdGFydC5jb2x1bW47XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC53YXJuKFJVTEVOQU1FLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlOiBkZWNsLFxuICAgICAgICAgICAgICAgICAgICAgICAgcnVsZU5hbWU6IFJVTEVOQU1FLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogbGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbDogY29sLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogTVNHLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JNZXNzYWdlOiAnYCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGNoYWxrLm1hZ2VudGEobGluZUNvbnRlbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnYCAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBjaGFsay5ncmV5KE1TRylcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbC5DU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UKys7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcHJvcGVydGllc1twcm9wXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGxhc3RQcm9wZXJ0eSA9IHByb3A7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuKTtcbiJdfQ==