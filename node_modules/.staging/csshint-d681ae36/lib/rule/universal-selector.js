'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'universal-selector';

/**
 * css 组合的正则匹配
 *
 * @const
 * @type {RegExp}
 */
/**
 * @file universal-selector 的检测逻辑
 *       Don't use universal selector because it's slow
 *       https://github.com/CSSLint/csslint/wiki/Disallow-universal-selector
 * @author ielgnaw(wuji0223@gmail.com)
 */

var PATTERN_COMBINATORS = /[\s>+~]+/g;

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
var MSG = 'Don\'t use universal selector because it\'s slow';

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {

        if (!opts.ruleVal) {
            return;
        }

        css.walkRules(function (rule) {
            if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                return;
            }

            var selector = rule.selector,
                source = rule.source;

            var selectorGroup = selector.split(',');
            var line = source.start.line;
            var lineContent = (0, _util.getLineContent)(line, source.input.css);

            for (var i = 0, len = selectorGroup.length; i < len; i++) {
                var selectorInGroup = selectorGroup[i] || '';
                // 去掉 attr 选择器
                selectorInGroup = selectorInGroup.replace(/\[.+?\](?::[^\s>+~\.#\[]+)?/g, '');

                var segments = selectorInGroup.split(PATTERN_COMBINATORS);
                var l = segments.length;
                if (l) {
                    if (segments[l - 1] === '*') {
                        if (selectorInGroup.slice(0, 1) === '\n') {
                            line = line + 1;
                            lineContent = (0, _util.getLineContent)(line, source.input.css);
                        }
                        var col = lineContent.indexOf(segments[l - 1]) + 1;
                        result.warn(RULENAME, {
                            node: rule,
                            ruleName: RULENAME,
                            line: line,
                            col: col,
                            message: MSG,
                            colorMessage: '`' + lineContent.replace(segments[l - 1], _chalk2.default.magenta(segments[l - 1])) + '` ' + _chalk2.default.grey(MSG)
                        });

                        global.CSSHINT_INVALID_ALL_COUNT++;
                    }
                }
            }
        });
    };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL3VuaXZlcnNhbC1zZWxlY3Rvci5qcyJdLCJuYW1lcyI6WyJSVUxFTkFNRSIsIlBBVFRFUk5fQ09NQklOQVRPUlMiLCJNU0ciLCJjaGVjayIsInBvc3Rjc3MiLCJwbHVnaW4iLCJjc3MiLCJyZXN1bHQiLCJvcHRzIiwicnVsZVZhbCIsIndhbGtSdWxlcyIsImdsb2JhbCIsIkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQiLCJtYXhFcnJvciIsInNlbGVjdG9yIiwicnVsZSIsInNvdXJjZSIsInNlbGVjdG9yR3JvdXAiLCJzcGxpdCIsImxpbmUiLCJzdGFydCIsImxpbmVDb250ZW50IiwiaW5wdXQiLCJpIiwibGVuIiwibGVuZ3RoIiwic2VsZWN0b3JJbkdyb3VwIiwicmVwbGFjZSIsInNlZ21lbnRzIiwibCIsInNsaWNlIiwiY29sIiwiaW5kZXhPZiIsIndhcm4iLCJub2RlIiwicnVsZU5hbWUiLCJtZXNzYWdlIiwiY29sb3JNZXNzYWdlIiwiY2hhbGsiLCJtYWdlbnRhIiwiZ3JleSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQU9BOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUVBOzs7Ozs7QUFNQSxJQUFNQSxXQUFXLG9CQUFqQjs7QUFFQTs7Ozs7O0FBcEJBOzs7Ozs7O0FBMEJBLElBQU1DLHNCQUFzQixXQUE1Qjs7QUFFQTs7Ozs7O0FBTUEsSUFBTUMsTUFBTSxrREFBWjs7QUFFQTs7Ozs7Ozs7QUFRTyxJQUFNQyx3QkFBUUMsa0JBQVFDLE1BQVIsQ0FBZUwsUUFBZixFQUF5QjtBQUFBLFdBQzFDLFVBQUNNLEdBQUQsRUFBTUMsTUFBTixFQUFpQjs7QUFFYixZQUFJLENBQUNDLEtBQUtDLE9BQVYsRUFBbUI7QUFDZjtBQUNIOztBQUVESCxZQUFJSSxTQUFKLENBQWMsZ0JBQVE7QUFDbEIsZ0JBQUlDLE9BQU9DLHlCQUFQLElBQW9DSixLQUFLSyxRQUE3QyxFQUF1RDtBQUNuRDtBQUNIOztBQUhpQixnQkFLWEMsUUFMVyxHQUtTQyxJQUxULENBS1hELFFBTFc7QUFBQSxnQkFLREUsTUFMQyxHQUtTRCxJQUxULENBS0RDLE1BTEM7O0FBTWxCLGdCQUFNQyxnQkFBZ0JILFNBQVNJLEtBQVQsQ0FBZSxHQUFmLENBQXRCO0FBQ0EsZ0JBQUlDLE9BQU9ILE9BQU9JLEtBQVAsQ0FBYUQsSUFBeEI7QUFDQSxnQkFBSUUsY0FBYywwQkFBZUYsSUFBZixFQUFxQkgsT0FBT00sS0FBUCxDQUFhaEIsR0FBbEMsQ0FBbEI7O0FBRUEsaUJBQUssSUFBSWlCLElBQUksQ0FBUixFQUFXQyxNQUFNUCxjQUFjUSxNQUFwQyxFQUE0Q0YsSUFBSUMsR0FBaEQsRUFBcURELEdBQXJELEVBQTBEO0FBQ3RELG9CQUFJRyxrQkFBa0JULGNBQWNNLENBQWQsS0FBb0IsRUFBMUM7QUFDQTtBQUNBRyxrQ0FBa0JBLGdCQUFnQkMsT0FBaEIsQ0FBd0IsOEJBQXhCLEVBQXdELEVBQXhELENBQWxCOztBQUVBLG9CQUFNQyxXQUFXRixnQkFBZ0JSLEtBQWhCLENBQXNCakIsbUJBQXRCLENBQWpCO0FBQ0Esb0JBQU00QixJQUFJRCxTQUFTSCxNQUFuQjtBQUNBLG9CQUFJSSxDQUFKLEVBQU87QUFDSCx3QkFBSUQsU0FBU0MsSUFBSSxDQUFiLE1BQW9CLEdBQXhCLEVBQTZCO0FBQ3pCLDRCQUFJSCxnQkFBZ0JJLEtBQWhCLENBQXNCLENBQXRCLEVBQXlCLENBQXpCLE1BQWdDLElBQXBDLEVBQTBDO0FBQ3RDWCxtQ0FBT0EsT0FBTyxDQUFkO0FBQ0FFLDBDQUFjLDBCQUFlRixJQUFmLEVBQXFCSCxPQUFPTSxLQUFQLENBQWFoQixHQUFsQyxDQUFkO0FBQ0g7QUFDRCw0QkFBTXlCLE1BQU1WLFlBQVlXLE9BQVosQ0FBb0JKLFNBQVNDLElBQUksQ0FBYixDQUFwQixJQUF1QyxDQUFuRDtBQUNBdEIsK0JBQU8wQixJQUFQLENBQVlqQyxRQUFaLEVBQXNCO0FBQ2xCa0Msa0NBQU1uQixJQURZO0FBRWxCb0Isc0NBQVVuQyxRQUZRO0FBR2xCbUIsa0NBQU1BLElBSFk7QUFJbEJZLGlDQUFLQSxHQUphO0FBS2xCSyxxQ0FBU2xDLEdBTFM7QUFNbEJtQywwQ0FBYyxNQUNSaEIsWUFBWU0sT0FBWixDQUFvQkMsU0FBU0MsSUFBSSxDQUFiLENBQXBCLEVBQXFDUyxnQkFBTUMsT0FBTixDQUFjWCxTQUFTQyxJQUFJLENBQWIsQ0FBZCxDQUFyQyxDQURRLEdBRVIsSUFGUSxHQUdSUyxnQkFBTUUsSUFBTixDQUFXdEMsR0FBWDtBQVRZLHlCQUF0Qjs7QUFZQVMsK0JBQU9DLHlCQUFQO0FBQ0g7QUFDSjtBQUNKO0FBQ0osU0F4Q0Q7QUF5Q0gsS0FoRHlDO0FBQUEsQ0FBekIsQ0FBZCIsImZpbGUiOiJ1bml2ZXJzYWwtc2VsZWN0b3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIHVuaXZlcnNhbC1zZWxlY3RvciDnmoTmo4DmtYvpgLvovpFcbiAqICAgICAgIERvbid0IHVzZSB1bml2ZXJzYWwgc2VsZWN0b3IgYmVjYXVzZSBpdCdzIHNsb3dcbiAqICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9DU1NMaW50L2Nzc2xpbnQvd2lraS9EaXNhbGxvdy11bml2ZXJzYWwtc2VsZWN0b3JcbiAqIEBhdXRob3IgaWVsZ25hdyh3dWppMDIyM0BnbWFpbC5jb20pXG4gKi9cblxuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCBwb3N0Y3NzIGZyb20gJ3Bvc3Rjc3MnO1xuXG5pbXBvcnQge2dldExpbmVDb250ZW50fSBmcm9tICcuLi91dGlsJztcblxuLyoqXG4gKiDlvZPliY3mlofku7bmiYDku6PooajnmoTop4TliJnlkI3np7BcbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmNvbnN0IFJVTEVOQU1FID0gJ3VuaXZlcnNhbC1zZWxlY3Rvcic7XG5cbi8qKlxuICogY3NzIOe7hOWQiOeahOato+WImeWMuemFjVxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xuY29uc3QgUEFUVEVSTl9DT01CSU5BVE9SUyA9IC9bXFxzPit+XSsvZztcblxuLyoqXG4gKiDplJnor6/nmoTkv6Hmga9cbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmNvbnN0IE1TRyA9ICdEb25cXCd0IHVzZSB1bml2ZXJzYWwgc2VsZWN0b3IgYmVjYXVzZSBpdFxcJ3Mgc2xvdyc7XG5cbi8qKlxuICog5YW35L2T55qE5qOA5rWL6YC76L6RXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMg5Y+C5pWwXG4gKiBAcGFyYW0geyp9IG9wdHMucnVsZVZhbCDlvZPliY3op4TliJnlhbfkvZPphY3nva7nmoTlgLxcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVDb250ZW50IOaWh+S7tuWGheWuuVxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZVBhdGgg5paH5Lu26Lev5b6EXG4gKi9cbmV4cG9ydCBjb25zdCBjaGVjayA9IHBvc3Rjc3MucGx1Z2luKFJVTEVOQU1FLCBvcHRzID0+XG4gICAgKGNzcywgcmVzdWx0KSA9PiB7XG5cbiAgICAgICAgaWYgKCFvcHRzLnJ1bGVWYWwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNzcy53YWxrUnVsZXMocnVsZSA9PiB7XG4gICAgICAgICAgICBpZiAoZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQgPj0gb3B0cy5tYXhFcnJvcikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3Qge3NlbGVjdG9yLCBzb3VyY2V9ID0gcnVsZTtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdG9yR3JvdXAgPSBzZWxlY3Rvci5zcGxpdCgnLCcpO1xuICAgICAgICAgICAgbGV0IGxpbmUgPSBzb3VyY2Uuc3RhcnQubGluZTtcbiAgICAgICAgICAgIGxldCBsaW5lQ29udGVudCA9IGdldExpbmVDb250ZW50KGxpbmUsIHNvdXJjZS5pbnB1dC5jc3MpO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc2VsZWN0b3JHcm91cC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBzZWxlY3RvckluR3JvdXAgPSBzZWxlY3Rvckdyb3VwW2ldIHx8ICcnO1xuICAgICAgICAgICAgICAgIC8vIOWOu+aOiSBhdHRyIOmAieaLqeWZqFxuICAgICAgICAgICAgICAgIHNlbGVjdG9ySW5Hcm91cCA9IHNlbGVjdG9ySW5Hcm91cC5yZXBsYWNlKC9cXFsuKz9cXF0oPzo6W15cXHM+K35cXC4jXFxbXSspPy9nLCAnJyk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBzZWdtZW50cyA9IHNlbGVjdG9ySW5Hcm91cC5zcGxpdChQQVRURVJOX0NPTUJJTkFUT1JTKTtcbiAgICAgICAgICAgICAgICBjb25zdCBsID0gc2VnbWVudHMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWdtZW50c1tsIC0gMV0gPT09ICcqJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdG9ySW5Hcm91cC5zbGljZSgwLCAxKSA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lID0gbGluZSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZUNvbnRlbnQgPSBnZXRMaW5lQ29udGVudChsaW5lLCBzb3VyY2UuaW5wdXQuY3NzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbCA9IGxpbmVDb250ZW50LmluZGV4T2Yoc2VnbWVudHNbbCAtIDFdKSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQud2FybihSVUxFTkFNRSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU6IHJ1bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZU5hbWU6IFJVTEVOQU1FLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6IGxpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sOiBjb2wsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogTVNHLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yTWVzc2FnZTogJ2AnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgbGluZUNvbnRlbnQucmVwbGFjZShzZWdtZW50c1tsIC0gMV0sIGNoYWxrLm1hZ2VudGEoc2VnbWVudHNbbCAtIDFdKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnYCAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgY2hhbGsuZ3JleShNU0cpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuKTtcbiJdfQ==