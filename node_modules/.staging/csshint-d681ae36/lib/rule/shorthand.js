'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'shorthand';

/**
 * 匹配 #aaccaa 之类的颜色值
 *
 * @const
 * @type {RegExp}
 */
/**
 * @file shorthand 的检测逻辑
 *       `property` 对应 015: [建议] 在可以使用缩写的情况下，尽量使用属性缩写。
 *       `color` 对应 030: [强制] 颜色值可以缩写时，必须使用缩写形式。
 * @author ielgnaw(wuji0223@gmail.com)
 */

var PATTERN_COLOR = /^#([\da-f])\1([\da-f])\2([\da-f])\3$/i;

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
var COLOR_MSG = 'Color value can be abbreviated, must use the abbreviation form';

var arrayProto = Array.prototype;

var propertiesToCheck = {};

var mapping = {
    margin: ['margin-top', 'margin-bottom', 'margin-left', 'margin-right'],
    padding: ['padding-top', 'padding-bottom', 'padding-left', 'padding-right'],
    font: ['font-family', 'font-size', 'line-height']
};

(function () {
    /* eslint-disable fecs-use-for-of, fecs-valid-map-set */
    for (var prop in mapping) {
        if (mapping.hasOwnProperty(prop)) {
            for (var i = 0, len = mapping[prop].length; i < len; i++) {
                propertiesToCheck[mapping[prop][i]] = prop;
            }
        }
    }
    /* eslint-enable fecs-use-for-of, fecs-valid-map-set */
})();

/**
 * 获取 property 的错误信息
 *
 * @param {string} propertyStr 出错的属性字符串
 * @param {string} selector 这些出错的属性所在的选择器的名称
 * @param {string} replaceProperty 应该要替换的属性
 *
 * @return {Object} 包含 msg 和 colorMsg 属性的对象
 */
var getPropertyMsg = function getPropertyMsg(propertyStr, selector, replaceProperty) {
    return {
        msg: '' + 'The properties `' + propertyStr + '` in the selector `' + selector + '` can be replaced by ' + replaceProperty + '.',
        colorMsg: _chalk2.default.grey('' + 'The properties `' + _chalk2.default.magenta(propertyStr) + '` in the selector `' + _chalk2.default.magenta(selector) + '` can be replaced by ' + _chalk2.default.magenta(replaceProperty) + '.')
    };
};

var lineCache = 0;

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        var ruleVal = opts.ruleVal;
        var realRuleVal = [];
        arrayProto.push[Array.isArray(ruleVal) ? 'apply' : 'call'](realRuleVal, ruleVal);

        if (realRuleVal.length) {
            if (realRuleVal.indexOf('color') > -1) {

                lineCache = 0;

                css.walkDecls(function (decl) {
                    var parts = _postcss2.default.list.space(decl.value);
                    for (var i = 0, len = parts.length; i < len; i++) {
                        var part = parts[i];
                        if (PATTERN_COLOR.test(part)) {
                            var source = decl.source;
                            if (lineCache !== source.start.line) {
                                lineCache = source.start.line;
                                var line = source.start.line;
                                var lineContent = (0, _util.getLineContent)(line, source.input.css);
                                var col = source.start.column + decl.prop.length + decl.raws.between.length;
                                result.warn(RULENAME, {
                                    node: decl,
                                    ruleName: RULENAME,
                                    errorChar: 'color',
                                    line: line,
                                    col: col,
                                    message: COLOR_MSG,
                                    colorMessage: '`' + (0, _util.changeColorByStartAndEndIndex)(lineContent, col, source.end.column) + '` ' + _chalk2.default.grey(COLOR_MSG)
                                });
                                global.CSSHINT_INVALID_ALL_COUNT++;
                            }
                        }
                    }
                });
            }

            if (realRuleVal.indexOf('property') > -1) {
                var tmp = {};
                css.walkRules(function (rule) {
                    tmp = {};
                    var nodes = rule.nodes,
                        selector = rule.selector;

                    for (var i = 0, len = nodes.length; i < len; i++) {
                        var decl = nodes[i];
                        if (decl.type === 'decl') {
                            var prop = decl.prop;
                            var v = propertiesToCheck[prop];
                            if (!v) {
                                continue;
                            }

                            if (!tmp[v]) {
                                tmp[v] = 1;
                            } else {
                                tmp[v] += 1;
                            }

                            if (tmp[v] >= mapping[v].length) {
                                var source = decl.source;
                                var line = source.start.line;
                                var col = source.start.column;

                                var msg = getPropertyMsg(mapping[v].join(', '), selector, v);

                                result.warn(RULENAME, {
                                    node: decl,
                                    ruleName: RULENAME,
                                    errorChar: 'property',
                                    line: line,
                                    col: col,
                                    message: msg.msg,
                                    colorMessage: msg.colorMsg
                                });
                                global.CSSHINT_INVALID_ALL_COUNT++;
                                break;
                            }
                        }
                    }
                });
            }
        }
    };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL3Nob3J0aGFuZC5qcyJdLCJuYW1lcyI6WyJSVUxFTkFNRSIsIlBBVFRFUk5fQ09MT1IiLCJDT0xPUl9NU0ciLCJhcnJheVByb3RvIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJwcm9wZXJ0aWVzVG9DaGVjayIsIm1hcHBpbmciLCJtYXJnaW4iLCJwYWRkaW5nIiwiZm9udCIsInByb3AiLCJoYXNPd25Qcm9wZXJ0eSIsImkiLCJsZW4iLCJsZW5ndGgiLCJnZXRQcm9wZXJ0eU1zZyIsInByb3BlcnR5U3RyIiwic2VsZWN0b3IiLCJyZXBsYWNlUHJvcGVydHkiLCJtc2ciLCJjb2xvck1zZyIsImNoYWxrIiwiZ3JleSIsIm1hZ2VudGEiLCJsaW5lQ2FjaGUiLCJjaGVjayIsInBvc3Rjc3MiLCJwbHVnaW4iLCJjc3MiLCJyZXN1bHQiLCJydWxlVmFsIiwib3B0cyIsInJlYWxSdWxlVmFsIiwicHVzaCIsImlzQXJyYXkiLCJpbmRleE9mIiwid2Fsa0RlY2xzIiwicGFydHMiLCJsaXN0Iiwic3BhY2UiLCJkZWNsIiwidmFsdWUiLCJwYXJ0IiwidGVzdCIsInNvdXJjZSIsInN0YXJ0IiwibGluZSIsImxpbmVDb250ZW50IiwiaW5wdXQiLCJjb2wiLCJjb2x1bW4iLCJyYXdzIiwiYmV0d2VlbiIsIndhcm4iLCJub2RlIiwicnVsZU5hbWUiLCJlcnJvckNoYXIiLCJtZXNzYWdlIiwiY29sb3JNZXNzYWdlIiwiZW5kIiwiZ2xvYmFsIiwiQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCIsInRtcCIsIndhbGtSdWxlcyIsIm5vZGVzIiwicnVsZSIsInR5cGUiLCJ2Iiwiam9pbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQU9BOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUVBOzs7Ozs7QUFNQSxJQUFNQSxXQUFXLFdBQWpCOztBQUVBOzs7Ozs7QUFwQkE7Ozs7Ozs7QUEwQkEsSUFBTUMsZ0JBQWdCLHVDQUF0Qjs7QUFFQTs7Ozs7O0FBTUEsSUFBTUMsWUFBWSxn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LGtCQUFrQkssSUFBbEIsQ0FBVjtBQUNBLGdDQUFJLENBQUN5RCxDQUFMLEVBQVE7QUFDSjtBQUNIOztBQUVELGdDQUFJLENBQUNMLElBQUlLLENBQUosQ0FBTCxFQUFhO0FBQ1RMLG9DQUFJSyxDQUFKLElBQVMsQ0FBVDtBQUNILDZCQUZELE1BR0s7QUFDREwsb0NBQUlLLENBQUosS0FBVSxDQUFWO0FBQ0g7O0FBRUQsZ0NBQUlMLElBQUlLLENBQUosS0FBVTdELFFBQVE2RCxDQUFSLEVBQVdyRCxNQUF6QixFQUFpQztBQUM3QixvQ0FBTThCLFNBQVNKLEtBQUtJLE1BQXBCO0FBQ0Esb0NBQU1FLE9BQU9GLE9BQU9DLEtBQVAsQ0FBYUMsSUFBMUI7QUFDQSxvQ0FBTUcsTUFBTUwsT0FBT0MsS0FBUCxDQUFhSyxNQUF6Qjs7QUFFQSxvQ0FBTS9CLE1BQU1KLGVBQWVULFFBQVE2RCxDQUFSLEVBQVdDLElBQVgsQ0FBZ0IsSUFBaEIsQ0FBZixFQUFzQ25ELFFBQXRDLEVBQWdEa0QsQ0FBaEQsQ0FBWjs7QUFFQXRDLHVDQUFPd0IsSUFBUCxDQUFZdEQsUUFBWixFQUFzQjtBQUNsQnVELDBDQUFNZCxJQURZO0FBRWxCZSw4Q0FBVXhELFFBRlE7QUFHbEJ5RCwrQ0FBVyxVQUhPO0FBSWxCViwwQ0FBTUEsSUFKWTtBQUtsQkcseUNBQUtBLEdBTGE7QUFNbEJRLDZDQUFTdEMsSUFBSUEsR0FOSztBQU9sQnVDLGtEQUFjdkMsSUFBSUM7QUFQQSxpQ0FBdEI7QUFTQXdDLHVDQUFPQyx5QkFBUDtBQUNBO0FBQ0g7QUFDSjtBQUNKO0FBQ0osaUJBeENEO0FBeUNIO0FBQ0o7QUFDSixLQXhGeUM7QUFBQSxDQUF6QixDQUFkIiwiZmlsZSI6InNob3J0aGFuZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgc2hvcnRoYW5kIOeahOajgOa1i+mAu+i+kVxuICogICAgICAgYHByb3BlcnR5YCDlr7nlupQgMDE1OiBb5bu66K6uXSDlnKjlj6/ku6Xkvb/nlKjnvKnlhpnnmoTmg4XlhrXkuIvvvIzlsL3ph4/kvb/nlKjlsZ7mgKfnvKnlhpnjgIJcbiAqICAgICAgIGBjb2xvcmAg5a+55bqUIDAzMDogW+W8uuWItl0g6aKc6Imy5YC85Y+v5Lul57yp5YaZ5pe277yM5b+F6aG75L2/55So57yp5YaZ5b2i5byP44CCXG4gKiBAYXV0aG9yIGllbGduYXcod3VqaTAyMjNAZ21haWwuY29tKVxuICovXG5cbmltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgcG9zdGNzcyBmcm9tICdwb3N0Y3NzJztcblxuaW1wb3J0IHtnZXRMaW5lQ29udGVudCwgY2hhbmdlQ29sb3JCeVN0YXJ0QW5kRW5kSW5kZXh9IGZyb20gJy4uL3V0aWwnO1xuXG4vKipcbiAqIOW9k+WJjeaWh+S7tuaJgOS7o+ihqOeahOinhOWImeWQjeensFxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgUlVMRU5BTUUgPSAnc2hvcnRoYW5kJztcblxuLyoqXG4gKiDljLnphY0gI2FhY2NhYSDkuYvnsbvnmoTpopzoibLlgLxcbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbmNvbnN0IFBBVFRFUk5fQ09MT1IgPSAvXiMoW1xcZGEtZl0pXFwxKFtcXGRhLWZdKVxcMihbXFxkYS1mXSlcXDMkL2k7XG5cbi8qKlxuICog6ZSZ6K+v55qE5L+h5oGvXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBDT0xPUl9NU0cgPSAnQ29sb3IgdmFsdWUgY2FuIGJlIGFiYnJldmlhdGVkLCBtdXN0IHVzZSB0aGUgYWJicmV2aWF0aW9uIGZvcm0nO1xuXG5jb25zdCBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG5jb25zdCBwcm9wZXJ0aWVzVG9DaGVjayA9IHt9O1xuXG5jb25zdCBtYXBwaW5nID0ge1xuICAgIG1hcmdpbjogW1xuICAgICAgICAnbWFyZ2luLXRvcCcsXG4gICAgICAgICdtYXJnaW4tYm90dG9tJyxcbiAgICAgICAgJ21hcmdpbi1sZWZ0JyxcbiAgICAgICAgJ21hcmdpbi1yaWdodCdcbiAgICBdLFxuICAgIHBhZGRpbmc6IFtcbiAgICAgICAgJ3BhZGRpbmctdG9wJyxcbiAgICAgICAgJ3BhZGRpbmctYm90dG9tJyxcbiAgICAgICAgJ3BhZGRpbmctbGVmdCcsXG4gICAgICAgICdwYWRkaW5nLXJpZ2h0J1xuICAgIF0sXG4gICAgZm9udDogW1xuICAgICAgICAnZm9udC1mYW1pbHknLFxuICAgICAgICAnZm9udC1zaXplJyxcbiAgICAgICAgJ2xpbmUtaGVpZ2h0J1xuICAgIF1cbn07XG5cbigoKSA9PiB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgZmVjcy11c2UtZm9yLW9mLCBmZWNzLXZhbGlkLW1hcC1zZXQgKi9cbiAgICBmb3IgKGxldCBwcm9wIGluIG1hcHBpbmcpIHtcbiAgICAgICAgaWYgKG1hcHBpbmcuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBtYXBwaW5nW3Byb3BdLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllc1RvQ2hlY2tbbWFwcGluZ1twcm9wXVtpXV0gPSBwcm9wO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qIGVzbGludC1lbmFibGUgZmVjcy11c2UtZm9yLW9mLCBmZWNzLXZhbGlkLW1hcC1zZXQgKi9cbn0pKCk7XG5cbi8qKlxuICog6I635Y+WIHByb3BlcnR5IOeahOmUmeivr+S/oeaBr1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eVN0ciDlh7rplJnnmoTlsZ7mgKflrZfnrKbkuLJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvciDov5nkupvlh7rplJnnmoTlsZ7mgKfmiYDlnKjnmoTpgInmi6nlmajnmoTlkI3np7BcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXBsYWNlUHJvcGVydHkg5bqU6K+l6KaB5pu/5o2i55qE5bGe5oCnXG4gKlxuICogQHJldHVybiB7T2JqZWN0fSDljIXlkKsgbXNnIOWSjCBjb2xvck1zZyDlsZ7mgKfnmoTlr7nosaFcbiAqL1xuY29uc3QgZ2V0UHJvcGVydHlNc2cgPSAocHJvcGVydHlTdHIsIHNlbGVjdG9yLCByZXBsYWNlUHJvcGVydHkpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBtc2c6ICcnXG4gICAgICAgICAgICArICdUaGUgcHJvcGVydGllcyBgJ1xuICAgICAgICAgICAgKyBwcm9wZXJ0eVN0clxuICAgICAgICAgICAgKyAnYCBpbiB0aGUgc2VsZWN0b3IgYCdcbiAgICAgICAgICAgICsgc2VsZWN0b3JcbiAgICAgICAgICAgICsgJ2AgY2FuIGJlIHJlcGxhY2VkIGJ5ICdcbiAgICAgICAgICAgICsgcmVwbGFjZVByb3BlcnR5XG4gICAgICAgICAgICArICcuJyxcbiAgICAgICAgY29sb3JNc2c6IGNoYWxrLmdyZXkoJydcbiAgICAgICAgICAgICsgJ1RoZSBwcm9wZXJ0aWVzIGAnXG4gICAgICAgICAgICArIGNoYWxrLm1hZ2VudGEocHJvcGVydHlTdHIpXG4gICAgICAgICAgICArICdgIGluIHRoZSBzZWxlY3RvciBgJ1xuICAgICAgICAgICAgKyBjaGFsay5tYWdlbnRhKHNlbGVjdG9yKVxuICAgICAgICAgICAgKyAnYCBjYW4gYmUgcmVwbGFjZWQgYnkgJ1xuICAgICAgICAgICAgKyBjaGFsay5tYWdlbnRhKHJlcGxhY2VQcm9wZXJ0eSlcbiAgICAgICAgICAgICsgJy4nKVxuICAgIH07XG59O1xuXG5sZXQgbGluZUNhY2hlID0gMDtcblxuLyoqXG4gKiDlhbfkvZPnmoTmo4DmtYvpgLvovpFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyDlj4LmlbBcbiAqIEBwYXJhbSB7Kn0gb3B0cy5ydWxlVmFsIOW9k+WJjeinhOWImeWFt+S9k+mFjee9rueahOWAvFxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZUNvbnRlbnQg5paH5Lu25YaF5a65XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlUGF0aCDmlofku7bot6/lvoRcbiAqL1xuZXhwb3J0IGNvbnN0IGNoZWNrID0gcG9zdGNzcy5wbHVnaW4oUlVMRU5BTUUsIG9wdHMgPT5cbiAgICAoY3NzLCByZXN1bHQpID0+IHtcbiAgICAgICAgY29uc3QgcnVsZVZhbCA9IG9wdHMucnVsZVZhbDtcbiAgICAgICAgY29uc3QgcmVhbFJ1bGVWYWwgPSBbXTtcbiAgICAgICAgYXJyYXlQcm90by5wdXNoW0FycmF5LmlzQXJyYXkocnVsZVZhbCkgPyAnYXBwbHknIDogJ2NhbGwnXShyZWFsUnVsZVZhbCwgcnVsZVZhbCk7XG5cbiAgICAgICAgaWYgKHJlYWxSdWxlVmFsLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKHJlYWxSdWxlVmFsLmluZGV4T2YoJ2NvbG9yJykgPiAtMSkge1xuXG4gICAgICAgICAgICAgICAgbGluZUNhY2hlID0gMDtcblxuICAgICAgICAgICAgICAgIGNzcy53YWxrRGVjbHMoZGVjbCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcnRzID0gcG9zdGNzcy5saXN0LnNwYWNlKGRlY2wudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcGFydHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcnQgPSBwYXJ0c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChQQVRURVJOX0NPTE9SLnRlc3QocGFydCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2UgPSBkZWNsLnNvdXJjZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGluZUNhY2hlICE9PSBzb3VyY2Uuc3RhcnQubGluZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lQ2FjaGUgPSBzb3VyY2Uuc3RhcnQubGluZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZSA9IHNvdXJjZS5zdGFydC5saW5lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lQ29udGVudCA9IGdldExpbmVDb250ZW50KGxpbmUsIHNvdXJjZS5pbnB1dC5jc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2wgPSBzb3VyY2Uuc3RhcnQuY29sdW1uICsgZGVjbC5wcm9wLmxlbmd0aCArIGRlY2wucmF3cy5iZXR3ZWVuLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lndhcm4oUlVMRU5BTUUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU6IGRlY2wsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlTmFtZTogUlVMRU5BTUUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvckNoYXI6ICdjb2xvcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lOiBsaW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sOiBjb2wsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBDT0xPUl9NU0csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvck1lc3NhZ2U6ICdgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgY2hhbmdlQ29sb3JCeVN0YXJ0QW5kRW5kSW5kZXgoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVDb250ZW50LCBjb2wsIHNvdXJjZS5lbmQuY29sdW1uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJ2AgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgY2hhbGsuZ3JleShDT0xPUl9NU0cpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocmVhbFJ1bGVWYWwuaW5kZXhPZigncHJvcGVydHknKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRtcCA9IHt9O1xuICAgICAgICAgICAgICAgIGNzcy53YWxrUnVsZXMocnVsZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRtcCA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7bm9kZXMsIHNlbGVjdG9yfSA9IHJ1bGU7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBub2Rlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVjbCA9IG5vZGVzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlY2wudHlwZSA9PT0gJ2RlY2wnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvcCA9IGRlY2wucHJvcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2ID0gcHJvcGVydGllc1RvQ2hlY2tbcHJvcF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdG1wW3ZdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcFt2XSA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBbdl0gKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodG1wW3ZdID49IG1hcHBpbmdbdl0ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IGRlY2wuc291cmNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gc291cmNlLnN0YXJ0LmxpbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbCA9IHNvdXJjZS5zdGFydC5jb2x1bW47XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbXNnID0gZ2V0UHJvcGVydHlNc2cobWFwcGluZ1t2XS5qb2luKCcsICcpLCBzZWxlY3Rvciwgdik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lndhcm4oUlVMRU5BTUUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU6IGRlY2wsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlTmFtZTogUlVMRU5BTUUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvckNoYXI6ICdwcm9wZXJ0eScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lOiBsaW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sOiBjb2wsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBtc2cubXNnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JNZXNzYWdlOiBtc2cuY29sb3JNc2dcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbC5DU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuKTtcbiJdfQ==