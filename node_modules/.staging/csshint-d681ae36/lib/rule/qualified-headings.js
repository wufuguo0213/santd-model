'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'qualified-headings';

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
/**
 * @file qualified-headings 的检测逻辑
 *       Headings should not be qualified
 *       https://github.com/CSSLint/csslint/wiki/Disallow-qualified-headings
 * @author ielgnaw(wuji0223@gmail.com)
 */

var MSG = 'Headings should not be qualified (namespaced)';

/**
 * css 组合的正则匹配
 *
 * @const
 * @type {RegExp}
 */
var PATTERN_COMBINATORS = /[\s>+~]+/g;

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {

        if (!opts.ruleVal) {
            return;
        }

        css.walkRules(function (rule) {
            if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                return;
            }

            var selector = rule.selector,
                source = rule.source;

            var selectorGroup = selector.split(',');
            var line = source.start.line;
            var col = source.start.column;
            var lineContent = (0, _util.getLineContent)(line, source.input.css);

            for (var i = 0, len = selectorGroup.length; i < len; i++) {
                var selectorInGroup = selectorGroup[i] || '';
                var segments = selectorInGroup.split(PATTERN_COMBINATORS);

                // 跳过第一个，第一个是 h[1-6] 是合法的
                for (var j = 1, segmentLen = segments.length; j < segmentLen; j++) {
                    var segment = segments[j];
                    if (/h[1-6]/.test(segment)) {
                        if (selectorInGroup.slice(0, 1) === '\n') {
                            line = line + 1;
                            lineContent = (0, _util.getLineContent)(line, source.input.css);
                        }
                        result.warn(RULENAME, {
                            node: rule,
                            ruleName: RULENAME,
                            line: line,
                            col: col + lineContent.indexOf(segment),
                            message: MSG,
                            colorMessage: '`' + lineContent.replace(segment, _chalk2.default.magenta(segment)) + '` ' + _chalk2.default.grey(MSG)
                        });

                        global.CSSHINT_INVALID_ALL_COUNT++;
                    }
                }
            }
        });
    };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL3F1YWxpZmllZC1oZWFkaW5ncy5qcyJdLCJuYW1lcyI6WyJSVUxFTkFNRSIsIk1TRyIsIlBBVFRFUk5fQ09NQklOQVRPUlMiLCJjaGVjayIsInBvc3Rjc3MiLCJwbHVnaW4iLCJjc3MiLCJyZXN1bHQiLCJvcHRzIiwicnVsZVZhbCIsIndhbGtSdWxlcyIsImdsb2JhbCIsIkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQiLCJtYXhFcnJvciIsInNlbGVjdG9yIiwicnVsZSIsInNvdXJjZSIsInNlbGVjdG9yR3JvdXAiLCJzcGxpdCIsImxpbmUiLCJzdGFydCIsImNvbCIsImNvbHVtbiIsImxpbmVDb250ZW50IiwiaW5wdXQiLCJpIiwibGVuIiwibGVuZ3RoIiwic2VsZWN0b3JJbkdyb3VwIiwic2VnbWVudHMiLCJqIiwic2VnbWVudExlbiIsInNlZ21lbnQiLCJ0ZXN0Iiwic2xpY2UiLCJ3YXJuIiwibm9kZSIsInJ1bGVOYW1lIiwiaW5kZXhPZiIsIm1lc3NhZ2UiLCJjb2xvck1lc3NhZ2UiLCJyZXBsYWNlIiwiY2hhbGsiLCJtYWdlbnRhIiwiZ3JleSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQU9BOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUVBOzs7Ozs7QUFNQSxJQUFNQSxXQUFXLG9CQUFqQjs7QUFFQTs7Ozs7O0FBcEJBOzs7Ozs7O0FBMEJBLElBQU1DLE1BQU0sK0NBQVo7O0FBRUE7Ozs7OztBQU1BLElBQU1DLHNCQUFzQixXQUE1Qjs7QUFFQTs7Ozs7Ozs7QUFRTyxJQUFNQyx3QkFBUUMsa0JBQVFDLE1BQVIsQ0FBZUwsUUFBZixFQUF5QjtBQUFBLFdBQzFDLFVBQUNNLEdBQUQsRUFBTUMsTUFBTixFQUFpQjs7QUFFYixZQUFJLENBQUNDLEtBQUtDLE9BQVYsRUFBbUI7QUFDZjtBQUNIOztBQUVESCxZQUFJSSxTQUFKLENBQWMsZ0JBQVE7QUFDbEIsZ0JBQUlDLE9BQU9DLHlCQUFQLElBQW9DSixLQUFLSyxRQUE3QyxFQUF1RDtBQUNuRDtBQUNIOztBQUhpQixnQkFLWEMsUUFMVyxHQUtTQyxJQUxULENBS1hELFFBTFc7QUFBQSxnQkFLREUsTUFMQyxHQUtTRCxJQUxULENBS0RDLE1BTEM7O0FBTWxCLGdCQUFNQyxnQkFBZ0JILFNBQVNJLEtBQVQsQ0FBZSxHQUFmLENBQXRCO0FBQ0EsZ0JBQUlDLE9BQU9ILE9BQU9JLEtBQVAsQ0FBYUQsSUFBeEI7QUFDQSxnQkFBTUUsTUFBTUwsT0FBT0ksS0FBUCxDQUFhRSxNQUF6QjtBQUNBLGdCQUFJQyxjQUFjLDBCQUFlSixJQUFmLEVBQXFCSCxPQUFPUSxLQUFQLENBQWFsQixHQUFsQyxDQUFsQjs7QUFFQSxpQkFBSyxJQUFJbUIsSUFBSSxDQUFSLEVBQVdDLE1BQU1ULGNBQWNVLE1BQXBDLEVBQTRDRixJQUFJQyxHQUFoRCxFQUFxREQsR0FBckQsRUFBMEQ7QUFDdEQsb0JBQU1HLGtCQUFrQlgsY0FBY1EsQ0FBZCxLQUFvQixFQUE1QztBQUNBLG9CQUFNSSxXQUFXRCxnQkFBZ0JWLEtBQWhCLENBQXNCaEIsbUJBQXRCLENBQWpCOztBQUVBO0FBQ0EscUJBQUssSUFBSTRCLElBQUksQ0FBUixFQUFXQyxhQUFhRixTQUFTRixNQUF0QyxFQUE4Q0csSUFBSUMsVUFBbEQsRUFBOERELEdBQTlELEVBQW1FO0FBQy9ELHdCQUFNRSxVQUFVSCxTQUFTQyxDQUFULENBQWhCO0FBQ0Esd0JBQUksU0FBU0csSUFBVCxDQUFjRCxPQUFkLENBQUosRUFBNEI7QUFDeEIsNEJBQUlKLGdCQUFnQk0sS0FBaEIsQ0FBc0IsQ0FBdEIsRUFBeUIsQ0FBekIsTUFBZ0MsSUFBcEMsRUFBMEM7QUFDdENmLG1DQUFPQSxPQUFPLENBQWQ7QUFDQUksMENBQWMsMEJBQWVKLElBQWYsRUFBcUJILE9BQU9RLEtBQVAsQ0FBYWxCLEdBQWxDLENBQWQ7QUFDSDtBQUNEQywrQkFBTzRCLElBQVAsQ0FBWW5DLFFBQVosRUFBc0I7QUFDbEJvQyxrQ0FBTXJCLElBRFk7QUFFbEJzQixzQ0FBVXJDLFFBRlE7QUFHbEJtQixrQ0FBTUEsSUFIWTtBQUlsQkUsaUNBQUtBLE1BQU1FLFlBQVllLE9BQVosQ0FBb0JOLE9BQXBCLENBSk87QUFLbEJPLHFDQUFTdEMsR0FMUztBQU1sQnVDLDBDQUFjLE1BQ1JqQixZQUFZa0IsT0FBWixDQUFvQlQsT0FBcEIsRUFBNkJVLGdCQUFNQyxPQUFOLENBQWNYLE9BQWQsQ0FBN0IsQ0FEUSxHQUVSLElBRlEsR0FHUlUsZ0JBQU1FLElBQU4sQ0FBVzNDLEdBQVg7QUFUWSx5QkFBdEI7O0FBWUFVLCtCQUFPQyx5QkFBUDtBQUNIO0FBQ0o7QUFDSjtBQUNKLFNBdkNEO0FBd0NILEtBL0N5QztBQUFBLENBQXpCLENBQWQiLCJmaWxlIjoicXVhbGlmaWVkLWhlYWRpbmdzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBxdWFsaWZpZWQtaGVhZGluZ3Mg55qE5qOA5rWL6YC76L6RXG4gKiAgICAgICBIZWFkaW5ncyBzaG91bGQgbm90IGJlIHF1YWxpZmllZFxuICogICAgICAgaHR0cHM6Ly9naXRodWIuY29tL0NTU0xpbnQvY3NzbGludC93aWtpL0Rpc2FsbG93LXF1YWxpZmllZC1oZWFkaW5nc1xuICogQGF1dGhvciBpZWxnbmF3KHd1amkwMjIzQGdtYWlsLmNvbSlcbiAqL1xuXG5pbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IHBvc3Rjc3MgZnJvbSAncG9zdGNzcyc7XG5cbmltcG9ydCB7Z2V0TGluZUNvbnRlbnR9IGZyb20gJy4uL3V0aWwnO1xuXG4vKipcbiAqIOW9k+WJjeaWh+S7tuaJgOS7o+ihqOeahOinhOWImeWQjeensFxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgUlVMRU5BTUUgPSAncXVhbGlmaWVkLWhlYWRpbmdzJztcblxuLyoqXG4gKiDplJnor6/nmoTkv6Hmga9cbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmNvbnN0IE1TRyA9ICdIZWFkaW5ncyBzaG91bGQgbm90IGJlIHF1YWxpZmllZCAobmFtZXNwYWNlZCknO1xuXG4vKipcbiAqIGNzcyDnu4TlkIjnmoTmraPliJnljLnphY1cbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbmNvbnN0IFBBVFRFUk5fQ09NQklOQVRPUlMgPSAvW1xccz4rfl0rL2c7XG5cbi8qKlxuICog5YW35L2T55qE5qOA5rWL6YC76L6RXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMg5Y+C5pWwXG4gKiBAcGFyYW0geyp9IG9wdHMucnVsZVZhbCDlvZPliY3op4TliJnlhbfkvZPphY3nva7nmoTlgLxcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVDb250ZW50IOaWh+S7tuWGheWuuVxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZVBhdGgg5paH5Lu26Lev5b6EXG4gKi9cbmV4cG9ydCBjb25zdCBjaGVjayA9IHBvc3Rjc3MucGx1Z2luKFJVTEVOQU1FLCBvcHRzID0+XG4gICAgKGNzcywgcmVzdWx0KSA9PiB7XG5cbiAgICAgICAgaWYgKCFvcHRzLnJ1bGVWYWwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNzcy53YWxrUnVsZXMocnVsZSA9PiB7XG4gICAgICAgICAgICBpZiAoZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQgPj0gb3B0cy5tYXhFcnJvcikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3Qge3NlbGVjdG9yLCBzb3VyY2V9ID0gcnVsZTtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdG9yR3JvdXAgPSBzZWxlY3Rvci5zcGxpdCgnLCcpO1xuICAgICAgICAgICAgbGV0IGxpbmUgPSBzb3VyY2Uuc3RhcnQubGluZTtcbiAgICAgICAgICAgIGNvbnN0IGNvbCA9IHNvdXJjZS5zdGFydC5jb2x1bW47XG4gICAgICAgICAgICBsZXQgbGluZUNvbnRlbnQgPSBnZXRMaW5lQ29udGVudChsaW5lLCBzb3VyY2UuaW5wdXQuY3NzKTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNlbGVjdG9yR3JvdXAubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RvckluR3JvdXAgPSBzZWxlY3Rvckdyb3VwW2ldIHx8ICcnO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlZ21lbnRzID0gc2VsZWN0b3JJbkdyb3VwLnNwbGl0KFBBVFRFUk5fQ09NQklOQVRPUlMpO1xuXG4gICAgICAgICAgICAgICAgLy8g6Lez6L+H56ys5LiA5Liq77yM56ys5LiA5Liq5pivIGhbMS02XSDmmK/lkIjms5XnmoRcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMSwgc2VnbWVudExlbiA9IHNlZ21lbnRzLmxlbmd0aDsgaiA8IHNlZ21lbnRMZW47IGorKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWdtZW50ID0gc2VnbWVudHNbal07XG4gICAgICAgICAgICAgICAgICAgIGlmICgvaFsxLTZdLy50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3JJbkdyb3VwLnNsaWNlKDAsIDEpID09PSAnXFxuJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUgPSBsaW5lICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lQ29udGVudCA9IGdldExpbmVDb250ZW50KGxpbmUsIHNvdXJjZS5pbnB1dC5jc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lndhcm4oUlVMRU5BTUUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlOiBydWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGVOYW1lOiBSVUxFTkFNRSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lOiBsaW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbDogY29sICsgbGluZUNvbnRlbnQuaW5kZXhPZihzZWdtZW50KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBNU0csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JNZXNzYWdlOiAnYCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBsaW5lQ29udGVudC5yZXBsYWNlKHNlZ21lbnQsIGNoYWxrLm1hZ2VudGEoc2VnbWVudCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJ2AgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGNoYWxrLmdyZXkoTVNHKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbC5DU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbik7XG4iXX0=