'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'outline-none';

/**
 * 错误信息
 *
 * @const
 * @type {string}
 */
/**
 * @file outline-none 的检测逻辑
 *       Use of outline: none or outline: 0 should be limited to :focus rules
 *       https://github.com/CSSLint/csslint/wiki/Disallow-outline:none
 * @author ielgnaw(wuji0223@gmail.com)
 */

var MSG1 = 'Outlines should only be modified using :focus';

/**
 * 错误信息
 *
 * @const
 * @type {string}
 */
var MSG2 = 'Outlines shouldn\'t be hidden unless other visual changes are made';

var lastRule = void 0;

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {

        if (!opts.ruleVal) {
            return;
        }

        css.walkRules(function (rule) {
            if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                return;
            }

            var selector = rule.selector;
            if (selector) {
                lastRule = {
                    rule: rule,
                    selector: selector,
                    propCount: 0,
                    outline: false
                };
            } else {
                lastRule = null;
            }

            rule.walkDecls(function (decl) {
                var prop = decl.prop,
                    value = decl.value;

                if (lastRule) {
                    lastRule.propCount++;
                    if (prop === 'outline' && (value === 'none' || value.toString() === '0')) {
                        lastRule.outline = true;
                    }
                }
            });

            if (lastRule) {
                if (lastRule.outline) {
                    var source = lastRule.rule.source;
                    var line = source.start.line;
                    var col = source.start.column;
                    var lineContent = (0, _util.getLineContent)(line, source.input.css);
                    if (lastRule.selector.toLowerCase().indexOf(':focus') === -1) {
                        result.warn(RULENAME, {
                            node: lastRule.rule,
                            ruleName: RULENAME,
                            line: line,
                            col: col,
                            message: MSG1,
                            colorMessage: '`' + lineContent.replace(selector, _chalk2.default.magenta(selector)) + '` ' + _chalk2.default.grey(MSG1)
                        });

                        global.CSSHINT_INVALID_ALL_COUNT++;
                    } else if (lastRule.propCount === 1) {
                        result.warn(RULENAME, {
                            node: lastRule.rule,
                            ruleName: RULENAME,
                            line: line,
                            col: col,
                            message: MSG2,
                            colorMessage: '`' + lineContent.replace(selector, _chalk2.default.magenta(selector)) + '` ' + _chalk2.default.grey(MSG2)
                        });

                        global.CSSHINT_INVALID_ALL_COUNT++;
                    }
                }
            }
        });
    };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,