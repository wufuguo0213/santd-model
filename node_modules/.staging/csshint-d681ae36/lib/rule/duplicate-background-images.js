'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'duplicate-background-images';

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
/**
 * @file duplicate-background-images 的检测逻辑
 *       Every background-image should be unique. Use a common class for e.g. sprites
 *       https://github.com/CSSLint/csslint/wiki/Disallow-duplicate-background-images
 * @author ielgnaw(wuji0223@gmail.com)
 */

var MSG = 'Every background-image should be unique. Use a common class for e.g. sprites';

/**
 * 匹配 css 中 url 的正则
 *
 * @const
 * @type {RegExp}
 */
var PATTERN_URL = /\burl\s*\((["']?)([^\)]+)\1\)/g;

var stack = {};

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {

        if (!opts.ruleVal) {
            return;
        }

        stack = {};

        css.walkDecls(function (decl) {

            var prop = decl.prop;
            if (prop.match(/background/i)) {
                var value = decl.value;
                var match = null;
                /* eslint-disable no-extra-boolean-cast */
                while (!!(match = PATTERN_URL.exec(value))) {
                    if (typeof stack[match[2]] === 'undefined') {
                        stack[match[2]] = decl;
                    } else {
                        var str = 'Background image `' + match[2] + '` was used multiple times, first declared at line ' + stack[match[2]].source.start.line + ', col ' + stack[match[2]].source.start.column + '. ' + MSG;

                        var colorStr = 'Background image `' + _chalk2.default.magenta(match[2]) + '` was used multiple times, first declared at line ' + stack[match[2]].source.start.line + ', col ' + stack[match[2]].source.start.column + '. ' + _chalk2.default.grey(MSG);

                        var source = decl.source;
                        var line = source.start.line;
                        var lineContent = (0, _util.getLineContent)(line, source.input.css);
                        var col = lineContent.indexOf(match[2]) + 1;
                        result.warn(RULENAME, {
                            node: decl,
                            ruleName: RULENAME,
                            line: line,
                            col: col,
                            message: str,
                            colorMessage: colorStr
                        });
                        global.CSSHINT_INVALID_ALL_COUNT++;
                    }
                }
                /* eslint-enable no-extra-boolean-cast */
            }
        });
    };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL2R1cGxpY2F0ZS1iYWNrZ3JvdW5kLWltYWdlcy5qcyJdLCJuYW1lcyI6WyJSVUxFTkFNRSIsIk1TRyIsIlBBVFRFUk5fVVJMIiwic3RhY2siLCJjaGVjayIsInBvc3Rjc3MiLCJwbHVnaW4iLCJjc3MiLCJyZXN1bHQiLCJvcHRzIiwicnVsZVZhbCIsIndhbGtEZWNscyIsInByb3AiLCJkZWNsIiwibWF0Y2giLCJ2YWx1ZSIsImV4ZWMiLCJzdHIiLCJzb3VyY2UiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJjb2xvclN0ciIsImNoYWxrIiwibWFnZW50YSIsImdyZXkiLCJsaW5lQ29udGVudCIsImlucHV0IiwiY29sIiwiaW5kZXhPZiIsIndhcm4iLCJub2RlIiwicnVsZU5hbWUiLCJtZXNzYWdlIiwiY29sb3JNZXNzYWdlIiwiZ2xvYmFsIiwiQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQU9BOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUVBOzs7Ozs7QUFNQSxJQUFNQSxXQUFXLDZCQUFqQjs7QUFFQTs7Ozs7O0FBcEJBOzs7Ozs7O0FBMEJBLElBQU1DLE1BQU0sOEVBQVo7O0FBRUE7Ozs7OztBQU1BLElBQU1DLGNBQWMsZ0NBQXBCOztBQUVBLElBQUlDLFFBQVEsRUFBWjs7QUFFQTs7Ozs7Ozs7QUFRTyxJQUFNQyx3QkFBUUMsa0JBQVFDLE1BQVIsQ0FBZU4sUUFBZixFQUF5QjtBQUFBLFdBQzFDLFVBQUNPLEdBQUQsRUFBTUMsTUFBTixFQUFpQjs7QUFFYixZQUFJLENBQUNDLEtBQUtDLE9BQVYsRUFBbUI7QUFDZjtBQUNIOztBQUVEUCxnQkFBUSxFQUFSOztBQUVBSSxZQUFJSSxTQUFKLENBQWMsZ0JBQVE7O0FBRWxCLGdCQUFJQyxPQUFPQyxLQUFLRCxJQUFoQjtBQUNBLGdCQUFJQSxLQUFLRSxLQUFMLENBQVcsYUFBWCxDQUFKLEVBQStCO0FBQzNCLG9CQUFNQyxRQUFRRixLQUFLRSxLQUFuQjtBQUNBLG9CQUFJRCxRQUFRLElBQVo7QUFDQTtBQUNBLHVCQUFPLENBQUMsRUFBRUEsUUFBUVosWUFBWWMsSUFBWixDQUFpQkQsS0FBakIsQ0FBVixDQUFSLEVBQTRDO0FBQ3hDLHdCQUFJLE9BQU9aLE1BQU1XLE1BQU0sQ0FBTixDQUFOLENBQVAsS0FBMkIsV0FBL0IsRUFBNEM7QUFDeENYLDhCQUFNVyxNQUFNLENBQU4sQ0FBTixJQUFrQkQsSUFBbEI7QUFDSCxxQkFGRCxNQUdLO0FBQ0QsNEJBQU1JLE1BQU0sdUJBQ05ILE1BQU0sQ0FBTixDQURNLEdBRU4sb0RBRk0sR0FHTlgsTUFBTVcsTUFBTSxDQUFOLENBQU4sRUFBZ0JJLE1BQWhCLENBQXVCQyxLQUF2QixDQUE2QkMsSUFIdkIsR0FJTixRQUpNLEdBS05qQixNQUFNVyxNQUFNLENBQU4sQ0FBTixFQUFnQkksTUFBaEIsQ0FBdUJDLEtBQXZCLENBQTZCRSxNQUx2QixHQU1OLElBTk0sR0FPTnBCLEdBUE47O0FBU0EsNEJBQU1xQixXQUFXLHVCQUNYQyxnQkFBTUMsT0FBTixDQUFjVixNQUFNLENBQU4sQ0FBZCxDQURXLEdBRVgsb0RBRlcsR0FHWFgsTUFBTVcsTUFBTSxDQUFOLENBQU4sRUFBZ0JJLE1BQWhCLENBQXVCQyxLQUF2QixDQUE2QkMsSUFIbEIsR0FJWCxRQUpXLEdBS1hqQixNQUFNVyxNQUFNLENBQU4sQ0FBTixFQUFnQkksTUFBaEIsQ0FBdUJDLEtBQXZCLENBQTZCRSxNQUxsQixHQU1YLElBTlcsR0FPWEUsZ0JBQU1FLElBQU4sQ0FBV3hCLEdBQVgsQ0FQTjs7QUFTQSw0QkFBTWlCLFNBQVNMLEtBQUtLLE1BQXBCO0FBQ0EsNEJBQU1FLE9BQU9GLE9BQU9DLEtBQVAsQ0FBYUMsSUFBMUI7QUFDQSw0QkFBTU0sY0FBYywwQkFBZU4sSUFBZixFQUFxQkYsT0FBT1MsS0FBUCxDQUFhcEIsR0FBbEMsQ0FBcEI7QUFDQSw0QkFBTXFCLE1BQU1GLFlBQVlHLE9BQVosQ0FBb0JmLE1BQU0sQ0FBTixDQUFwQixJQUFnQyxDQUE1QztBQUNBTiwrQkFBT3NCLElBQVAsQ0FBWTlCLFFBQVosRUFBc0I7QUFDbEIrQixrQ0FBTWxCLElBRFk7QUFFbEJtQixzQ0FBVWhDLFFBRlE7QUFHbEJvQixrQ0FBTUEsSUFIWTtBQUlsQlEsaUNBQUtBLEdBSmE7QUFLbEJLLHFDQUFTaEIsR0FMUztBQU1sQmlCLDBDQUFjWjtBQU5JLHlCQUF0QjtBQVFBYSwrQkFBT0MseUJBQVA7QUFDSDtBQUNKO0FBQ0Q7QUFDSDtBQUNKLFNBL0NEO0FBZ0RILEtBekR5QztBQUFBLENBQXpCLENBQWQiLCJmaWxlIjoiZHVwbGljYXRlLWJhY2tncm91bmQtaW1hZ2VzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBkdXBsaWNhdGUtYmFja2dyb3VuZC1pbWFnZXMg55qE5qOA5rWL6YC76L6RXG4gKiAgICAgICBFdmVyeSBiYWNrZ3JvdW5kLWltYWdlIHNob3VsZCBiZSB1bmlxdWUuIFVzZSBhIGNvbW1vbiBjbGFzcyBmb3IgZS5nLiBzcHJpdGVzXG4gKiAgICAgICBodHRwczovL2dpdGh1Yi5jb20vQ1NTTGludC9jc3NsaW50L3dpa2kvRGlzYWxsb3ctZHVwbGljYXRlLWJhY2tncm91bmQtaW1hZ2VzXG4gKiBAYXV0aG9yIGllbGduYXcod3VqaTAyMjNAZ21haWwuY29tKVxuICovXG5cbmltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgcG9zdGNzcyBmcm9tICdwb3N0Y3NzJztcblxuaW1wb3J0IHtnZXRMaW5lQ29udGVudH0gZnJvbSAnLi4vdXRpbCc7XG5cbi8qKlxuICog5b2T5YmN5paH5Lu25omA5Luj6KGo55qE6KeE5YiZ5ZCN56ewXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBSVUxFTkFNRSA9ICdkdXBsaWNhdGUtYmFja2dyb3VuZC1pbWFnZXMnO1xuXG4vKipcbiAqIOmUmeivr+eahOS/oeaBr1xuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgTVNHID0gJ0V2ZXJ5IGJhY2tncm91bmQtaW1hZ2Ugc2hvdWxkIGJlIHVuaXF1ZS4gVXNlIGEgY29tbW9uIGNsYXNzIGZvciBlLmcuIHNwcml0ZXMnO1xuXG4vKipcbiAqIOWMuemFjSBjc3Mg5LitIHVybCDnmoTmraPliJlcbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbmNvbnN0IFBBVFRFUk5fVVJMID0gL1xcYnVybFxccypcXCgoW1wiJ10/KShbXlxcKV0rKVxcMVxcKS9nO1xuXG5sZXQgc3RhY2sgPSB7fTtcblxuLyoqXG4gKiDlhbfkvZPnmoTmo4DmtYvpgLvovpFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyDlj4LmlbBcbiAqIEBwYXJhbSB7Kn0gb3B0cy5ydWxlVmFsIOW9k+WJjeinhOWImeWFt+S9k+mFjee9rueahOWAvFxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZUNvbnRlbnQg5paH5Lu25YaF5a65XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlUGF0aCDmlofku7bot6/lvoRcbiAqL1xuZXhwb3J0IGNvbnN0IGNoZWNrID0gcG9zdGNzcy5wbHVnaW4oUlVMRU5BTUUsIG9wdHMgPT5cbiAgICAoY3NzLCByZXN1bHQpID0+IHtcblxuICAgICAgICBpZiAoIW9wdHMucnVsZVZhbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhY2sgPSB7fTtcblxuICAgICAgICBjc3Mud2Fsa0RlY2xzKGRlY2wgPT4ge1xuXG4gICAgICAgICAgICBsZXQgcHJvcCA9IGRlY2wucHJvcDtcbiAgICAgICAgICAgIGlmIChwcm9wLm1hdGNoKC9iYWNrZ3JvdW5kL2kpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBkZWNsLnZhbHVlO1xuICAgICAgICAgICAgICAgIGxldCBtYXRjaCA9IG51bGw7XG4gICAgICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tZXh0cmEtYm9vbGVhbi1jYXN0ICovXG4gICAgICAgICAgICAgICAgd2hpbGUgKCEhKG1hdGNoID0gUEFUVEVSTl9VUkwuZXhlYyh2YWx1ZSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RhY2tbbWF0Y2hbMl1dID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2tbbWF0Y2hbMl1dID0gZGVjbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0ciA9ICdCYWNrZ3JvdW5kIGltYWdlIGAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBtYXRjaFsyXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJ2Agd2FzIHVzZWQgbXVsdGlwbGUgdGltZXMsIGZpcnN0IGRlY2xhcmVkIGF0IGxpbmUgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgc3RhY2tbbWF0Y2hbMl1dLnNvdXJjZS5zdGFydC5saW5lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnLCBjb2wgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgc3RhY2tbbWF0Y2hbMl1dLnNvdXJjZS5zdGFydC5jb2x1bW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICcuICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIE1TRztcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sb3JTdHIgPSAnQmFja2dyb3VuZCBpbWFnZSBgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgY2hhbGsubWFnZW50YShtYXRjaFsyXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICdgIHdhcyB1c2VkIG11bHRpcGxlIHRpbWVzLCBmaXJzdCBkZWNsYXJlZCBhdCBsaW5lICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIHN0YWNrW21hdGNoWzJdXS5zb3VyY2Uuc3RhcnQubGluZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJywgY29sICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIHN0YWNrW21hdGNoWzJdXS5zb3VyY2Uuc3RhcnQuY29sdW1uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnLiAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBjaGFsay5ncmV5KE1TRyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IGRlY2wuc291cmNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZSA9IHNvdXJjZS5zdGFydC5saW5lO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZUNvbnRlbnQgPSBnZXRMaW5lQ29udGVudChsaW5lLCBzb3VyY2UuaW5wdXQuY3NzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbCA9IGxpbmVDb250ZW50LmluZGV4T2YobWF0Y2hbMl0pICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC53YXJuKFJVTEVOQU1FLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZTogZGVjbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlTmFtZTogUlVMRU5BTUUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogbGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2w6IGNvbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBzdHIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JNZXNzYWdlOiBjb2xvclN0clxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tZXh0cmEtYm9vbGVhbi1jYXN0ICovXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbik7XG4iXX0=