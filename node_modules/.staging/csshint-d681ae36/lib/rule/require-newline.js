'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'require-newline';

/**
 * 判断逗号后面没有跟着换行符的正则
 * 如果未匹配，则说明逗号后面有换行符
 *
 * @const
 * @type {RegExp}
 */
/**
 * @file require-newline 的检测逻辑
 *       `selector` 对应 008: [强制] 当一个 rule 包含多个 selector 时，每个选择器声明必须独占一行。
 *       `property` 对应 011: [强制] 属性定义必须另起一行。
 *       `media-query-condition` 对应 044: [强制] `Media Query` 如果有多个逗号分隔的条件时，应将每个条件放在单独一行中。
 * @author ielgnaw(wuji0223@gmail.com)
 */

var PATTERN_NOTLF = /(,(?!\s*\n))/;

/**
 * 错误信息
 *
 * @const
 * @type {string}
 */
var MEDIA_MSG = '' + '`Media Query` if there is more than one comma separated condition,' + ' should put each on a separate line condition';

/**
 * 错误信息
 *
 * @const
 * @type {string}
 */
var SELECTOR_MSG = '' + 'When a rule contains multiple selector, ' + 'each selector statement must be on a separate line';

/**
 * 错误信息
 *
 * @const
 * @type {string}
 */
var PROPERTY_MSG = 'The attribute definition must be on a new line';

var arrayProto = Array.prototype;

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {

        var ruleVal = opts.ruleVal;
        var realRuleVal = [];
        arrayProto.push[Array.isArray(ruleVal) ? 'apply' : 'call'](realRuleVal, ruleVal);

        if (realRuleVal.length) {

            var source = void 0;
            var line = void 0;
            var lineContent = void 0;
            var col = void 0;

            if (realRuleVal.indexOf('selector') > -1) {
                css.walkRules(function (rule) {
                    if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                        return;
                    }

                    var selector = rule.selector;
                    if (PATTERN_NOTLF.test(selector)) {
                        source = rule.source;
                        line = source.start.line;
                        lineContent = (0, _util.getLineContent)(line, source.input.css);
                        col = source.start.column;
                        // 如果是 `p, i, \n.cc` 这样的选择器，那么高亮就应该把后面的 `\n.cc` 去掉
                        // 直接用 lineContent 来匹配 `p, i, \n.cc` 无法高亮
                        var colorStr = selector.replace(/\n.*/, '');
                        result.warn(RULENAME, {
                            node: rule,
                            ruleName: RULENAME,
                            errorChar: 'selector',
                            line: line,
                            col: col,
                            message: SELECTOR_MSG,
                            colorMessage: '`' + lineContent.replace(colorStr, _chalk2.default.magenta(colorStr)) + '` ' + _chalk2.default.grey(SELECTOR_MSG)
                        });
                        global.CSSHINT_INVALID_ALL_COUNT++;
                    }
                });
            }

            if (realRuleVal.indexOf('media-query-condition') > -1) {
                if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                    return;
                }

                css.walkAtRules(function (atRule) {
                    if (atRule.name !== 'media') {
                        return;
                    }
                    var params = atRule.params;
                    if (PATTERN_NOTLF.test(params)) {
                        source = atRule.source;
                        line = source.start.line;
                        lineContent = (0, _util.getLineContent)(line, source.input.css);
                        col = source.start.column;

                        var colorStr = params.replace(/\n.*/, '');
                        result.warn(RULENAME, {
                            node: atRule,
                            ruleName: RULENAME,
                            errorChar: 'media-query-condition',
                            line: line,
                            col: col,
                            message: MEDIA_MSG,
                            colorMessage: '`' + lineContent.replace('@media', _chalk2.default.magenta('@media')).replace(colorStr, _chalk2.default.magenta(colorStr)) + '` ' + _chalk2.default.grey(MEDIA_MSG)
                        });
                        global.CSSHINT_INVALID_ALL_COUNT++;
                    }
                });
            }

            if (realRuleVal.indexOf('property') > -1) {
                css.walkDecls(function (decl) {
                    if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                        return;
                    }

                    var before = decl.raws.before;
                    if (before.indexOf('\n') === -1) {
                        source = decl.source;
                        line = source.start.line;
                        lineContent = (0, _util.getLineContent)(line, source.input.css);
                        col = source.start.column;
                        result.warn(RULENAME, {
                            node: decl,
                            ruleName: RULENAME,
                            errorChar: 'property',
                            line: line,
                            col: col,
                            message: PROPERTY_MSG,
                            colorMessage: '`' + (0, _util.changeColorByStartAndEndIndex)(lineContent, col, source.end.column) + '` ' + _chalk2.default.grey(PROPERTY_MSG)
                        });

                        global.CSSHINT_INVALID_ALL_COUNT++;
                    }
                });
            }
        }
    };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,