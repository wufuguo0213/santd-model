'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'hex-color';

/**
 * 匹配 rgb, hsl 颜色表达式的正则
 *
 * @const
 * @type {RegExp}
 */
/**
 * @file hex-color 的检测逻辑
 *       029: [强制] RGB颜色值必须使用十六进制记号形式 `#rrggbb`。不允许使用 `rgb()`。
 * @author ielgnaw(wuji0223@gmail.com)
 */

var PATTERN_COLOR_EXP = /(\brgb\b|\bhsl\b)/gi;

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
var MSG = '' + 'Color value must use the sixteen hexadecimal mark forms such as `#RGB`.' + ' Don\'t use RGB、HSL expression';

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {

        if (opts.ruleVal) {

            css.walkDecls(function (decl) {
                if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                    return;
                }

                var match = null;
                /* eslint-disable no-extra-boolean-cast */
                while (!!(match = PATTERN_COLOR_EXP.exec(decl.value))) {
                    var source = decl.source;
                    var line = source.start.line;
                    var lineContent = (0, _util.getLineContent)(line, source.input.css);
                    var col = source.start.column + decl.prop.length + decl.raws.between.length + match.index;
                    result.warn(RULENAME, {
                        node: decl,
                        ruleName: RULENAME,
                        line: line,
                        col: col,
                        message: MSG,
                        colorMessage: '`' + (0, _util.changeColorByStartAndEndIndex)(lineContent, col, source.end.column) + '` ' + _chalk2.default.grey(MSG)
                    });
                    global.CSSHINT_INVALID_ALL_COUNT++;
                }
                /* eslint-enable no-extra-boolean-cast */
            });
        }
    };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL2hleC1jb2xvci5qcyJdLCJuYW1lcyI6WyJSVUxFTkFNRSIsIlBBVFRFUk5fQ09MT1JfRVhQIiwiTVNHIiwiY2hlY2siLCJwb3N0Y3NzIiwicGx1Z2luIiwiY3NzIiwicmVzdWx0Iiwib3B0cyIsInJ1bGVWYWwiLCJ3YWxrRGVjbHMiLCJnbG9iYWwiLCJDU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UIiwibWF4RXJyb3IiLCJtYXRjaCIsImV4ZWMiLCJkZWNsIiwidmFsdWUiLCJzb3VyY2UiLCJsaW5lIiwic3RhcnQiLCJsaW5lQ29udGVudCIsImlucHV0IiwiY29sIiwiY29sdW1uIiwicHJvcCIsImxlbmd0aCIsInJhd3MiLCJiZXR3ZWVuIiwiaW5kZXgiLCJ3YXJuIiwibm9kZSIsInJ1bGVOYW1lIiwibWVzc2FnZSIsImNvbG9yTWVzc2FnZSIsImVuZCIsImNoYWxrIiwiZ3JleSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQU1BOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUVBOzs7Ozs7QUFNQSxJQUFNQSxXQUFXLFdBQWpCOztBQUVBOzs7Ozs7QUFuQkE7Ozs7OztBQXlCQSxJQUFNQyxvQkFBb0IscUJBQTFCOztBQUVBOzs7Ozs7QUFNQSxJQUFNQyxNQUFNLEtBQ04seUVBRE0sR0FFTixnQ0FGTjs7QUFJQTs7Ozs7Ozs7QUFRTyxJQUFNQyx3QkFBUUMsa0JBQVFDLE1BQVIsQ0FBZUwsUUFBZixFQUF5QjtBQUFBLFdBQzFDLFVBQUNNLEdBQUQsRUFBTUMsTUFBTixFQUFpQjs7QUFFYixZQUFJQyxLQUFLQyxPQUFULEVBQWtCOztBQUVkSCxnQkFBSUksU0FBSixDQUFjLGdCQUFRO0FBQ2xCLG9CQUFJQyxPQUFPQyx5QkFBUCxJQUFvQ0osS0FBS0ssUUFBN0MsRUFBdUQ7QUFDbkQ7QUFDSDs7QUFFRCxvQkFBSUMsUUFBUSxJQUFaO0FBQ0E7QUFDQSx1QkFBTyxDQUFDLEVBQUVBLFFBQVFiLGtCQUFrQmMsSUFBbEIsQ0FBdUJDLEtBQUtDLEtBQTVCLENBQVYsQ0FBUixFQUF1RDtBQUNuRCx3QkFBTUMsU0FBU0YsS0FBS0UsTUFBcEI7QUFDQSx3QkFBTUMsT0FBT0QsT0FBT0UsS0FBUCxDQUFhRCxJQUExQjtBQUNBLHdCQUFNRSxjQUFjLDBCQUFlRixJQUFmLEVBQXFCRCxPQUFPSSxLQUFQLENBQWFoQixHQUFsQyxDQUFwQjtBQUNBLHdCQUFNaUIsTUFBTUwsT0FBT0UsS0FBUCxDQUFhSSxNQUFiLEdBQXNCUixLQUFLUyxJQUFMLENBQVVDLE1BQWhDLEdBQXlDVixLQUFLVyxJQUFMLENBQVVDLE9BQVYsQ0FBa0JGLE1BQTNELEdBQW9FWixNQUFNZSxLQUF0RjtBQUNBdEIsMkJBQU91QixJQUFQLENBQVk5QixRQUFaLEVBQXNCO0FBQ2xCK0IsOEJBQU1mLElBRFk7QUFFbEJnQixrQ0FBVWhDLFFBRlE7QUFHbEJtQiw4QkFBTUEsSUFIWTtBQUlsQkksNkJBQUtBLEdBSmE7QUFLbEJVLGlDQUFTL0IsR0FMUztBQU1sQmdDLHNDQUFjLE1BQ1IseUNBQ0ViLFdBREYsRUFDZUUsR0FEZixFQUNvQkwsT0FBT2lCLEdBQVAsQ0FBV1gsTUFEL0IsQ0FEUSxHQUlSLElBSlEsR0FLUlksZ0JBQU1DLElBQU4sQ0FBV25DLEdBQVg7QUFYWSxxQkFBdEI7QUFhQVMsMkJBQU9DLHlCQUFQO0FBQ0g7QUFDRDtBQUNILGFBNUJEO0FBNkJIO0FBQ0osS0FuQ3lDO0FBQUEsQ0FBekIsQ0FBZCIsImZpbGUiOiJoZXgtY29sb3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIGhleC1jb2xvciDnmoTmo4DmtYvpgLvovpFcbiAqICAgICAgIDAyOTogW+W8uuWItl0gUkdC6aKc6Imy5YC85b+F6aG75L2/55So5Y2B5YWt6L+b5Yi26K6w5Y+35b2i5byPIGAjcnJnZ2JiYOOAguS4jeWFgeiuuOS9v+eUqCBgcmdiKClg44CCXG4gKiBAYXV0aG9yIGllbGduYXcod3VqaTAyMjNAZ21haWwuY29tKVxuICovXG5cbmltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgcG9zdGNzcyBmcm9tICdwb3N0Y3NzJztcblxuaW1wb3J0IHtnZXRMaW5lQ29udGVudCwgY2hhbmdlQ29sb3JCeVN0YXJ0QW5kRW5kSW5kZXh9IGZyb20gJy4uL3V0aWwnO1xuXG4vKipcbiAqIOW9k+WJjeaWh+S7tuaJgOS7o+ihqOeahOinhOWImeWQjeensFxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgUlVMRU5BTUUgPSAnaGV4LWNvbG9yJztcblxuLyoqXG4gKiDljLnphY0gcmdiLCBoc2wg6aKc6Imy6KGo6L6+5byP55qE5q2j5YiZXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG5jb25zdCBQQVRURVJOX0NPTE9SX0VYUCA9IC8oXFxicmdiXFxifFxcYmhzbFxcYikvZ2k7XG5cbi8qKlxuICog6ZSZ6K+v55qE5L+h5oGvXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBNU0cgPSAnJ1xuICAgICsgJ0NvbG9yIHZhbHVlIG11c3QgdXNlIHRoZSBzaXh0ZWVuIGhleGFkZWNpbWFsIG1hcmsgZm9ybXMgc3VjaCBhcyBgI1JHQmAuJ1xuICAgICsgJyBEb25cXCd0IHVzZSBSR0LjgIFIU0wgZXhwcmVzc2lvbic7XG5cbi8qKlxuICog5YW35L2T55qE5qOA5rWL6YC76L6RXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMg5Y+C5pWwXG4gKiBAcGFyYW0geyp9IG9wdHMucnVsZVZhbCDlvZPliY3op4TliJnlhbfkvZPphY3nva7nmoTlgLxcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVDb250ZW50IOaWh+S7tuWGheWuuVxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZVBhdGgg5paH5Lu26Lev5b6EXG4gKi9cbmV4cG9ydCBjb25zdCBjaGVjayA9IHBvc3Rjc3MucGx1Z2luKFJVTEVOQU1FLCBvcHRzID0+XG4gICAgKGNzcywgcmVzdWx0KSA9PiB7XG5cbiAgICAgICAgaWYgKG9wdHMucnVsZVZhbCkge1xuXG4gICAgICAgICAgICBjc3Mud2Fsa0RlY2xzKGRlY2wgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCA+PSBvcHRzLm1heEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgbWF0Y2ggPSBudWxsO1xuICAgICAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWV4dHJhLWJvb2xlYW4tY2FzdCAqL1xuICAgICAgICAgICAgICAgIHdoaWxlICghIShtYXRjaCA9IFBBVFRFUk5fQ09MT1JfRVhQLmV4ZWMoZGVjbC52YWx1ZSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IGRlY2wuc291cmNlO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gc291cmNlLnN0YXJ0LmxpbmU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVDb250ZW50ID0gZ2V0TGluZUNvbnRlbnQobGluZSwgc291cmNlLmlucHV0LmNzcyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbCA9IHNvdXJjZS5zdGFydC5jb2x1bW4gKyBkZWNsLnByb3AubGVuZ3RoICsgZGVjbC5yYXdzLmJldHdlZW4ubGVuZ3RoICsgbWF0Y2guaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC53YXJuKFJVTEVOQU1FLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlOiBkZWNsLFxuICAgICAgICAgICAgICAgICAgICAgICAgcnVsZU5hbWU6IFJVTEVOQU1FLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogbGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbDogY29sLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogTVNHLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JNZXNzYWdlOiAnYCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGNoYW5nZUNvbG9yQnlTdGFydEFuZEVuZEluZGV4KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lQ29udGVudCwgY29sLCBzb3VyY2UuZW5kLmNvbHVtblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICdgICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGNoYWxrLmdyZXkoTVNHKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1leHRyYS1ib29sZWFuLWNhc3QgKi9cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuKTtcbiJdfQ==