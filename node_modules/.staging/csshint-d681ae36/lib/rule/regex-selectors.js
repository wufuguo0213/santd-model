'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'regex-selectors';

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
/**
 * @file regex-selectors 的检测逻辑
 *       Selectors that look like regular expressions are slow and should be avoided
 *       https://github.com/CSSLint/csslint/wiki/Disallow-selectors-that-look-like-regular-expressions
 * @author ielgnaw(wuji0223@gmail.com)
 */

var MSG = 'Selectors that look like regular expressions are slow and should be avoided';

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {

        if (opts.ruleVal) {

            css.walkRules(function (rule) {
                if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                    return;
                }

                var selector = rule.selector,
                    source = rule.source;


                var selectorGroup = selector.split(',');
                var line = source.start.line;
                var lineContent = (0, _util.getLineContent)(line, source.input.css);

                for (var i = 0, len = selectorGroup.length; i < len; i++) {
                    var selectorInGroup = selectorGroup[i] || '';
                    var attrs = selectorInGroup.match(/\[.+?\](?::[^\s>+~\.#\[]+)?/g);
                    if (!attrs) {
                        continue;
                    }

                    if (selectorInGroup.slice(0, 1) === '\n') {
                        line = line + 1;
                        lineContent = (0, _util.getLineContent)(line, source.input.css);
                    }

                    for (var j = 0, attrsLen = attrs.length; j < attrsLen; j++) {
                        var attr = attrs[j];
                        if (/([\~\|\^\$\*]=)/.test(attr)) {
                            var col = lineContent.indexOf(attr) + 1;
                            result.warn(RULENAME, {
                                node: rule,
                                ruleName: RULENAME,
                                line: line,
                                col: col,
                                message: MSG,
                                colorMessage: '`' + lineContent.replace(attr, _chalk2.default.magenta(attr)) + '` ' + _chalk2.default.grey(MSG)
                            });

                            global.CSSHINT_INVALID_ALL_COUNT++;
                        }
                    }
                }
            });
        }
    };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL3JlZ2V4LXNlbGVjdG9ycy5qcyJdLCJuYW1lcyI6WyJSVUxFTkFNRSIsIk1TRyIsImNoZWNrIiwicG9zdGNzcyIsInBsdWdpbiIsImNzcyIsInJlc3VsdCIsIm9wdHMiLCJydWxlVmFsIiwid2Fsa1J1bGVzIiwiZ2xvYmFsIiwiQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCIsIm1heEVycm9yIiwic2VsZWN0b3IiLCJydWxlIiwic291cmNlIiwic2VsZWN0b3JHcm91cCIsInNwbGl0IiwibGluZSIsInN0YXJ0IiwibGluZUNvbnRlbnQiLCJpbnB1dCIsImkiLCJsZW4iLCJsZW5ndGgiLCJzZWxlY3RvckluR3JvdXAiLCJhdHRycyIsIm1hdGNoIiwic2xpY2UiLCJqIiwiYXR0cnNMZW4iLCJhdHRyIiwidGVzdCIsImNvbCIsImluZGV4T2YiLCJ3YXJuIiwibm9kZSIsInJ1bGVOYW1lIiwibWVzc2FnZSIsImNvbG9yTWVzc2FnZSIsInJlcGxhY2UiLCJjaGFsayIsIm1hZ2VudGEiLCJncmV5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBT0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBRUE7Ozs7OztBQU1BLElBQU1BLFdBQVcsaUJBQWpCOztBQUVBOzs7Ozs7QUFwQkE7Ozs7Ozs7QUEwQkEsSUFBTUMsTUFBTSw2RUFBWjs7QUFFQTs7Ozs7Ozs7QUFRTyxJQUFNQyx3QkFBUUMsa0JBQVFDLE1BQVIsQ0FBZUosUUFBZixFQUF5QjtBQUFBLFdBQzFDLFVBQUNLLEdBQUQsRUFBTUMsTUFBTixFQUFpQjs7QUFFYixZQUFJQyxLQUFLQyxPQUFULEVBQWtCOztBQUVkSCxnQkFBSUksU0FBSixDQUFjLGdCQUFRO0FBQ2xCLG9CQUFJQyxPQUFPQyx5QkFBUCxJQUFvQ0osS0FBS0ssUUFBN0MsRUFBdUQ7QUFDbkQ7QUFDSDs7QUFIaUIsb0JBS1hDLFFBTFcsR0FLU0MsSUFMVCxDQUtYRCxRQUxXO0FBQUEsb0JBS0RFLE1BTEMsR0FLU0QsSUFMVCxDQUtEQyxNQUxDOzs7QUFPbEIsb0JBQU1DLGdCQUFnQkgsU0FBU0ksS0FBVCxDQUFlLEdBQWYsQ0FBdEI7QUFDQSxvQkFBSUMsT0FBT0gsT0FBT0ksS0FBUCxDQUFhRCxJQUF4QjtBQUNBLG9CQUFJRSxjQUFjLDBCQUFlRixJQUFmLEVBQXFCSCxPQUFPTSxLQUFQLENBQWFoQixHQUFsQyxDQUFsQjs7QUFFQSxxQkFBSyxJQUFJaUIsSUFBSSxDQUFSLEVBQVdDLE1BQU1QLGNBQWNRLE1BQXBDLEVBQTRDRixJQUFJQyxHQUFoRCxFQUFxREQsR0FBckQsRUFBMEQ7QUFDdEQsd0JBQU1HLGtCQUFrQlQsY0FBY00sQ0FBZCxLQUFvQixFQUE1QztBQUNBLHdCQUFNSSxRQUFRRCxnQkFBZ0JFLEtBQWhCLENBQXNCLDhCQUF0QixDQUFkO0FBQ0Esd0JBQUksQ0FBQ0QsS0FBTCxFQUFZO0FBQ1I7QUFDSDs7QUFFRCx3QkFBSUQsZ0JBQWdCRyxLQUFoQixDQUFzQixDQUF0QixFQUF5QixDQUF6QixNQUFnQyxJQUFwQyxFQUEwQztBQUN0Q1YsK0JBQU9BLE9BQU8sQ0FBZDtBQUNBRSxzQ0FBYywwQkFBZUYsSUFBZixFQUFxQkgsT0FBT00sS0FBUCxDQUFhaEIsR0FBbEMsQ0FBZDtBQUNIOztBQUVELHlCQUFLLElBQUl3QixJQUFJLENBQVIsRUFBV0MsV0FBV0osTUFBTUYsTUFBakMsRUFBeUNLLElBQUlDLFFBQTdDLEVBQXVERCxHQUF2RCxFQUE0RDtBQUN4RCw0QkFBTUUsT0FBT0wsTUFBTUcsQ0FBTixDQUFiO0FBQ0EsNEJBQUksa0JBQWtCRyxJQUFsQixDQUF1QkQsSUFBdkIsQ0FBSixFQUFrQztBQUM5QixnQ0FBTUUsTUFBTWIsWUFBWWMsT0FBWixDQUFvQkgsSUFBcEIsSUFBNEIsQ0FBeEM7QUFDQXpCLG1DQUFPNkIsSUFBUCxDQUFZbkMsUUFBWixFQUFzQjtBQUNsQm9DLHNDQUFNdEIsSUFEWTtBQUVsQnVCLDBDQUFVckMsUUFGUTtBQUdsQmtCLHNDQUFNQSxJQUhZO0FBSWxCZSxxQ0FBS0EsR0FKYTtBQUtsQksseUNBQVNyQyxHQUxTO0FBTWxCc0MsOENBQWMsTUFDUm5CLFlBQVlvQixPQUFaLENBQW9CVCxJQUFwQixFQUEwQlUsZ0JBQU1DLE9BQU4sQ0FBY1gsSUFBZCxDQUExQixDQURRLEdBRVIsSUFGUSxHQUdSVSxnQkFBTUUsSUFBTixDQUFXMUMsR0FBWDtBQVRZLDZCQUF0Qjs7QUFZQVMsbUNBQU9DLHlCQUFQO0FBQ0g7QUFDSjtBQUVKO0FBQ0osYUE1Q0Q7QUE2Q0g7QUFDSixLQW5EeUM7QUFBQSxDQUF6QixDQUFkIiwiZmlsZSI6InJlZ2V4LXNlbGVjdG9ycy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgcmVnZXgtc2VsZWN0b3JzIOeahOajgOa1i+mAu+i+kVxuICogICAgICAgU2VsZWN0b3JzIHRoYXQgbG9vayBsaWtlIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXJlIHNsb3cgYW5kIHNob3VsZCBiZSBhdm9pZGVkXG4gKiAgICAgICBodHRwczovL2dpdGh1Yi5jb20vQ1NTTGludC9jc3NsaW50L3dpa2kvRGlzYWxsb3ctc2VsZWN0b3JzLXRoYXQtbG9vay1saWtlLXJlZ3VsYXItZXhwcmVzc2lvbnNcbiAqIEBhdXRob3IgaWVsZ25hdyh3dWppMDIyM0BnbWFpbC5jb20pXG4gKi9cblxuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCBwb3N0Y3NzIGZyb20gJ3Bvc3Rjc3MnO1xuXG5pbXBvcnQge2dldExpbmVDb250ZW50fSBmcm9tICcuLi91dGlsJztcblxuLyoqXG4gKiDlvZPliY3mlofku7bmiYDku6PooajnmoTop4TliJnlkI3np7BcbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmNvbnN0IFJVTEVOQU1FID0gJ3JlZ2V4LXNlbGVjdG9ycyc7XG5cbi8qKlxuICog6ZSZ6K+v55qE5L+h5oGvXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBNU0cgPSAnU2VsZWN0b3JzIHRoYXQgbG9vayBsaWtlIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXJlIHNsb3cgYW5kIHNob3VsZCBiZSBhdm9pZGVkJztcblxuLyoqXG4gKiDlhbfkvZPnmoTmo4DmtYvpgLvovpFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyDlj4LmlbBcbiAqIEBwYXJhbSB7Kn0gb3B0cy5ydWxlVmFsIOW9k+WJjeinhOWImeWFt+S9k+mFjee9rueahOWAvFxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZUNvbnRlbnQg5paH5Lu25YaF5a65XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlUGF0aCDmlofku7bot6/lvoRcbiAqL1xuZXhwb3J0IGNvbnN0IGNoZWNrID0gcG9zdGNzcy5wbHVnaW4oUlVMRU5BTUUsIG9wdHMgPT5cbiAgICAoY3NzLCByZXN1bHQpID0+IHtcblxuICAgICAgICBpZiAob3B0cy5ydWxlVmFsKSB7XG5cbiAgICAgICAgICAgIGNzcy53YWxrUnVsZXMocnVsZSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGdsb2JhbC5DU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UID49IG9wdHMubWF4RXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IHtzZWxlY3Rvciwgc291cmNlfSA9IHJ1bGU7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3Rvckdyb3VwID0gc2VsZWN0b3Iuc3BsaXQoJywnKTtcbiAgICAgICAgICAgICAgICBsZXQgbGluZSA9IHNvdXJjZS5zdGFydC5saW5lO1xuICAgICAgICAgICAgICAgIGxldCBsaW5lQ29udGVudCA9IGdldExpbmVDb250ZW50KGxpbmUsIHNvdXJjZS5pbnB1dC5jc3MpO1xuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNlbGVjdG9yR3JvdXAubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0b3JJbkdyb3VwID0gc2VsZWN0b3JHcm91cFtpXSB8fCAnJztcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXR0cnMgPSBzZWxlY3RvckluR3JvdXAubWF0Y2goL1xcWy4rP1xcXSg/OjpbXlxccz4rflxcLiNcXFtdKyk/L2cpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWF0dHJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RvckluR3JvdXAuc2xpY2UoMCwgMSkgPT09ICdcXG4nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lID0gbGluZSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lQ29udGVudCA9IGdldExpbmVDb250ZW50KGxpbmUsIHNvdXJjZS5pbnB1dC5jc3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDAsIGF0dHJzTGVuID0gYXR0cnMubGVuZ3RoOyBqIDwgYXR0cnNMZW47IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXR0ciA9IGF0dHJzW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC8oW1xcflxcfFxcXlxcJFxcKl09KS8udGVzdChhdHRyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbCA9IGxpbmVDb250ZW50LmluZGV4T2YoYXR0cikgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC53YXJuKFJVTEVOQU1FLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU6IHJ1bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGVOYW1lOiBSVUxFTkFNRSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogbGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sOiBjb2wsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IE1TRyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JNZXNzYWdlOiAnYCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgbGluZUNvbnRlbnQucmVwbGFjZShhdHRyLCBjaGFsay5tYWdlbnRhKGF0dHIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnYCAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGNoYWxrLmdyZXkoTVNHKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4pO1xuIl19