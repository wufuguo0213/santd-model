'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
var RULENAME = 'omit-protocol-in-url';

/**
 * 匹配 css 中 url 的正则
 *
 * @const
 * @type {RegExp}
 */
/**
 * @file omit-protocol-in-url 的检测逻辑
 *       027: [建议] `url()` 函数中的绝对路径可省去协议名。
 * @author ielgnaw(wuji0223@gmail.com)
 */

var PATTERN_URL = /\burl\s*\((["']?)([^\)]+)\1\)/g;

/**
 * 匹配 url() 中 path 的协议
 *
 * @const
 * @type {RegExp}
 */
var PATTERN_PROTOCOL = /^((https?|s?ftp|irc[6s]?|git|afp|telnet|smb):\/\/){1}/gi;

/**
 * 错误信息
 *
 * @const
 * @type {string}
 */
var MSG = 'Path in the `url()` should remove protocol';

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        if (opts.ruleVal) {

            css.walkDecls(function (decl) {

                if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                    return;
                }

                var source = decl.source,
                    value = decl.value;

                var line = source.start.line;
                var lineContent = (0, _util.getLineContent)(line, source.input.css);

                var match = null;
                var matchProtocol = null;

                /* eslint-disable no-extra-boolean-cast */
                while (!!(match = PATTERN_URL.exec(value))) {
                    var url = match[2];

                    // decl.value 相对于 lineContent 的 index
                    var valueIndex = lineContent.indexOf(decl.value);

                    // 相对于 decl.value 的 index
                    var index = valueIndex + match.input.indexOf(url);
                    while (!!(matchProtocol = PATTERN_PROTOCOL.exec(url))) {
                        result.warn(RULENAME, {
                            node: decl,
                            ruleName: RULENAME,
                            line: line,
                            col: index + 1,
                            message: MSG,
                            colorMessage: '`' + (0, _util.changeColorByIndex)(lineContent, index, matchProtocol[0]) + '` ' + _chalk2.default.grey(MSG)
                        });
                        global.CSSHINT_INVALID_ALL_COUNT++;
                    }
                }
                /* eslint-enable no-extra-boolean-cast */
            });
        }
    };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL29taXQtcHJvdG9jb2wtaW4tdXJsLmpzIl0sIm5hbWVzIjpbIlJVTEVOQU1FIiwiUEFUVEVSTl9VUkwiLCJQQVRURVJOX1BST1RPQ09MIiwiTVNHIiwiY2hlY2siLCJwb3N0Y3NzIiwicGx1Z2luIiwiY3NzIiwicmVzdWx0Iiwib3B0cyIsInJ1bGVWYWwiLCJ3YWxrRGVjbHMiLCJnbG9iYWwiLCJDU1NISU5UX0lOVkFMSURfQUxMX0NPVU5UIiwibWF4RXJyb3IiLCJzb3VyY2UiLCJkZWNsIiwidmFsdWUiLCJsaW5lIiwic3RhcnQiLCJsaW5lQ29udGVudCIsImlucHV0IiwibWF0Y2giLCJtYXRjaFByb3RvY29sIiwiZXhlYyIsInVybCIsInZhbHVlSW5kZXgiLCJpbmRleE9mIiwiaW5kZXgiLCJ3YXJuIiwibm9kZSIsInJ1bGVOYW1lIiwiY29sIiwibWVzc2FnZSIsImNvbG9yTWVzc2FnZSIsImNoYWxrIiwiZ3JleSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQU1BOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUVBOzs7Ozs7QUFNQSxJQUFNQSxXQUFXLHNCQUFqQjs7QUFFQTs7Ozs7O0FBbkJBOzs7Ozs7QUF5QkEsSUFBTUMsY0FBYyxnQ0FBcEI7O0FBRUE7Ozs7OztBQU1BLElBQU1DLG1CQUFtQix5REFBekI7O0FBRUE7Ozs7OztBQU1BLElBQU1DLE1BQU0sNENBQVo7O0FBRUE7Ozs7Ozs7O0FBUU8sSUFBTUMsd0JBQVFDLGtCQUFRQyxNQUFSLENBQWVOLFFBQWYsRUFBeUI7QUFBQSxXQUMxQyxVQUFDTyxHQUFELEVBQU1DLE1BQU4sRUFBaUI7QUFDYixZQUFJQyxLQUFLQyxPQUFULEVBQWtCOztBQUVkSCxnQkFBSUksU0FBSixDQUFjLGdCQUFROztBQUVsQixvQkFBSUMsT0FBT0MseUJBQVAsSUFBb0NKLEtBQUtLLFFBQTdDLEVBQXVEO0FBQ25EO0FBQ0g7O0FBSmlCLG9CQU1YQyxNQU5XLEdBTU1DLElBTk4sQ0FNWEQsTUFOVztBQUFBLG9CQU1IRSxLQU5HLEdBTU1ELElBTk4sQ0FNSEMsS0FORzs7QUFPbEIsb0JBQU1DLE9BQU9ILE9BQU9JLEtBQVAsQ0FBYUQsSUFBMUI7QUFDQSxvQkFBTUUsY0FBYywwQkFBZUYsSUFBZixFQUFxQkgsT0FBT00sS0FBUCxDQUFhZCxHQUFsQyxDQUFwQjs7QUFFQSxvQkFBSWUsUUFBUSxJQUFaO0FBQ0Esb0JBQUlDLGdCQUFnQixJQUFwQjs7QUFFQTtBQUNBLHVCQUFPLENBQUMsRUFBRUQsUUFBUXJCLFlBQVl1QixJQUFaLENBQWlCUCxLQUFqQixDQUFWLENBQVIsRUFBNEM7QUFDeEMsd0JBQU1RLE1BQU1ILE1BQU0sQ0FBTixDQUFaOztBQUVBO0FBQ0Esd0JBQU1JLGFBQWFOLFlBQVlPLE9BQVosQ0FBb0JYLEtBQUtDLEtBQXpCLENBQW5COztBQUVBO0FBQ0Esd0JBQU1XLFFBQVFGLGFBQWFKLE1BQU1ELEtBQU4sQ0FBWU0sT0FBWixDQUFvQkYsR0FBcEIsQ0FBM0I7QUFDQSwyQkFBTyxDQUFDLEVBQUVGLGdCQUFnQnJCLGlCQUFpQnNCLElBQWpCLENBQXNCQyxHQUF0QixDQUFsQixDQUFSLEVBQXVEO0FBQ25EakIsK0JBQU9xQixJQUFQLENBQVk3QixRQUFaLEVBQXNCO0FBQ2xCOEIsa0NBQU1kLElBRFk7QUFFbEJlLHNDQUFVL0IsUUFGUTtBQUdsQmtCLGtDQUFNQSxJQUhZO0FBSWxCYyxpQ0FBS0osUUFBUSxDQUpLO0FBS2xCSyxxQ0FBUzlCLEdBTFM7QUFNbEIrQiwwQ0FBYyxNQUNSLDhCQUFtQmQsV0FBbkIsRUFBZ0NRLEtBQWhDLEVBQXVDTCxjQUFjLENBQWQsQ0FBdkMsQ0FEUSxHQUVSLElBRlEsR0FHUlksZ0JBQU1DLElBQU4sQ0FBV2pDLEdBQVg7QUFUWSx5QkFBdEI7QUFXQVMsK0JBQU9DLHlCQUFQO0FBQ0g7QUFDSjtBQUNEO0FBQ0gsYUF0Q0Q7QUF1Q0g7QUFDSixLQTVDeUM7QUFBQSxDQUF6QixDQUFkIiwiZmlsZSI6Im9taXQtcHJvdG9jb2wtaW4tdXJsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBvbWl0LXByb3RvY29sLWluLXVybCDnmoTmo4DmtYvpgLvovpFcbiAqICAgICAgIDAyNzogW+W7uuiurl0gYHVybCgpYCDlh73mlbDkuK3nmoTnu53lr7not6/lvoTlj6/nnIHljrvljY/orq7lkI3jgIJcbiAqIEBhdXRob3IgaWVsZ25hdyh3dWppMDIyM0BnbWFpbC5jb20pXG4gKi9cblxuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCBwb3N0Y3NzIGZyb20gJ3Bvc3Rjc3MnO1xuXG5pbXBvcnQge2dldExpbmVDb250ZW50LCBjaGFuZ2VDb2xvckJ5SW5kZXh9IGZyb20gJy4uL3V0aWwnO1xuXG4vKipcbiAqIOW9k+WJjeaWh+S7tuaJgOS7o+ihqOeahOinhOWImeWQjeensFxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgUlVMRU5BTUUgPSAnb21pdC1wcm90b2NvbC1pbi11cmwnO1xuXG4vKipcbiAqIOWMuemFjSBjc3Mg5LitIHVybCDnmoTmraPliJlcbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbmNvbnN0IFBBVFRFUk5fVVJMID0gL1xcYnVybFxccypcXCgoW1wiJ10/KShbXlxcKV0rKVxcMVxcKS9nO1xuXG4vKipcbiAqIOWMuemFjSB1cmwoKSDkuK0gcGF0aCDnmoTljY/orq5cbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbmNvbnN0IFBBVFRFUk5fUFJPVE9DT0wgPSAvXigoaHR0cHM/fHM/ZnRwfGlyY1s2c10/fGdpdHxhZnB8dGVsbmV0fHNtYik6XFwvXFwvKXsxfS9naTtcblxuLyoqXG4gKiDplJnor6/kv6Hmga9cbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmNvbnN0IE1TRyA9ICdQYXRoIGluIHRoZSBgdXJsKClgIHNob3VsZCByZW1vdmUgcHJvdG9jb2wnO1xuXG4vKipcbiAqIOWFt+S9k+eahOajgOa1i+mAu+i+kVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIOWPguaVsFxuICogQHBhcmFtIHsqfSBvcHRzLnJ1bGVWYWwg5b2T5YmN6KeE5YiZ5YW35L2T6YWN572u55qE5YC8XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlQ29udGVudCDmlofku7blhoXlrrlcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZpbGVQYXRoIOaWh+S7tui3r+W+hFxuICovXG5leHBvcnQgY29uc3QgY2hlY2sgPSBwb3N0Y3NzLnBsdWdpbihSVUxFTkFNRSwgb3B0cyA9PlxuICAgIChjc3MsIHJlc3VsdCkgPT4ge1xuICAgICAgICBpZiAob3B0cy5ydWxlVmFsKSB7XG5cbiAgICAgICAgICAgIGNzcy53YWxrRGVjbHMoZGVjbCA9PiB7XG5cbiAgICAgICAgICAgICAgICBpZiAoZ2xvYmFsLkNTU0hJTlRfSU5WQUxJRF9BTExfQ09VTlQgPj0gb3B0cy5tYXhFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3Qge3NvdXJjZSwgdmFsdWV9ID0gZGVjbDtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gc291cmNlLnN0YXJ0LmxpbmU7XG4gICAgICAgICAgICAgICAgY29uc3QgbGluZUNvbnRlbnQgPSBnZXRMaW5lQ29udGVudChsaW5lLCBzb3VyY2UuaW5wdXQuY3NzKTtcblxuICAgICAgICAgICAgICAgIGxldCBtYXRjaCA9IG51bGw7XG4gICAgICAgICAgICAgICAgbGV0IG1hdGNoUHJvdG9jb2wgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tZXh0cmEtYm9vbGVhbi1jYXN0ICovXG4gICAgICAgICAgICAgICAgd2hpbGUgKCEhKG1hdGNoID0gUEFUVEVSTl9VUkwuZXhlYyh2YWx1ZSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IG1hdGNoWzJdO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGRlY2wudmFsdWUg55u45a+55LqOIGxpbmVDb250ZW50IOeahCBpbmRleFxuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZUluZGV4ID0gbGluZUNvbnRlbnQuaW5kZXhPZihkZWNsLnZhbHVlKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyDnm7jlr7nkuo4gZGVjbC52YWx1ZSDnmoQgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSB2YWx1ZUluZGV4ICsgbWF0Y2guaW5wdXQuaW5kZXhPZih1cmwpO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoISEobWF0Y2hQcm90b2NvbCA9IFBBVFRFUk5fUFJPVE9DT0wuZXhlYyh1cmwpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lndhcm4oUlVMRU5BTUUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlOiBkZWNsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGVOYW1lOiBSVUxFTkFNRSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lOiBsaW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbDogaW5kZXggKyAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IE1TRyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvck1lc3NhZ2U6ICdgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGNoYW5nZUNvbG9yQnlJbmRleChsaW5lQ29udGVudCwgaW5kZXgsIG1hdGNoUHJvdG9jb2xbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJ2AgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGNoYWxrLmdyZXkoTVNHKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tZXh0cmEtYm9vbGVhbi1jYXN0ICovXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbik7XG4iXX0=