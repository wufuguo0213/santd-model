'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.check = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 当前文件所代表的规则名称
 *
 * @const
 * @type {string}
 */
/**
 * @file floats 的检测逻辑
 *       Too many floats, you're probably using them for layout. Consider using a grid system instead
 *       https://github.com/CSSLint/csslint/wiki/Disallow-too-many-floats
 * @author ielgnaw(wuji0223@gmail.com)
 */

var RULENAME = 'floats';

/**
 * 错误的信息
 *
 * @const
 * @type {string}
 */
var MSG = '`float` must not be greater than ';

var floatCount = 0;

/**
 * 具体的检测逻辑
 *
 * @param {Object} opts 参数
 * @param {*} opts.ruleVal 当前规则具体配置的值
 * @param {string} opts.fileContent 文件内容
 * @param {string} opts.filePath 文件路径
 */
var check = exports.check = _postcss2.default.plugin(RULENAME, function (opts) {
    return function (css, result) {
        if (!opts.ruleVal || isNaN(opts.ruleVal)) {
            return;
        }

        floatCount = 0;

        css.walkDecls(function (decl) {
            if (global.CSSHINT_INVALID_ALL_COUNT >= opts.maxError) {
                return;
            }

            var prop = decl.prop,
                value = decl.value;

            if (prop === 'float' && value !== 'none') {
                floatCount++;
            }
        });

        if (floatCount > opts.ruleVal) {
            var str = MSG + opts.ruleVal + ', current file `float` is ' + floatCount;
            result.warn(RULENAME, {
                node: css,
                ruleName: RULENAME,
                message: str,
                colorMessage: _chalk2.default.grey(str)
            });

            global.CSSHINT_INVALID_ALL_COUNT++;
        }
    };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlL2Zsb2F0cy5qcyJdLCJuYW1lcyI6WyJSVUxFTkFNRSIsIk1TRyIsImZsb2F0Q291bnQiLCJjaGVjayIsInBvc3Rjc3MiLCJwbHVnaW4iLCJjc3MiLCJyZXN1bHQiLCJvcHRzIiwicnVsZVZhbCIsImlzTmFOIiwid2Fsa0RlY2xzIiwiZ2xvYmFsIiwiQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCIsIm1heEVycm9yIiwicHJvcCIsImRlY2wiLCJ2YWx1ZSIsInN0ciIsIndhcm4iLCJub2RlIiwicnVsZU5hbWUiLCJtZXNzYWdlIiwiY29sb3JNZXNzYWdlIiwiY2hhbGsiLCJncmV5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBT0E7Ozs7QUFDQTs7Ozs7O0FBRUE7Ozs7OztBQVZBOzs7Ozs7O0FBZ0JBLElBQU1BLFdBQVcsUUFBakI7O0FBRUE7Ozs7OztBQU1BLElBQU1DLE1BQU0sbUNBQVo7O0FBRUEsSUFBSUMsYUFBYSxDQUFqQjs7QUFFQTs7Ozs7Ozs7QUFRTyxJQUFNQyx3QkFBUUMsa0JBQVFDLE1BQVIsQ0FBZUwsUUFBZixFQUF5QjtBQUFBLFdBQzFDLFVBQUNNLEdBQUQsRUFBTUMsTUFBTixFQUFpQjtBQUNiLFlBQUksQ0FBQ0MsS0FBS0MsT0FBTixJQUFpQkMsTUFBTUYsS0FBS0MsT0FBWCxDQUFyQixFQUEwQztBQUN0QztBQUNIOztBQUVEUCxxQkFBYSxDQUFiOztBQUVBSSxZQUFJSyxTQUFKLENBQWMsZ0JBQVE7QUFDbEIsZ0JBQUlDLE9BQU9DLHlCQUFQLElBQW9DTCxLQUFLTSxRQUE3QyxFQUF1RDtBQUNuRDtBQUNIOztBQUhpQixnQkFLWEMsSUFMVyxHQUtJQyxJQUxKLENBS1hELElBTFc7QUFBQSxnQkFLTEUsS0FMSyxHQUtJRCxJQUxKLENBS0xDLEtBTEs7O0FBTWxCLGdCQUFJRixTQUFTLE9BQVQsSUFBb0JFLFVBQVUsTUFBbEMsRUFBMEM7QUFDdENmO0FBQ0g7QUFDSixTQVREOztBQVdBLFlBQUlBLGFBQWFNLEtBQUtDLE9BQXRCLEVBQStCO0FBQzNCLGdCQUFNUyxNQUFNakIsTUFBTU8sS0FBS0MsT0FBWCxHQUFxQiw0QkFBckIsR0FBb0RQLFVBQWhFO0FBQ0FLLG1CQUFPWSxJQUFQLENBQVluQixRQUFaLEVBQXNCO0FBQ2xCb0Isc0JBQU1kLEdBRFk7QUFFbEJlLDBCQUFVckIsUUFGUTtBQUdsQnNCLHlCQUFTSixHQUhTO0FBSWxCSyw4QkFBY0MsZ0JBQU1DLElBQU4sQ0FBV1AsR0FBWDtBQUpJLGFBQXRCOztBQU9BTixtQkFBT0MseUJBQVA7QUFDSDtBQUNKLEtBOUJ5QztBQUFBLENBQXpCLENBQWQiLCJmaWxlIjoiZmxvYXRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBmbG9hdHMg55qE5qOA5rWL6YC76L6RXG4gKiAgICAgICBUb28gbWFueSBmbG9hdHMsIHlvdSdyZSBwcm9iYWJseSB1c2luZyB0aGVtIGZvciBsYXlvdXQuIENvbnNpZGVyIHVzaW5nIGEgZ3JpZCBzeXN0ZW0gaW5zdGVhZFxuICogICAgICAgaHR0cHM6Ly9naXRodWIuY29tL0NTU0xpbnQvY3NzbGludC93aWtpL0Rpc2FsbG93LXRvby1tYW55LWZsb2F0c1xuICogQGF1dGhvciBpZWxnbmF3KHd1amkwMjIzQGdtYWlsLmNvbSlcbiAqL1xuXG5pbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IHBvc3Rjc3MgZnJvbSAncG9zdGNzcyc7XG5cbi8qKlxuICog5b2T5YmN5paH5Lu25omA5Luj6KGo55qE6KeE5YiZ5ZCN56ewXG4gKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5jb25zdCBSVUxFTkFNRSA9ICdmbG9hdHMnO1xuXG4vKipcbiAqIOmUmeivr+eahOS/oeaBr1xuICpcbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqL1xuY29uc3QgTVNHID0gJ2BmbG9hdGAgbXVzdCBub3QgYmUgZ3JlYXRlciB0aGFuICc7XG5cbmxldCBmbG9hdENvdW50ID0gMDtcblxuLyoqXG4gKiDlhbfkvZPnmoTmo4DmtYvpgLvovpFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyDlj4LmlbBcbiAqIEBwYXJhbSB7Kn0gb3B0cy5ydWxlVmFsIOW9k+WJjeinhOWImeWFt+S9k+mFjee9rueahOWAvFxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuZmlsZUNvbnRlbnQg5paH5Lu25YaF5a65XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5maWxlUGF0aCDmlofku7bot6/lvoRcbiAqL1xuZXhwb3J0IGNvbnN0IGNoZWNrID0gcG9zdGNzcy5wbHVnaW4oUlVMRU5BTUUsIG9wdHMgPT5cbiAgICAoY3NzLCByZXN1bHQpID0+IHtcbiAgICAgICAgaWYgKCFvcHRzLnJ1bGVWYWwgfHwgaXNOYU4ob3B0cy5ydWxlVmFsKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZmxvYXRDb3VudCA9IDA7XG5cbiAgICAgICAgY3NzLndhbGtEZWNscyhkZWNsID0+IHtcbiAgICAgICAgICAgIGlmIChnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCA+PSBvcHRzLm1heEVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCB7cHJvcCwgdmFsdWV9ID0gZGVjbDtcbiAgICAgICAgICAgIGlmIChwcm9wID09PSAnZmxvYXQnICYmIHZhbHVlICE9PSAnbm9uZScpIHtcbiAgICAgICAgICAgICAgICBmbG9hdENvdW50Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChmbG9hdENvdW50ID4gb3B0cy5ydWxlVmFsKSB7XG4gICAgICAgICAgICBjb25zdCBzdHIgPSBNU0cgKyBvcHRzLnJ1bGVWYWwgKyAnLCBjdXJyZW50IGZpbGUgYGZsb2F0YCBpcyAnICsgZmxvYXRDb3VudDtcbiAgICAgICAgICAgIHJlc3VsdC53YXJuKFJVTEVOQU1FLCB7XG4gICAgICAgICAgICAgICAgbm9kZTogY3NzLFxuICAgICAgICAgICAgICAgIHJ1bGVOYW1lOiBSVUxFTkFNRSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBzdHIsXG4gICAgICAgICAgICAgICAgY29sb3JNZXNzYWdlOiBjaGFsay5ncmV5KHN0cilcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBnbG9iYWwuQ1NTSElOVF9JTlZBTElEX0FMTF9DT1VOVCsrO1xuICAgICAgICB9XG4gICAgfVxuKTtcbiJdfQ==